(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1084],{3759:function(e,n,t){var i={"./menu.ar.json":[1510,1510],"./menu.da.json":[6781,6781],"./menu.de.json":[8607,8607],"./menu.en.json":[9053,9053],"./menu.es.json":[1107,1107],"./menu.fi.json":[936,936],"./menu.fr.json":[4902,4902],"./menu.he.json":[4403,4403],"./menu.it.json":[9766,9766],"./menu.ja.json":[7634,7634],"./menu.ko.json":[2040,2040],"./menu.nl.json":[5389,5389],"./menu.no.json":[1662,1662],"./menu.pt.json":[2562,2562],"./menu.ru.json":[7364,7364],"./menu.sv.json":[7569,7569],"./menu.th.json":[7793,7793],"./menu.tr.json":[4608,4608],"./menu.vi.json":[545,545],"./menu.zh-hant.json":[7752,7752],"./menu.zh.json":[5427,5427]};function a(e){if(!t.o(i,e))return Promise.resolve().then(function(){var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n});var n=i[e],a=n[0];return t.e(n[1]).then(function(){return t.t(a,19)})}a.keys=function(){return Object.keys(i)},a.id=3759,e.exports=a},8621:function(e,n,t){var i={"./ar.json":[1861,1861],"./da.json":[5130,5130],"./de.json":[3650,3650],"./en.json":[7890,7890],"./es.json":[8559,8559],"./fi.json":[7549,7549],"./fr.json":[5345,5345],"./he.json":[9659,9659],"./it.json":[5177,5177],"./ja.json":[3302,3302],"./ko.json":[1594,1594],"./nl.json":[8757,8757],"./no.json":[3524,3524],"./pt.json":[2140,2140],"./ru.json":[8827,8827],"./sv.json":[1794,1794],"./th.json":[6843,6843],"./tr.json":[6720,6720],"./vi.json":[8068,8068],"./zh-hant.json":[8359,8359],"./zh.json":[4355,4355]};function a(e){if(!t.o(i,e))return Promise.resolve().then(function(){var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n});var n=i[e],a=n[0];return t.e(n[1]).then(function(){return t.t(a,19)})}a.keys=function(){return Object.keys(i)},a.id=8621,e.exports=a},352:function(e,n,t){Promise.resolve().then(t.bind(t,787)),Promise.resolve().then(t.bind(t,5045)),Promise.resolve().then(t.bind(t,7743)),Promise.resolve().then(t.bind(t,8958))},8755:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var i=t(7437),a=t(231),o=t.n(a),s=t(145),r=e=>{let{href:n,passHref:t,...a}=e;return s.site.Yw?(0,i.jsx)("a",{href:n,...a}):(0,i.jsx)(o(),{href:n,passHref:t,...a})}},5159:function(e,n,t){"use strict";var i=t(7437),a=t(145),o=t(4410),s=t(9512),r=t(8755),l=t(2265);n.Z=e=>{let{src:n,lang:t}=e,{logo:c,logo_darkmode:d,logo_width:u,logo_height:m,logo_text:p,title:g}=a.site,{theme:h,resolvedTheme:f}=(0,s.F)(),[b,S]=(0,l.useState)(!1);(0,l.useEffect)(()=>S(!0),[]);let y=n||(b&&("dark"===h||"dark"===f)?d:c);return(0,i.jsx)(r.Z,{href:(0,o.b)(t,""),className:"navbar-brand inline-block",children:y?(0,i.jsx)("img",{width:2*u.replace("px",""),height:2*m.replace("px",""),src:y,alt:g,style:{height:m.replace("px","")+"px",width:u.replace("px","")+"px"}}):p||g})}},787:function(e,n,t){"use strict";t.d(n,{default:function(){return c}});var i=t(7437),a=JSON.parse('[{"lang":"en","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit: The GitHub Large File Storage (Git LFS) Free Alternative","description":"Discover how AWS CodeCommit serves as a cost-effective and efficient alternative to GitHub\'s Large File Storage (Git LFS). This article covers the limitations of Git LFS, the benefits of using AWS CodeCommit for large file storage, and provides a step-by-step guide for migrating from Git LFS to CodeCommit. Enhance your development workflow with AWS\'s scalable and secure infrastructure.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Software Development"],"draft":false},"content":"\\nAWS CodeCommit offers a robust alternative to GitHub\'s Large File Storage (Git LFS) service, providing an efficient solution for managing large files in your Git repositories.\\n\\n## Why You Should Reconsider Using Git LFS\\n\\nWhile Git LFS is a popular choice for handling large files in Git repositories, it has its limitations and challenges. Git LFS requires additional setup and management, which can complicate the development workflow. Additionally, the storage and bandwidth costs associated with Git LFS can escalate quickly, particularly for projects with numerous large files or extensive collaboration.\\n\\n## Why GitHub\'s Large File Storage Service Isn\'t Perfect\\n\\nGitHub\'s Large File Storage service, while useful, has inherent drawbacks. The primary concern is the cost associated with storage and bandwidth, which can become prohibitive for larger projects. Furthermore, managing Git LFS can be cumbersome, requiring developers to install and configure the LFS client, track specific files, and deal with potential merge conflicts that arise due to the handling of large files separately from the rest of the repository.\\n\\n## Why Use AWS CodeCommit to Store Large Files in Git\\n\\nAWS CodeCommit provides a compelling alternative for storing large files in Git repositories without the need for Git LFS. CodeCommit is a fully managed source control service that seamlessly integrates with other AWS services, offering robust scalability, security, and cost-efficiency. By leveraging CodeCommit, developers can avoid the additional overhead of managing Git LFS while benefiting from AWS\'s robust infrastructure and pay-as-you-go pricing model.\\n\\n## What Are the Limitations of AWS CodeCommit Compared to GitHub\\n\\nDespite its advantages, AWS CodeCommit does have some limitations when compared to GitHub. GitHub\'s extensive community support, rich ecosystem of integrations, and advanced features like GitHub Actions and GitHub Pages may not be fully replicated in CodeCommit. Additionally, developers accustomed to GitHub\'s user interface and collaboration tools might find the transition to CodeCommit requires some adjustment.\\n\\n## How to Migrate a Git LFS Repository to CodeCommit\\n\\nMigrating a Git LFS repository to CodeCommit involves several steps. First, ensure all large files are tracked correctly in your Git LFS repository. Next, clone the repository and remove the Git LFS tracking configuration. After that, create a new repository in AWS CodeCommit and push your local repository to it. Detailed documentation and scripts are available to streamline this process, ensuring a smooth transition without data loss or disruption.\\n\\n## A Better Solution\\n\\nFor teams and projects heavily reliant on Git LFS, exploring AWS CodeCommit as an alternative can offer significant benefits. CodeCommit\'s seamless integration with the AWS ecosystem, coupled with its cost-effective and scalable nature, makes it an attractive option for managing large files in Git repositories. By mitigating the challenges associated with Git LFS, CodeCommit empowers development teams to focus on coding and collaboration, driving productivity and innovation.\\n\\nIn conclusion, AWS CodeCommit provides a viable, cost-effective, and efficient alternative to GitHub\'s Large File Storage service. By leveraging AWS\'s robust infrastructure, developers can manage large files in Git repositories with ease, optimizing their workflows and reducing overhead.\\n"},{"lang":"en","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Check Voltage & Current  on MacOS for Power Adapter","meta_title":"Check Voltage & Current on MacOS for Power Adapter","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Power Adapter","Voltage","Current"],"categories":["MacOS"],"draft":false},"content":"\\nWhen you are using a MacBook, you may want to check the voltage and current of the power adapter. Here is a simple way to check the voltage and current of the power adapter on MacOS.\\n\\nOpen Terminal.app and type the command:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nYou will get the following information included current and voltage:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n```\\n"},{"lang":"en","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Quickly Convert Markdown to Academic-Style Paper PDF on macOS","meta_title":"Convert Markdown to Academic-Style Paper PDF on macOS with Pandoc","description":"Learn how to convert Markdown documents to academic-style paper PDFs on macOS using Pandoc and BasicTeX. This quick and straightforward method is perfect for creating professional PDF files for academic papers.","date":"2022-03-03T00:00:00.000Z","categories":["Software Development"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Paper","Markdown","macOS"],"draft":false},"content":"\\nIn this guide, I\'ll walk you through how I convert Markdown documents to academic-style paper PDFs on macOS using Pandoc and BasicTeX. This method is quick and straightforward, perfect for when you need to create professional-looking PDF files for your academic papers.\\n\\n### Step 1: Install Pandoc and BasicTeX\\n\\nFirst, you\'ll need to install Pandoc and BasicTeX on your macOS system. Here\'s how I did it:\\n\\n1. **Install Pandoc**: Open Terminal and enter the following command to install Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Install BasicTeX**: Since MacTeX is quite large, I opted for the smaller BasicTeX package to save space. Run this command:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Install Common LaTeX Packages**: To ensure you have the necessary packages for generating PDFs, run these commands:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Step 2: Prepare Your Markdown File\\n\\nNext, create your Markdown file (e.g., `paper.md`). Here’s how I set up my file, including the title, author, date, and contact information:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Step 3: Convert Markdown to PDF with Pandoc\\n\\nNow, you can convert your Markdown file to a PDF. I used the following command in Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nThis command uses Pandoc\'s default LaTeX template to convert the Markdown file into an academic-style paper PDF, including the author\'s contact information below their name.\\n\\n### Additional Tips\\n\\n- **Custom LaTeX Template**: If you need more advanced formatting or specific styles, you can create or download a custom LaTeX template and use it with Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **More Metadata**: You can add extra information in the YAML metadata header, such as an abstract or keywords, and use these in custom templates.\\n\\n### Conclusion\\n\\nBy following these steps, you can easily convert Markdown documents to academic-style paper PDFs on macOS. Using Pandoc and BasicTeX makes this process quick and efficient, perfect for when you need to generate professional PDF documents. Whether you\'re preparing academic papers, technical reports, or other formal documents, this method works great. Including contact information in the metadata header adds a professional touch to your documents.\\n\\nI hope you find this guide helpful! If you have any questions or run into issues, feel free to reach out. Happy writing!\\n"},{"lang":"en","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error: Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Software Development"]},"content":"\\nWhen working with Electron Build Tools, you might encounter an error related to the installation of pywin32 via Chocolatey. This can be frustrating, especially when it\'s a required dependency for your project. Below is a detailed explanation of the issue and potential steps to resolve it.\\n\\n### The Error\\n\\nWhen initializing an Electron project using Electron Build Tools, you may see the following error message:\\n\\n```bash\\nE:\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\deps-check.js:11:11)\\n    at fix (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\utils\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\Users\\\\zeeis\\\\.electron_build_tools\\\\src\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nThis error typically occurs because the pywin32 package installation script cannot find the required files on the remote server. This results in a 404 error, indicating that the file is not available at the specified URL.\\n\\n### Understanding the Error\\n\\nThe key part of the error message is:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n```\\n\\nThis indicates that the download URL for pywin32 is no longer valid, which means Chocolatey cannot retrieve the necessary installation files.\\n\\n### Troubleshooting Steps\\n\\nHere are a few steps you can take to resolve this issue:\\n\\n#### 1. Verify Chocolatey Installation\\n\\nEnsure that Chocolatey is installed correctly and updated to the latest version. You can check your Chocolatey version with:\\n\\n```bash\\nchoco --version\\n```\\n\\nTo update Chocolatey, use:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Manually Install pywin32\\n\\nSince the automated installation is failing, try manually installing pywin32. You can download the appropriate version from the official [pywin32 GitHub releases page](https://github.com/mhammond/pywin32/releases) and install it manually.\\n\\n#### 3. Modify the Installation Script\\n\\nIf you have control over the Electron Build Tools script, you can modify it to point to a valid URL for pywin32 or handle the manual installation process.\\n\\n#### 4. Use an Alternative Package Manager\\n\\nIf Chocolatey continues to fail, consider using an alternative package manager like pip for Python packages:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Example of Manually Installing pywin32\\n\\n1. Download the appropriate pywin32 installer from the [official GitHub releases](https://github.com/mhammond/pywin32/releases).\\n2. Run the installer and follow the installation instructions.\\n3. Verify the installation by running a simple Python script that imports pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nEncountering the \\"Failed to run `choco install pywin32 --yes`\\" error can be a roadblock in your development process. However, by understanding the root cause and following the steps outlined above, you can overcome this issue and continue with your Electron project setup.\\n"},{"lang":"en","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Full Custom ASIC Design Secrets for Bitcoin and Cryptocurrency Mining","date":"2022-05-30T00:00:00.000Z","update":"2023-12-30T00:00:00.000Z","categories":["Semiconductors","Bitcoin","Cryptocurrency","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Abstract\\n\\nIn the competitive world of cryptocurrency mining, power efficiency, hashrate performance, and reliability are paramount. This paper delves into the top-tier full custom ASIC (Application-Specific Integrated Circuit) design, revealing industry secrets and expert methodologies that drive high-performance Bitcoin and cryptocurrency mining. Written by a tech expert from one of the top ASIC miner companies, this paper leverages advanced design techniques, meticulous physical layout, and comprehensive verification processes to showcase the exceptional capabilities of full custom ASICs in maximizing mining efficiency and profitability.\\n\\n## Introduction\\n\\nThe evolution of cryptocurrency mining, particularly Bitcoin mining, has seen a shift from using general-purpose CPUs, FPGAs, and GPUs to specialized ASICs. These ASICs offer unparalleled performance and energy efficiency. Full custom ASIC design represents the pinnacle of this evolution, allowing for tailored solutions that meet the specific demands of mining operations.\\n\\nMuch of the existing literature on ASIC design for cryptocurrency mining comes from academia or non-mining enterprises, which often lacks real-world applicability. To date, only a handful of companies, primarily Chinese (e.g., MicroBT, Bitmain), have successfully developed marketable Bitcoin mining ASICs. This paper seeks to fill that gap by providing insights drawn from actual industry practice, offering a perspective grounded in the realities of the mining sector.\\n\\nAs a professional with over ten years of experience in the tech industry, the author of this paper has developed the world’s top Bitcoin ASIC Miner (WhatsMiner), LTC/DOGE and ETH Miners, and played a key role in companies like MicroBT, BTC.COM, and other public fablesses. He has held key positions in companies listed on NASDAQ, HKSE, and NYSE. With extensive experience in establishing partnerships with TSMC, Texas Instruments, ARM, and Intel, he brings a wealth of knowledge and practical expertise to the field of custom ASIC design for Bitcoin and cryptocurrency mining.\\n\\n## Methodology and Design Flow\\n\\n### Design Philosophy\\n\\nOur approach to full custom ASIC design is driven by a focus on maximizing PPA (Power, Performance, and Area), particularly under low-voltage operation conditions. This section will describe our design philosophy and methodology:\\n\\n1. **Pipeline Architecture**: Leveraging the inherent benefits of pipeline structures for mining algorithms, characterized by registers and combinational logic stages. By using a pipeline architecture, we can efficiently handle the high-frequency operations required for cryptocurrency mining.\\n2. **Manual Netlist and Placement**: Detailed scripting for netlist creation and manual cell placement to optimize critical paths. This allows for precise control over timing and reduces parasitic effects.\\n3. **Custom Cell Libraries**: Developing specialized cells with optimized transistor counts and dynamic power-saving features. Custom cells are designed to operate at the lowest possible voltages, ensuring minimal power consumption.\\n\\n### Achieving PPA Benefits\\n\\nDetailed strategies for achieving PPA benefits through custom design:\\n\\n1. **Custom Register Design**: Utilizing multi-bit registers and latch-based designs to reduce clock power and improve timing borrowing. Multi-bit registers minimize the clock tree\'s power consumption and reduce overall area.\\n2. **Manual Placement**: Reducing wire length and balancing setup and hold times to enhance overall performance. Manual placement allows for better control over interconnect delays and crosstalk, improving signal integrity and reducing power consumption.\\n3. **Optimized Cell Design**: Custom cells are designed to operate at lower voltages, minimizing dynamic power consumption and maximizing efficiency. By tailoring the cell designs to the specific needs of the mining algorithms, we can achieve significant improvements in performance.\\n\\n### Reliability Under Low Voltage\\n\\nEnsuring the reliability of custom-designed timing logic at low voltages involves:\\n\\n1. **Accurate Simulation**: Circuit-level simulations to validate custom cell behavior under specific conditions. Tools such as SPICE are used for detailed electrical simulations to ensure the cells operate correctly under all PVT (Process, Voltage, Temperature) corners.\\n2. **Consistency in Placement**: Manual placement to ensure uniformity and reduce variability. By controlling the physical layout, we can minimize the impact of process variations and ensure consistent performance.\\n3. **Precise PVT Calibration**: Verification against process, voltage, and temperature variations. Extensive testing and calibration are performed to ensure the design\'s robustness across different operating conditions.\\n\\n## Case Studies and Results\\n\\nPresenting real-world data and case studies from full mask tape-outs:\\n\\n| Project | Process Node | Voltage/Power Efficiency | Algorithm |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0.45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0.45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0.38V, 6.2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0.38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0.30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0.31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0.30V, 35J/T             | SHA-256d  |\\n\\nThese results demonstrate the substantial gains in efficiency and performance achievable through our custom design approach.\\n\\n## Integration and Verification\\n\\n### Mixed-Cell Signoff\\n\\n- **Integration of Custom Cells**: Custom cells are integrated with standard cells from TSMC and other foundries, ensuring compatibility and performance. Custom cells are characterized and validated to match the standard cell library requirements, enabling seamless integration.\\n- **Signoff Strategies**: Strategies for ensuring seamless compatibility and performance include detailed DRC (Design Rule Check) and LVS (Layout Versus Schematic) checks, as well as timing and power analysis using industry-standard EDA (Electronic Design Automation) tools.\\n\\n### Digital and Analog Co-Design\\n\\n- **Techniques for Integration**: Integrating digital and analog components to optimize overall chip performance. Techniques such as mixed-signal verification and co-simulation are used to ensure proper integration and functionality.\\n- **Verification Methodologies**: Methodologies to ensure robustness across different operational conditions include corner analysis, Monte Carlo simulations, and reliability verification to address aging and electromigration.\\n\\n## Conclusion\\n\\nFull custom ASIC design offers significant advantages for Bitcoin and cryptocurrency mining, providing unparalleled performance, power efficiency, and reliability. By unveiling the secrets of top-tier custom ASIC design, this paper highlights the methodologies and innovations that set industry leaders apart. As cryptocurrency mining continues to evolve, custom ASICs will play a crucial role in driving the next generation of high-efficiency, high-performance mining hardware.\\n\\n[PDF Version of the Paper](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"en","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Get current commit id of Git and update to package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Software Development"]},"content":"\\nWhen developing a Node.js project, you may want to keep track of the current commit ID of your Git repository. This information can be useful for debugging, versioning, or deployment purposes. One way to achieve this is by updating the `package.json` file with the current commit ID during the build process. This article will guide you through the steps to get the current commit ID of Git and update it to the `package.json` file using Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n```\\n"},{"lang":"en","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrate a GitHub LFS (Git Large File Storage) repository to AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Software Development"]},"content":"\\nI recently migrated one of my GitHub repositories, which uses Git Large File Storage (LFS), over to AWS CodeCommit. I thought I\'d share the process with you in case you’re looking to do something similar. Here\'s a step-by-step guide based on my experience.\\n\\n## Prerequisites\\n\\nBefore we get started, make sure you have these tools installed:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Step-by-Step Guide\\n\\n### 1. Clone the Repository\\n\\nFirst, clone your GitHub repository using the `--mirror` option. This creates a bare clone of the repository, including all branches and tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verify LFS Files\\n\\nNext, list all files managed by Git LFS to ensure everything is in place.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nYou should see something like this:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrate LFS Files\\n\\nNow, export the LFS files. This step makes sure they are part of your repository’s history.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nYou\'ll see some progress messages like these:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Clean Up LFS\\n\\nRemove the Git LFS tracking information and uninstall Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Push to AWS CodeCommit\\n\\nFinally, push your repository to AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nThat’s it! By following these steps, I successfully migrated my GitHub LFS repository to AWS CodeCommit. The large files and the repository history were preserved perfectly.\\n\\n## Wrapping Up\\n\\nMigrating a GitHub repository that uses Git LFS to AWS CodeCommit is pretty straightforward if you follow the right steps. If you have any questions or run into issues, the [AWS CodeCommit documentation](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) and [Git LFS documentation](https://git-lfs.github.com/) are great resources.\\n\\nI hope you find this guide helpful. Happy coding!\\n"},{"lang":"en","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Reset/Restore All subdirectories of Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Version Control"],"categories":["Software Development"]},"content":"\\nManaging a Git repository effectively often requires resetting or restoring subdirectories to maintain a clean and functional codebase. This guide provides a concise, step-by-step approach to reset or restore all subdirectories in a Git repository.\\n\\n## Resetting Subdirectories\\n\\nThe following Git command removes all untracked files and directories from the repository. This is useful for cleaning up unnecessary files before performing a reset or restore.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Command Breakdown:\\n\\n- `-x`: Remove all untracked files, including those ignored by `.gitignore`.\\n- `-f`: Force the removal of files.\\n- `-d`: Remove untracked directories.\\n- `-- .`: Apply the command to the current directory and all subdirectories.\\n\\n## Restoring Subdirectories\\n\\nTo restore all files in the repository to their last committed state, use the following command:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Command Breakdown:\\n\\n- `{HEAD OR BRANCH}`: Replace with `HEAD` to reset to the latest commit or specify a branch name to reset to a specific branch.\\n- `-- .`: Apply the command to the current directory and all subdirectories.\\n\\nBy using these commands, you can ensure that your repository is free from unwanted files and that all files are restored to their committed states. This process helps in maintaining a clean and organized codebase, facilitating easier collaboration and development.\\n\\nFeel free to customize this guide according to your specific needs and preferences. For more advanced Git operations, refer to the [official Git documentation](https://git-scm.com/doc).\\n"},{"lang":"en","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra Low-Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System","description":"Discover ultra low-cost memory test system for DDR3, DDR4, LP-DDR3, and LP-DDR4 technologies. Priced at around $200,000 USD, it offers high-speed testing, versatility, advanced features, and low power consumption. Perfect for businesses seeking cost-effective, reliable memory testing solutions.","date":"2024-06-01T00:00:00.000Z","categories":["Semiconductors"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Memory Test System"],"draft":false},"content":"\\nIf you\'re like me, always on the lookout for cost-effective solutions without compromising on quality, you\'re going to love what I have to share today. In our fast-paced tech world, ensuring that our devices\' memory is up to par is crucial. High-end options like the T5503/T5503HS2 are fantastic, but they come with a hefty price tag. Thankfully, Zeeis has stepped up with an ultra low-cost memory test system that doesn\'t sacrifice performance.\\n\\n## Why This Matters\\n\\nWhen I first learned about Zeeis\'s memory test system, I was intrigued. This system is designed to handle DDR3, DDR4, LP-DDR3, and LP-DDR4 memory technologies. Whether you\'re working with older systems or the latest tech, this system has you covered.\\n\\n### High-Speed Testing\\n\\nOne of the standout features is its ability to support data transfer rates ranging from 800 to 3200 MT/s for both DDR3 and DDR4. It can evaluate memory modules at clock speeds up to 1600 MHz. That means thorough and reliable testing, ensuring that your devices perform at their best.\\n\\n### Versatility\\n\\nThe versatility of this system is a game-changer. It supports multiple memory standards, making it suitable for a wide range of applications—from consumer electronics to high-performance computing. Plus, it\'s future-proof. As new memory technologies emerge, this system can be easily upgraded to support them.\\n\\n### Cost Efficiency\\n\\nNow, let\'s talk about the price. At around $200,000 USD, this system offers an excellent return on investment. It’s affordable enough for small to medium-sized enterprises, ensuring top-notch testing capabilities without breaking the bank.\\n\\n### Advanced Features\\n\\nThe system comes with advanced testing algorithms, including an integrated algorithmic pattern generator (ALPG). This ensures accurate and reliable memory evaluation, so each module meets stringent performance standards.\\n\\n### Low Power Consumption\\n\\nWhat’s also impressive is its low power consumption. It aligns with the trends seen in LP-DDR3 and LP-DDR4 memory technologies. By operating at lower voltages, it not only reduces energy costs but also minimizes thermal output, making it an eco-friendly choice.\\n\\n## Why Choose Zeeis?\\n\\n### Scalability\\n\\nZeeis’s system is designed with scalability in mind. As new memory technologies emerge, the system can be easily upgraded, ensuring long-term usability and reducing the need for frequent replacements.\\n\\n### Support and Documentation\\n\\nAnother big plus is Zeeis’s extensive support and documentation. Whether you\'re a seasoned professional or new to memory testing, their detailed guides and responsive customer service ensure a smooth experience.\\n\\n### Meeting Market Demands\\n\\nWith the growing demand for high-speed memory in everything from smartphones to data centers, having a reliable and cost-effective memory testing solution is essential. Zeeis’s system meets these demands, ensuring that your products are market-ready and perform flawlessly in real-world applications.\\n\\n## Conclusion\\n\\nIn a nutshell, Zeeis’s Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System is a fantastic option for those of us who need reliable, versatile, and affordable memory testing solutions. It offers high performance at a fraction of the cost of other high-end systems, empowering companies to maintain high standards without breaking the bank.\\n\\nIf you\'re interested in enhancing your testing capabilities with a system designed for the future of memory technology, please feel free to reach out to me for more information at [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nHappy testing!\\n"},{"lang":"en","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set on Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nIf you encounter the error message \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" on Ubuntu 20.04, follow these steps to resolve the issue.\\n\\n1. During the boot process, press the ‘ESC’ key to access the GRUB menu.\\n\\n![GRUB Screen](/images/content/wx20211008-210752.png \\"GRUB Screen\\")\\n\\n2. Select the first option, “Ubuntu,” and press the ‘e’ key to edit the boot parameters.\\n\\n![Edit Boot Parameters](/images/content/wx20211008-210841.png \\"Edit Boot Parameters\\")\\n\\n3. Append the following string to the line starting with ‘linux’ to boot into rescue mode:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Once in rescue mode, execute the following command to restore the correct permissions and ownership for `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nThis command sets the necessary permissions and ensures that `sudo` is owned by the root user with the setuid bit set.\\n\\nBy following these steps, you should be able to resolve the issue and restore proper functionality to the `sudo` command on your Ubuntu system.\\n\\n---\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit：GitHub 大型文件存儲 (Git LFS) 的免費替代方案","description":"了解 AWS CodeCommit 如何作為 GitHub 大型文件存儲 (Git LFS) 的經濟高效替代方案。本文涵蓋了 Git LFS 的限制、使用 AWS CodeCommit 進行大型文件存儲的優勢，並提供了從 Git LFS 遷移到 CodeCommit 的分步指南。利用 AWS 的可擴展和安全基礎設施提升您的開發工作流程。","date":"2022-02-09T00:00:00.000Z","author":"譚帥","tags":["AWS","Git","GitHub","LFS"],"categories":["軟體開發"],"draft":false},"content":"\\nAWS CodeCommit 提供了一個強大的替代方案，來取代 GitHub 的大型文件存儲 (Git LFS) 服務，提供了一個高效的解決方案來管理 Git 儲存庫中的大型文件。\\n\\n## 為什麼你應該重新考慮使用 Git LFS\\n\\n雖然 Git LFS 是處理 Git 儲存庫中大型文件的熱門選擇，但它也有其限制和挑戰。Git LFS 需要額外的設置和管理，這可能會使開發工作流程變得複雜。此外，與 Git LFS 相關的存儲和帶寬成本可能會迅速增加，特別是對於有大量大型文件或廣泛合作的項目。\\n\\n## 為什麼 GitHub 的大型文件存儲服務並不完美\\n\\nGitHub 的大型文件存儲服務雖然有用，但也有固有的缺點。主要問題是與存儲和帶寬相關的成本，這對於較大的項目來說可能會成為一個負擔。此外，管理 Git LFS 可能會很麻煩，要求開發人員安裝和配置 LFS 客戶端，跟踪特定文件，並處理由於大型文件與儲存庫其餘部分單獨處理而產生的潛在合併衝突。\\n\\n## 為什麼使用 AWS CodeCommit 來存儲 Git 中的大型文件\\n\\nAWS CodeCommit 提供了一個引人注目的替代方案來存儲 Git 儲存庫中的大型文件，而無需使用 Git LFS。CodeCommit 是一個完全管理的源代碼控制服務，無縫集成其他 AWS 服務，提供強大的可擴展性、安全性和成本效益。通過利用 CodeCommit，開發人員可以避免管理 Git LFS 的額外開銷，同時受益於 AWS 強大的基礎設施和按需付費的定價模式。\\n\\n## AWS CodeCommit 相比於 GitHub 的局限性\\n\\n儘管 AWS CodeCommit 具有許多優勢，但與 GitHub 相比也有一些局限性。GitHub 的廣泛社群支持、豐富的整合生態系統和高級功能如 GitHub Actions 和 GitHub Pages 可能無法在 CodeCommit 中完全複製。此外，習慣於 GitHub 用戶界面和協作工具的開發人員可能會發現轉向 CodeCommit 需要一些調整。\\n\\n## 如何將 Git LFS 儲存庫遷移到 CodeCommit\\n\\n將 Git LFS 儲存庫遷移到 CodeCommit 需要幾個步驟。首先，確保所有大文件在您的 Git LFS 儲存庫中被正確跟蹤。接下來，克隆儲存庫並移除 Git LFS 的跟蹤配置。之後，在 AWS CodeCommit 中創建一個新儲存庫，並將您的本地儲存庫推送到其中。有詳細的文檔和腳本可用於簡化這個過程，確保無數據丟失或中斷地順利遷移。\\n\\n## 一個更好的解決方案\\n\\n對於高度依賴 Git LFS 的團隊和項目，探索 AWS CodeCommit 作為替代方案可以提供顯著的好處。CodeCommit 與 AWS 生態系統的無縫集成，加上其具有成本效益和可擴展性，使其成為管理 Git 儲存庫中大文件的有吸引力的選擇。通過緩解與 Git LFS 相關的挑戰，CodeCommit 使開發團隊能夠專注於編碼和協作，提升生產力和創新。\\n\\n總結來說，AWS CodeCommit 提供了一個可行的、具有成本效益且高效的 GitHub 大文件存儲服務替代方案。通過利用 AWS 的強大基礎設施，開發人員可以輕鬆管理 Git 儲存庫中的大文件，優化工作流程並減少開銷。\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"在 MacOS 上檢查電源適配器的電壓和電流","meta_title":"在 MacOS 上檢查電源適配器的電壓和電流","date":"2022-02-14T00:00:00.000Z","author":"譚帥","tags":["MacOS","電源適配器","電壓","電流"],"categories":["MacOS"],"draft":false},"content":"\\n當您使用 MacBook 時，可能會想檢查電源適配器的電壓和電流。以下是在 MacOS 上檢查電源適配器電壓和電流的簡單方法。\\n\\n打開終端應用程式並輸入以下命令：\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n您將獲得包括電流和電壓在內的以下信息：\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"在 macOS 上快速將 Markdown 轉換為學術風格的 PDF 文件","meta_title":"使用 Pandoc 將 Markdown 轉換為學術風格的 PDF 文件在 macOS 上","description":"了解如何使用 Pandoc 和 BasicTeX 將 Markdown 文件轉換為學術風格的 PDF 文件。這種快速且簡單的方法非常適合用於創建專業的學術論文 PDF 文件。","date":"2022-03-03T00:00:00.000Z","categories":["軟體開發"],"author":"譚帥","tags":["Pandoc","LaTeX","PDF","論文","Markdown","macOS"],"draft":false},"content":"\\n在本指南中，我將向你介紹如何在 macOS 上使用 Pandoc 和 BasicTeX 將 Markdown 文件轉換為學術風格的 PDF 文件。這種方法快捷簡單，非常適合當你需要為學術論文創建專業外觀的 PDF 文件時使用。\\n\\n### 步驟 1：安裝 Pandoc 和 BasicTeX\\n\\n首先，你需要在 macOS 系統上安裝 Pandoc 和 BasicTeX。以下是我如何操作的：\\n\\n1. **安裝 Pandoc**：打開終端，輸入以下命令來安裝 Pandoc：\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **安裝 BasicTeX**：由於 MacTeX 相當大，我選擇了較小的 BasicTeX 包來節省空間。運行此命令：\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **安裝常用的 LaTeX 包**：為了確保你擁有生成 PDF 所需的必要包，運行以下命令：\\n\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### 步驟 2：準備你的 Markdown 文件\\n\\n接下來，創建你的 Markdown 文件（例如 `paper.md`）。以下是我設置文件的方式，包括標題、作者、日期和聯繫信息：\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### 步驟 3：使用 Pandoc 將 Markdown 轉換為 PDF\\n\\n現在，你可以將你的 Markdown 文件轉換為 PDF。我在終端中使用了以下命令：\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\n此命令使用 Pandoc 的默認 LaTeX 模板將 Markdown 文件轉換為學術風格的 PDF 文件，包括在作者姓名下方添加聯繫信息。\\n\\n### 附加提示\\n\\n- **自訂 LaTeX 模板**：如果你需要更高級的格式或特定風格，可以創建或下載自訂的 LaTeX 模板並與 Pandoc 一起使用：\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **更多元數據**：你可以在 YAML 元數據標頭中添加額外的信息，例如摘要或關鍵詞，並在自訂模板中使用這些信息。\\n\\n### 結論\\n\\n通過遵循這些步驟，你可以輕鬆地在 macOS 上將 Markdown 文件轉換為學術風格的 PDF 文件。使用 Pandoc 和 BasicTeX 使這一過程快速高效，非常適合當你需要生成專業的 PDF 文件時。無論你是在準備學術論文、技術報告還是其他正式文件，這種方法都非常有效。將聯繫信息包含在元數據標頭中，為你的文件增添了專業氣息。\\n\\n希望這份指南對你有所幫助！如果你有任何問題或遇到困難，隨時可以聯繫我們。祝寫作愉快！\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron 構建工具 `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"譚帥","tags":["Electron","構建工具","PyWin32","Chocolatey","Win32"],"categories":["軟體開發"]},"content":"\\n當使用 Electron Build Tools 時，您可能會遇到與通過 Chocolatey 安裝 pywin32 相關的錯誤。這可能會令人沮喪，尤其是當它是您的專案所需的依賴項時。以下是關於此問題的詳細說明及解決步驟。\\n\\n### 錯誤\\n\\n在使用 Electron Build Tools 初始化 Electron 專案時，您可能會看到以下錯誤訊息：\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\n此錯誤通常是由於 pywin32 套件的安裝腳本無法在遠端伺服器上找到所需的文件。這導致了 404 錯誤，表明該文件在指定的 URL 上不可用。\\n\\n### 理解錯誤\\n\\n錯誤訊息的關鍵部分是：\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\n這表示 pywin32 的下載 URL 不再有效，這意味著 Chocolatey 無法檢索所需的安裝文件。\\n\\n### 疑難排解步驟\\n\\n以下是一些解決此問題的步驟：\\n\\n#### 1. 驗證 Chocolatey 安裝\\n\\n確保 Chocolatey 安裝正確並更新至最新版本。您可以使用以下命令檢查 Chocolatey 版本：\\n\\n```bash\\nchoco --version\\n```\\n\\n要更新 Chocolatey，使用：\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. 手動安裝 pywin32\\n\\n由於自動安裝失敗，嘗試手動安裝 pywin32。您可以從官方 [pywin32 GitHub 發行頁面](https://github.com/mhammond/pywin32/releases)下載適當的版本並手動安裝。\\n\\n#### 3. 修改安裝腳本\\n\\n如果您可以控制 Electron Build Tools 腳本，您可以將其修改為指向有效的 pywin32 URL 或處理手動安裝過程。\\n\\n#### 4. 使用替代的包管理器\\n\\n如果 Chocolatey 繼續失敗，考慮使用其他包管理器，如 pip 來安裝 Python 包：\\n\\n```bash\\npip install pywin32\\n```\\n\\n### 手動安裝 pywin32 的示例\\n\\n1. 從[官方 GitHub 發行頁面](https://github.com/mhammond/pywin32/releases)下載適當的 pywin32 安裝程序。\\n2. 運行安裝程序並按照安裝說明進行操作。\\n3. 通過運行簡單的 Python 腳本來驗證安裝：\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n遇到 \\"Failed to run `choco install pywin32 --yes`\\" 錯誤可能會阻礙您的開發過程。然而，通過了解根本原因並按照上述步驟操作，您可以克服這個問題，繼續進行您的 Electron 項目設置。\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"比特幣和加密貨幣挖礦的全定制 ASIC 設計祕密","date":"2022-05-30T00:00:00.000Z","categories":["半導體","比特幣","加密貨幣","區塊鏈"],"author":"譚帥","tags":["ASIC","比特幣","挖礦","BTC"],"draft":false,"contact":"譚帥 | tanshuai@btc.com | tanshuai.com"},"content":"\\n譚帥  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 摘要\\n\\n在競爭激烈的加密貨幣挖礦世界中，電力效率、算力性能和可靠性至關重要。本文深入探討了頂級的全定制ASIC（專用集成電路）設計，揭示了推動高性能比特幣和加密貨幣挖礦的行業秘密和專家方法。本文由一家頂級ASIC礦機公司的技術專家撰寫，利用先進的設計技術、細緻的物理佈局和全面的驗證過程，展示了全定制ASIC在最大化挖礦效率和盈利能力方面的卓越能力。\\n\\n## 介紹\\n\\n加密貨幣挖礦，特別是比特幣挖礦的發展，已經從使用通用CPU、FPGA和GPU轉向專用ASIC。這些ASIC提供了無與倫比的性能和能源效率。全定制ASIC設計代表了這一發展的巔峰，允許針對挖礦操作的具體需求量身定制解決方案。\\n\\n現有關於加密貨幣挖礦ASIC設計的文獻大多來自學術界或非挖礦企業，往往缺乏現實應用性。迄今為止，只有少數幾家公司，主要是中國公司（如MicroBT、比特大陸），成功開發出可銷售的比特幣挖礦ASIC。本文旨在填補這一空白，提供來自實際行業實踐的見解，提供一個立足於挖礦行業現實的視角。\\n\\n作為一位擁有超過十年技術行業經驗的專業人士，本文作者開發了世界頂級的比特幣ASIC礦機（WhatsMiner）、LTC/DOGE和ETH礦機，並在MicroBT、BTC.COM等無晶圓廠公司中擔任重要角色。他曾在NASDAQ、港交所和紐交所上市公司中擔任關鍵職位。擁有與台積電、德州儀器、ARM和英特爾建立合作關係的豐富經驗，他為比特幣和加密貨幣挖礦的定制ASIC設計領域帶來了豐富的知識和實際專業知識。\\n\\n## 方法論與設計流程\\n\\n### 設計理念\\n\\n我們的全定制 ASIC 設計方法著重於在低電壓運行條件下最大化 PPA（功耗、性能和面積）。本節將描述我們的設計理念和方法：\\n\\n1. **管道架構**：利用管道結構在採礦算法中的固有優勢，這些結構由寄存器和組合邏輯階段組成。通過使用管道架構，我們可以有效處理加密貨幣採礦所需的高頻操作。\\n2. **手動網表和佈局**：詳細腳本用於創建網表並手動放置單元，以優化關鍵路徑。這允許對定時進行精確控制並減少寄生效應。\\n3. **自定義單元庫**：開發具有優化晶體管數量和動態節能功能的專門單元。自定義單元被設計為在最低電壓下運行，確保最小的功耗。\\n\\n### 實現 PPA 效益\\n\\n通過定制設計實現 PPA 效益的詳細策略：\\n\\n1. **自定義寄存器設計**：利用多位寄存器和基於鎖存器的設計來減少時鐘功率並改善定時借用。多位寄存器最小化時鐘樹的功耗並減少整體面積。\\n2. **手動佈局**：減少導線長度和平衡設置和保持時間以提高整體性能。手動佈局允許更好地控制互連延遲和串擾，提高信號完整性並減少功耗。\\n3. **優化單元設計**：自定義單元被設計為在較低電壓下運行，最小化動態功耗並最大化效率。通過針對採礦算法的特定需求量身定制單元設計，我們可以顯著提高性能。\\n\\n### 低電壓下的可靠性\\n\\n確保在低電壓下定制設計的時序邏輯的可靠性包括：\\n\\n1. **精確模擬**：電路級模擬以驗證特定條件下的自定義單元行為。使用 SPICE 等工具進行詳細的電氣模擬，以確保單元在所有 PVT（製程、電壓、溫度）角下正常運行。\\n2. **佈局一致性**：手動佈局以確保均勻性並減少變異性。通過控制物理佈局，我們可以最小化製程變異的影響並確保性能一致。\\n3. **精確的 PVT 校準**：針對製程、電壓和溫度變化進行驗證。進行廣泛的測試和校準，以確保設計在不同運行條件下的穩健性。\\n\\n## 案例研究與結果\\n\\n呈現來自全掩模 tape-out 的實際數據和案例研究：\\n\\n| 專案 | 製程節點 | 電壓/功率效率 | 演算法 |\\n| ---- | -------- | -------------- | ------- |\\n| SC   | 台積電 28nm | 0.45V, 257J/T | Blake2b |\\n| DCR  | 台積電 28nm | 0.45V, 150J/T | Blake256 |\\n| DASH | 台積電 16nm | 0.38V, 6.2J/G | X11 |\\n| BTC  | 台積電 16nm | 0.38V, 65J/T  | SHA-256d |\\n| BTC  | 台積電 7nm  | 0.30V, 37J/T  | SHA-256d |\\n| BTC  | 三星 8nm    | 0.31V, 45J/T  | SHA-256d |\\n| BTC  | 中芯國際 N+1 | 0.30V, 35J/T  | SHA-256d |\\n\\n這些結果展示了透過我們的客製化設計方法可達到的顯著效率和性能提升。\\n\\n## 整合與驗證\\n\\n### 混合單元簽核\\n\\n- **客製單元的整合**：客製單元與台積電及其他晶圓廠的標準單元相結合，確保相容性和性能。客製單元經過特徵化和驗證，以符合標準單元庫的要求，實現無縫整合。\\n- **簽核策略**：確保無縫相容性和性能的策略包括詳細的 DRC（設計規則檢查）和 LVS（佈局對比原理圖）檢查，以及使用行業標準的 EDA（電子設計自動化）工具進行時序和功率分析。\\n\\n### 數位與類比共同設計\\n\\n- **整合技術**：整合數位和類比元件以優化整體晶片性能。使用混合信號驗證和共同模擬等技術，確保正確的整合和功能。\\n- **驗證方法**：確保在不同操作條件下的穩健性的方法包括角落分析、蒙地卡羅模擬和可靠性驗證，以應對老化和電遷移問題。\\n\\n## 結論\\n\\n全客製化 ASIC 設計為比特幣和加密貨幣挖礦提供了顯著的性能、功率效率和可靠性優勢。本文揭示了頂尖客製化 ASIC 設計的秘密，強調了使行業領先者脫穎而出的方法和創新。隨著加密貨幣挖礦的持續發展，客製化 ASIC 將在推動下一代高效能、高效率的挖礦硬體中發揮關鍵作用。\\n\\n[PDF 版本的論文](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"獲取 Git 的當前提交 ID 並更新至 package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"譚帥","tags":["Git","Package.json","Node.js"],"categories":["軟體開發"]},"content":"\\n在開發 Node.js 項目時，你可能希望跟踪 Git 存儲庫的當前提交 ID。這些資訊對於調試、版本控制或部署都可能很有用。實現這一目標的一種方法是在構建過程中更新 `package.json` 文件，將當前的提交 ID 加入其中。本文將指導你如何使用 Node.js 獲取 Git 的當前提交 ID 並將其更新到 `package.json` 文件中。\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"將 GitHub LFS（Git 大文件存儲）存儲庫遷移到 AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"譚帥","tags":["AWS","Git","GitHub","LFS"],"categories":["軟體開發"]},"content":"\\n最近，我將使用 Git Large File Storage (LFS) 的一個 GitHub 存儲庫遷移到了 AWS CodeCommit。我想與你分享這個過程，以防你也想做類似的事情。以下是根據我的經驗編寫的逐步指南。\\n\\n## 先決條件\\n\\n在開始之前，請確保你已安裝以下工具：\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## 步驟指南\\n\\n### 1. 克隆存儲庫\\n\\n首先，使用 `--mirror` 選項克隆你的 GitHub 存儲庫。這會創建一個包含所有分支和標籤的裸克隆。\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. 驗證 LFS 文件\\n\\n接下來，列出由 Git LFS 管理的所有文件，以確保一切就緒。\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n你應該會看到類似這樣的內容：\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. 遷移 LFS 文件\\n\\n現在，導出 LFS 文件。這一步確保它們成為你存儲庫歷史的一部分。\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n你會看到一些進度消息，如下所示：\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. 清理 LFS\\n\\n移除 Git LFS 跟踪信息並卸載 Git LFS。\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. 推送到 AWS CodeCommit\\n\\n最後，將你的存儲庫推送到 AWS CodeCommit。\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n就是這樣！按照這些步驟，我成功地將我的 GitHub LFS 存儲庫遷移到了 AWS CodeCommit。大文件和存儲庫歷史得到了完美的保留。\\n\\n## 結束\\n\\n如果你按照正確的步驟操作，將使用 Git LFS 的 GitHub 存儲庫遷移到 AWS CodeCommit 是相當簡單的。如果你有任何問題或遇到問題，[AWS CodeCommit 文檔](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)和 [Git LFS 文檔](https://git-lfs.github.com/)都是很好的資源。\\n\\n希望這個指南對您有所幫助。祝編程愉快！\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"重置/恢復 Git 的所有子目錄","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"譚帥","tags":["Git","版本控制"],"categories":["軟體開發"]},"content":"\\n有效管理 Git 存儲庫通常需要重置或還原子目錄，以保持乾淨且功能正常的代碼庫。本指南提供了一個簡潔的、逐步的方法來重置或還原 Git 存儲庫中的所有子目錄。\\n\\n## 重置子目錄\\n\\n以下 Git 命令將從存儲庫中刪除所有未追踪的文件和目錄。這在執行重置或還原之前清理不必要的文件非常有用。\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### 命令解析：\\n\\n- `-x`：刪除所有未追踪的文件，包括 `.gitignore` 忽略的文件。\\n- `-f`：強制刪除文件。\\n- `-d`：刪除未追踪的目錄。\\n- `-- .`：將命令應用於當前目錄及所有子目錄。\\n\\n## 還原子目錄\\n\\n要將存儲庫中的所有文件還原到最後提交的狀態，請使用以下命令：\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### 命令解析：\\n\\n- `{HEAD OR BRANCH}`：替換為 `HEAD` 以重置到最新提交，或指定分支名稱以重置到特定分支。\\n- `-- .`：將命令應用於當前目錄及所有子目錄。\\n\\n通過使用這些命令，您可以確保存儲庫中沒有不需要的文件，並且所有文件都還原到提交的狀態。這一過程有助於保持乾淨和有條理的代碼庫，便於更輕鬆地協作和開發。\\n\\n請隨意根據您的具體需求和偏好自定義本指南。欲了解更多高級 Git 操作，請參考[官方 Git 文檔](https://git-scm.com/doc)。\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"超低成本的 DDR3、DDR4、LP-DDR3 和 LP-DDR4 記憶體測試系統","description":"探索針對 DDR3、DDR4、LP-DDR3 和 LP-DDR4 技術的超低成本記憶體測試系統。價格約為 200,000 美元，提供高速測試、多功能性、先進功能和低功耗。非常適合尋求具成本效益和可靠的記憶體測試解決方案的企業。","date":"2024-06-01T00:00:00.000Z","categories":["半導體"],"author":"譚帥","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","記憶體測試系統"],"draft":false},"content":"\\n如果你和我一樣，總是在尋找既經濟又不妥協於質量的解決方案，你會喜歡我今天要分享的內容。在我們這個快節奏的科技世界裡，確保設備的記憶體達到標準至關重要。高端選擇如T5503/T5503HS2固然出色，但價格不菲。幸好，Zeeis推出了一款性能不妥協的超低成本記憶體測試系統。\\n\\n## 為什麼這很重要\\n\\n當我第一次了解到Zeeis的記憶體測試系統時，我深感興趣。這套系統旨在處理DDR3、DDR4、LP-DDR3和LP-DDR4記憶體技術。無論你在使用舊系統還是最新技術，這套系統都能滿足你的需求。\\n\\n### 高速測試\\n\\n其突出的特點之一是支持800到3200 MT/s的數據傳輸速率，適用於DDR3和DDR4。它可以在高達1600 MHz的時鐘速度下評估記憶體模塊，這意味著可以進行徹底且可靠的測試，確保你的設備表現最佳。\\n\\n### 多功能性\\n\\n這個系統的多功能性改變了遊戲規則。它支持多種記憶體標準，適用於從消費電子到高性能計算的廣泛應用。此外，它具有未來適應性。隨著新記憶體技術的出現，這套系統可以輕鬆升級以支持它們。\\n\\n### 成本效益\\n\\n現在，讓我們談談價格。大約20萬美元，這套系統提供了優秀的投資回報。它對於中小型企業來說也足夠經濟，確保頂級的測試能力而不會超出預算。\\n\\n### 高級功能\\n\\n這個系統配備了高級測試算法，包括一個集成的算法模式生成器（ALPG）。這確保了精確且可靠的記憶體評估，使每個模塊都符合嚴格的性能標準。\\n\\n### 低功耗\\n\\n另外令人印象深刻的是其低功耗。它符合LP-DDR3和LP-DDR4記憶體技術的趨勢。通過在較低電壓下運行，它不僅降低了能源成本，還減少了熱輸出，使其成為一個環保的選擇。\\n\\n## 為何選擇 Zeeis？\\n\\n### 擴展性\\n\\nZeeis 的系統在設計時就考慮到了擴展性。隨著新記憶體技術的出現，系統可以輕鬆升級，確保長期使用，並減少頻繁更換的需求。\\n\\n### 支援與文件\\n\\n另一個重大優勢是 Zeeis 的全面支援和文件。無論您是記憶體測試的資深專業人士，還是新手，他們的詳細指南和響應迅速的客服都能確保您擁有順暢的體驗。\\n\\n### 滿足市場需求\\n\\n隨著從智能手機到數據中心的高速度記憶體需求不斷增長，擁有可靠且具成本效益的記憶體測試解決方案至關重要。Zeeis 的系統滿足了這些需求，確保您的產品能在實際應用中完美運行。\\n\\n## 結論\\n\\n簡而言之，Zeeis 的超低成本 DDR3、DDR4、LP-DDR3 及 LP-DDR4 記憶體測試系統是我們這些需要可靠、多功能且經濟實惠的記憶體測試解決方案的絕佳選擇。它以一小部分成本提供高性能，讓公司在保持高標準的同時不會超出預算。\\n\\n如果您有興趣通過設計為未來記憶體技術的系統來提升您的測試能力，請隨時通過 [i@tanshuai.com](mailto:i@tanshuai.com) 與我聯繫以獲取更多信息。\\n\\n祝測試愉快！\\n"},{"lang":"zh-hant","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo 必須由 uid 0 擁有並在 Ubuntu 20.04 上設置 setuid 位","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\n如果您在 Ubuntu 20.04 上遇到錯誤訊息「/usr/bin/sudo 必須由 uid 0 擁有並且設置 setuid 位」，請按照以下步驟解決該問題。\\n\\n1. 在啟動過程中，按下 ‘ESC’ 鍵進入 GRUB 菜單。\\n\\n![GRUB 螢幕](/images/content/wx20211008-210752.png \\"GRUB 螢幕\\")\\n\\n2. 選擇第一個選項 “Ubuntu”，然後按下 ‘e’ 鍵編輯啟動參數。\\n\\n![編輯啟動參數](/images/content/wx20211008-210841.png \\"編輯啟動參數\\")\\n\\n3. 將以下字串附加到以 ‘linux’ 開頭的行，進入救援模式：\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. 進入救援模式後，執行以下命令以恢復 `/usr/bin/sudo` 的正確權限和所有權：\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\n此命令設定必要的權限，並確保 `sudo` 由 root 使用者擁有並設置 setuid 位。\\n\\n通過遵循這些步驟，您應該能夠解決問題並恢復 `sudo` 命令在您的 Ubuntu 系統上的正常功能。\\n\\n---\\n"},{"lang":"zh","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit：GitHub 大文件存储 (Git LFS) 的免费替代方案","description":"了解 AWS CodeCommit 如何作为一个经济高效且高效的 GitHub 大文件存储 (Git LFS) 替代方案。本文介绍了 Git LFS 的局限性，使用 AWS CodeCommit 进行大文件存储的好处，并提供了从 Git LFS 迁移到 CodeCommit 的逐步指南。通过 AWS 的可扩展且安全的基础设施提升您的开发工作流程。","date":"2022-02-09T00:00:00.000Z","author":"谭帅","tags":["AWS","Git","GitHub","LFS"],"categories":["软件开发"],"draft":false},"content":"\\nAWS CodeCommit 提供了一个强大的替代方案来代替 GitHub 的大型文件存储（Git LFS）服务，为在 Git 仓库中管理大文件提供了高效的解决方案。\\n\\n## 为什么你应该重新考虑使用 Git LFS\\n\\n虽然 Git LFS 是处理 Git 仓库中大文件的热门选择，但它有其局限性和挑战。Git LFS 需要额外的设置和管理，这可能会使开发工作流程变得复杂。此外，与 Git LFS 相关的存储和带宽成本可能会迅速上升，特别是对于有大量大文件或广泛协作的项目。\\n\\n## 为什么 GitHub 的大型文件存储服务并不完美\\n\\nGitHub 的大型文件存储服务虽然有用，但也存在固有的缺点。主要问题是与存储和带宽相关的成本，对于较大的项目来说，这些成本可能会变得难以承受。此外，管理 Git LFS 可能很麻烦，开发者需要安装和配置 LFS 客户端，跟踪特定文件，并处理由于大文件与仓库其余部分分开处理而产生的潜在合并冲突。\\n\\n## 为什么使用 AWS CodeCommit 在 Git 中存储大文件\\n\\nAWS CodeCommit 提供了一个有吸引力的替代方案，用于在 Git 仓库中存储大文件而无需 Git LFS。CodeCommit 是一个完全托管的源代码控制服务，可以无缝集成到其他 AWS 服务中，提供强大的可扩展性、安全性和成本效益。通过利用 CodeCommit，开发者可以避免管理 Git LFS 的额外开销，同时受益于 AWS 的强大基础设施和按需付费的定价模式。\\n\\n## AWS CodeCommit 与 GitHub 相比的局限性\\n\\n尽管 AWS CodeCommit 具有许多优势，但与 GitHub 相比仍有一些局限性。GitHub 的广泛社区支持、丰富的集成生态系统以及 GitHub Actions 和 GitHub Pages 等高级功能可能无法在 CodeCommit 中完全复制。此外，习惯于 GitHub 用户界面和协作工具的开发者可能会发现，转向 CodeCommit 需要一些调整。\\n\\n## 如何将 Git LFS 仓库迁移到 CodeCommit\\n\\n将 Git LFS 仓库迁移到 CodeCommit 包含几个步骤。首先，确保所有大文件在你的 Git LFS 仓库中被正确跟踪。接下来，克隆仓库并移除 Git LFS 跟踪配置。然后，在 AWS CodeCommit 中创建一个新仓库，并将本地仓库推送到该新仓库。详细的文档和脚本可用于简化这一过程，确保顺利迁移而不丢失数据或造成中断。\\n\\n## 更好的解决方案\\n\\n对于依赖 Git LFS 的团队和项目，探索 AWS CodeCommit 作为替代方案可以带来显著的优势。CodeCommit 与 AWS 生态系统的无缝集成，再加上其成本效益和可扩展性，使其成为管理 Git 仓库中大文件的理想选择。通过缓解与 Git LFS 相关的挑战，CodeCommit 使开发团队能够专注于编码和协作，从而推动生产力和创新。\\n\\n总之，AWS CodeCommit 提供了一个可行的、成本效益高且高效的替代方案来替代 GitHub 的大型文件存储服务。通过利用 AWS 强大的基础设施，开发者可以轻松管理 Git 仓库中的大文件，优化工作流程并减少开销。\\n"},{"lang":"zh","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"在 MacOS 上检查电源适配器的电压和电流","meta_title":"在 MacOS 上检查电源适配器的电压和电流","date":"2022-02-14T00:00:00.000Z","author":"谭帅","tags":["MacOS","电源适配器","电压","电流"],"categories":["MacOS"],"draft":false},"content":"\\n当你使用 MacBook 时，可能想检查电源适配器的电压和电流。以下是在 MacOS 上检查电源适配器电压和电流的简单方法。\\n\\n打开 Terminal.app 并输入以下命令：\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n你将获得以下信息，包括电流和电压：\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"zh","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"在 macOS 上快速将 Markdown 转换为学术风格的 PDF 论文","meta_title":"使用 Pandoc 在 macOS 上将 Markdown 转换为学术风格的 PDF 论文","description":"了解如何使用 Pandoc 和 BasicTeX 在 macOS 上将 Markdown 文档转换为学术风格的 PDF 论文。这种快速简便的方法非常适合创建学术论文的专业 PDF 文件。","date":"2022-03-03T00:00:00.000Z","categories":["软件开发"],"author":"谭帅","tags":["Pandoc","LaTeX","PDF","论文","Markdown","macOS"],"draft":false},"content":"\\n在本指南中，我将向您展示如何使用 Pandoc 和 BasicTeX 在 macOS 上将 Markdown 文档转换为学术风格的 PDF 论文。这种方法快速且简单，非常适合需要创建专业外观的学术论文 PDF 文件时使用。\\n\\n### 第一步：安装 Pandoc 和 BasicTeX\\n\\n首先，您需要在 macOS 系统上安装 Pandoc 和 BasicTeX。以下是我的安装步骤：\\n\\n1. **安装 Pandoc**：打开终端并输入以下命令以安装 Pandoc：\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **安装 BasicTeX**：由于 MacTeX 体积较大，我选择了较小的 BasicTeX 包以节省空间。运行此命令：\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **安装常用的 LaTeX 包**：为了确保您拥有生成 PDF 所需的必要包，运行以下命令：\\n\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### 第二步：准备您的 Markdown 文件\\n\\n接下来，创建您的 Markdown 文件（例如 `paper.md`）。以下是我的文件设置方式，包括标题、作者、日期和联系信息：\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### 第三步：使用 Pandoc 将 Markdown 转换为 PDF\\n\\n现在，您可以将 Markdown 文件转换为 PDF。我在终端中使用以下命令：\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\n此命令使用 Pandoc 的默认 LaTeX 模板将 Markdown 文件转换为学术风格的 PDF 论文，并在作者名字下方包含联系信息。\\n\\n### 其他提示\\n\\n- **自定义 LaTeX 模板**：如果您需要更高级的格式或特定样式，可以创建或下载自定义 LaTeX 模板并与 Pandoc 一起使用：\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **更多元数据**：您可以在 YAML 元数据头中添加摘要或关键词等额外信息，并在自定义模板中使用这些信息。\\n\\n### 结论\\n\\n通过遵循这些步骤，您可以轻松地在 macOS 上将 Markdown 文档转换为学术风格的 PDF 论文。使用 Pandoc 和 BasicTeX 使这一过程快速且高效，非常适合需要生成专业 PDF 文件时使用。无论您是准备学术论文、技术报告还是其他正式文件，这种方法都非常适用。在元数据头中包含联系信息为您的文档增添了专业感。\\n\\n希望本指南对您有所帮助！如果您有任何问题或遇到困难，请随时联系。祝写作愉快！\\n"},{"lang":"zh","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron 构建工具 `ERROR Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"谭帅","tags":["Electron","构建工具","PyWin32","Chocolatey","Win32"],"categories":["软件开发"]},"content":"\\n当使用 Electron Build Tools 时，您可能会遇到通过 Chocolatey 安装 pywin32 相关的错误。这可能会令人沮丧，特别是当它是您项目所需的依赖项时。以下是问题的详细解释和可能的解决步骤。\\n\\n### 错误\\n\\n在使用 Electron Build Tools 初始化一个 Electron 项目时，您可能会看到以下错误信息：\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\n此错误通常是由于 pywin32 包的安装脚本无法在远程服务器上找到所需的文件。这会导致 404 错误，表示在指定的 URL 上找不到文件。\\n\\n### 理解错误\\n\\n错误信息的关键部分是：\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\n这表明 pywin32 的下载 URL 不再有效，这意味着 Chocolatey 无法检索到必要的安装文件。\\n\\n### 排查步骤\\n\\n以下是一些解决该问题的步骤：\\n\\n#### 1. 验证 Chocolatey 安装\\n\\n确保 Chocolatey 已正确安装并更新至最新版本。您可以使用以下命令检查 Chocolatey 版本：\\n\\n```bash\\nchoco --version\\n```\\n\\n要更新 Chocolatey，请使用：\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. 手动安装 pywin32\\n\\n由于自动安装失败，尝试手动安装 pywin32。您可以从官方 [pywin32 GitHub 发布页面](https://github.com/mhammond/pywin32/releases)下载相应版本并手动安装。\\n\\n#### 3. 修改安装脚本\\n\\n如果您可以控制 Electron Build Tools 脚本，您可以修改它以指向 pywin32 的有效 URL 或处理手动安装过程。\\n\\n#### 4. 使用替代的包管理器\\n\\n如果 Chocolatey 继续失败，考虑使用其他包管理器，例如用于 Python 包的 pip：\\n\\n```bash\\npip install pywin32\\n```\\n\\n### 手动安装 pywin32 示例\\n\\n1. 从[官方 GitHub 发布页面](https://github.com/mhammond/pywin32/releases)下载相应的 pywin32 安装程序。\\n2. 运行安装程序并按照安装说明进行操作。\\n3. 通过运行一个导入 pywin32 的简单 Python 脚本来验证安装：\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n遇到“Failed to run `choco install pywin32 --yes`”错误可能会成为您开发过程中的一个障碍。然而，通过了解根本原因并按照上述步骤操作，您可以克服此问题，继续进行 Electron 项目设置。\\n"},{"lang":"zh","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"比特币和加密货币挖矿的全定制ASIC设计秘密","date":"2022-05-30T00:00:00.000Z","categories":["半导体","比特币","加密货币","区块链"],"author":"谭帅","tags":["ASIC","比特币","挖矿","BTC"],"draft":false,"contact":"谭帅 | tanshuai@btc.com | tanshuai.com"},"content":"\\n谭帅  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 摘要\\n\\n在竞争激烈的加密货币挖矿领域，电源效率、算力性能和可靠性至关重要。本文深入探讨了顶级全定制ASIC（专用集成电路）设计，揭示了推动高性能比特币和加密货币挖矿的行业秘密和专家方法。由顶级ASIC矿机公司的一位技术专家撰写，本文利用先进的设计技术、细致的物理布局和全面的验证流程，展示了全定制ASIC在最大化挖矿效率和盈利能力方面的卓越能力。\\n\\n## 介绍\\n\\n加密货币挖矿，特别是比特币挖矿的演变，已经从使用通用的CPU、FPGA和GPU转向专用ASIC。这些ASIC提供了无与伦比的性能和能源效率。全定制ASIC设计代表了这一演变的顶峰，能够提供满足挖矿操作特定需求的定制化解决方案。\\n\\n现有的关于加密货币挖矿ASIC设计的文献大多来自学术界或非挖矿企业，往往缺乏现实应用性。目前，只有少数几家公司，主要是中国公司（如MicroBT、比特大陆），成功开发了可上市的比特币挖矿ASIC。本文旨在填补这一空白，通过实际行业实践提供见解，提供一个基于挖矿行业现实情况的视角。\\n\\n作为一名在科技行业拥有超过十年经验的专业人士，本文作者开发了世界顶级的比特币ASIC矿机（WhatsMiner）、LTC/DOGE和ETH矿机，并在MicroBT、BTC.COM等公司以及其他无晶圆厂上市公司中发挥了关键作用。他在NASDAQ、港交所和纽交所上市公司中担任重要职务，并在与台积电、德州仪器、ARM和英特尔建立合作关系方面拥有丰富经验，他为比特币和加密货币挖矿的定制ASIC设计领域带来了丰富的知识和实际专业知识。\\n\\n## 方法与设计流程\\n\\n### 设计理念\\n\\n我们的全定制ASIC设计方法注重在低电压运行条件下最大化PPA（功耗、性能和面积）。本节将介绍我们的设计理念和方法：\\n\\n1. **流水线架构**：利用流水线结构在矿机算法中的固有优势，特点是寄存器和组合逻辑阶段。通过使用流水线架构，我们可以高效处理加密货币挖矿所需的高频操作。\\n2. **手动网表与布局**：通过详细脚本创建网表和手动单元布局来优化关键路径。这使我们能够精确控制时序并减少寄生效应。\\n3. **定制单元库**：开发具有优化晶体管数量和动态省电功能的专用单元。定制单元被设计为在尽可能低的电压下运行，以确保最低的功耗。\\n\\n### 实现PPA优势\\n\\n通过定制设计实现PPA优势的详细策略：\\n\\n1. **定制寄存器设计**：利用多比特寄存器和基于锁存器的设计来减少时钟功耗并改善时序借用。多比特寄存器最小化时钟树的功耗并减少整体面积。\\n2. **手动布局**：减少线长并平衡建立和保持时间以提升整体性能。手动布局允许更好地控制互连延迟和串扰，改善信号完整性并降低功耗。\\n3. **优化单元设计**：定制单元被设计为在较低电压下运行，最小化动态功耗并最大化效率。通过针对矿机算法的具体需求量身定制单元设计，我们可以显著提高性能。\\n\\n### 低电压下的可靠性\\n\\n确保定制设计的时序逻辑在低电压下的可靠性包括：\\n\\n1. **精确仿真**：电路级仿真验证定制单元在特定条件下的行为。使用SPICE等工具进行详细的电气仿真，以确保单元在所有PVT（工艺、电压、温度）条件下正确运行。\\n2. **布局一致性**：手动布局以确保均匀性并减少变异性。通过控制物理布局，我们可以最小化工艺变异的影响并确保一致的性能。\\n3. **精确PVT校准**：针对工艺、电压和温度变异的验证。进行广泛的测试和校准，以确保设计在不同工作条件下的稳健性。\\n\\n## 案例研究和结果\\n\\n展示来自全掩模流片的真实数据和案例研究：\\n\\n| 项目  | 工艺节点 | 电压/功率效率         | 算法      |\\n| ----- | -------- | -------------------- | --------- |\\n| SC    | TSMC 28nm | 0.45V, 257J/T         | Blake2b   |\\n| DCR   | TSMC 28nm | 0.45V, 150J/T         | Blake256  |\\n| DASH  | TSMC 16nm | 0.38V, 6.2J/G         | X11       |\\n| BTC   | TSMC 16nm | 0.38V, 65J/T          | SHA-256d  |\\n| BTC   | TSMC 7nm  | 0.30V, 37J/T          | SHA-256d  |\\n| BTC   | Samsung 8nm | 0.31V, 45J/T         | SHA-256d  |\\n| BTC   | SMIC N+1 | 0.30V, 35J/T          | SHA-256d  |\\n\\n这些结果展示了通过我们定制设计方法实现的效率和性能的大幅提升。\\n\\n## 集成和验证\\n\\n### 混合单元签核\\n\\n- **定制单元的集成**：定制单元与来自TSMC和其他晶圆厂的标准单元集成，确保兼容性和性能。定制单元经过表征和验证以匹配标准单元库的要求，从而实现无缝集成。\\n- **签核策略**：确保无缝兼容性和性能的策略包括详细的DRC（设计规则检查）和LVS（版图与原理图对比）检查，以及使用行业标准EDA（电子设计自动化）工具进行时序和功率分析。\\n\\n### 数字与模拟协同设计\\n\\n- **集成技术**：集成数字和模拟组件以优化整体芯片性能。采用混合信号验证和协同仿真等技术确保正确的集成和功能。\\n- **验证方法**：确保在不同操作条件下的鲁棒性的方法包括角落分析、蒙特卡洛模拟和可靠性验证，以解决老化和电迁移问题。\\n\\n## 结论\\n\\n全定制ASIC设计为比特币和加密货币挖矿提供了显著的优势，提供了无与伦比的性能、功率效率和可靠性。通过揭示顶级定制ASIC设计的秘密，本文强调了使行业领袖脱颖而出的方法和创新。随着加密货币挖矿的不断发展，定制ASIC将在推动下一代高效、高性能挖矿硬件中发挥关键作用。\\n\\n[论文的 PDF 版本](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"zh","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"获取当前Git提交ID并更新到package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["软件开发"]},"content":"\\n在开发 Node.js 项目时，您可能希望跟踪 Git 仓库的当前提交 ID。此信息对于调试、版本控制或部署目的可能很有用。实现这一目标的一种方法是在构建过程中将当前提交 ID 更新到 `package.json` 文件中。本文将指导您完成获取 Git 当前提交 ID 并使用 Node.js 将其更新到 `package.json` 文件的步骤。\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"zh","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"将 GitHub LFS（Git 大文件存储）存储库迁移到 AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["软件开发"]},"content":"\\n我最近将一个使用 Git Large File Storage (LFS) 的 GitHub 仓库迁移到了 AWS CodeCommit。我想分享这个过程，以防你也有类似的需求。以下是根据我的经验制作的逐步指南。\\n\\n## 先决条件\\n\\n在开始之前，请确保你已经安装了以下工具：\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## 逐步指南\\n\\n### 1. 克隆仓库\\n\\n首先，使用 `--mirror` 选项克隆你的 GitHub 仓库。这会创建一个仓库的裸克隆，包括所有分支和标签。\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. 验证 LFS 文件\\n\\n接下来，列出所有由 Git LFS 管理的文件，以确保一切就绪。\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n你应该会看到类似如下的内容：\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. 迁移 LFS 文件\\n\\n现在，导出 LFS 文件。这一步确保它们成为你仓库历史的一部分。\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n你会看到一些进度消息，如下所示：\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. 清理 LFS\\n\\n删除 Git LFS 跟踪信息并卸载 Git LFS。\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. 推送到 AWS CodeCommit\\n\\n最后，将你的仓库推送到 AWS CodeCommit。\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n就是这样！通过遵循这些步骤，我成功地将我的 GitHub LFS 仓库迁移到了 AWS CodeCommit。大文件和仓库历史都得到了完美的保留。\\n\\n## 总结\\n\\n如果你按照正确的步骤操作，将使用 Git LFS 的 GitHub 仓库迁移到 AWS CodeCommit 是相当简单的。如果你有任何问题或遇到问题，[AWS CodeCommit 文档](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)和[Git LFS 文档](https://git-lfs.github.com/)是很好的资源。\\n\\n希望本指南对您有所帮助。编码愉快！\\n"},{"lang":"zh","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"重置/恢复 Git 的所有子目录","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"谭帅","tags":["Git","版本控制"],"categories":["软件开发"]},"content":"\\n有效管理Git代码库通常需要重置或恢复子目录，以保持代码库的整洁和功能正常。本指南提供了一个简明的分步方法，用于重置或恢复Git代码库中的所有子目录。\\n\\n## 重置子目录\\n\\n以下Git命令会从代码库中移除所有未跟踪的文件和目录。这在执行重置或恢复之前清理不必要的文件时非常有用。\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### 命令分解：\\n\\n- `-x`：移除所有未跟踪的文件，包括`.gitignore`忽略的文件。\\n- `-f`：强制移除文件。\\n- `-d`：移除未跟踪的目录。\\n- `-- .`：将命令应用于当前目录及所有子目录。\\n\\n## 恢复子目录\\n\\n要将代码库中的所有文件恢复到最后一次提交的状态，请使用以下命令：\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### 命令分解：\\n\\n- `{HEAD OR BRANCH}`：用`HEAD`替换以重置到最新提交，或指定分支名称以重置到特定分支。\\n- `-- .`：将命令应用于当前目录及所有子目录。\\n\\n通过使用这些命令，您可以确保代码库中没有不需要的文件，并且所有文件都恢复到提交的状态。这个过程有助于保持代码库的整洁和组织良好，从而促进更容易的协作和开发。\\n\\n根据您的具体需求和偏好，自由定制本指南。有关更高级的Git操作，请参阅[官方Git文档](https://git-scm.com/doc)。\\n"},{"lang":"zh","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"超低成本的DDR3、DDR4、LP-DDR3和LP-DDR4内存测试系统","description":"探索超低成本的DDR3、DDR4、LP-DDR3和LP-DDR4内存测试系统。价格约为20万美元，提供高速测试、多功能、先进特性和低功耗。非常适合寻求成本效益高且可靠的内存测试解决方案的企业。","date":"2024-06-01T00:00:00.000Z","categories":["半导体"],"author":"谭帅","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","内存测试系统"],"draft":false},"content":"\\n如果你像我一样，总是寻求在不牺牲质量的情况下找到经济高效的解决方案，那么你一定会喜欢我今天要分享的内容。在我们这个快节奏的科技世界里，确保设备的内存达到标准是至关重要的。像T5503/T5503HS2这样的高端选择非常出色，但价格昂贵。幸运的是，Zeeis推出了一款超低成本的内存测试系统，而且性能毫不逊色。\\n\\n## 重要性\\n\\n当我第一次了解Zeeis的内存测试系统时，我很感兴趣。该系统设计用于处理DDR3、DDR4、LP-DDR3和LP-DDR4内存技术。无论你是使用旧系统还是最新技术，这个系统都能满足你的需求。\\n\\n### 高速测试\\n\\n其中一个突出特点是它支持800到3200 MT/s的数据传输率，适用于DDR3和DDR4。它可以在高达1600 MHz的时钟速度下评估内存模块。这意味着可以进行全面而可靠的测试，确保你的设备性能最佳。\\n\\n### 多功能性\\n\\n这个系统的多功能性是一个改变游戏规则的优势。它支持多种内存标准，适用于从消费电子到高性能计算的广泛应用。而且，它具有前瞻性。随着新内存技术的出现，该系统可以轻松升级以支持这些技术。\\n\\n### 成本效益\\n\\n现在，让我们谈谈价格。大约20万美元，这个系统提供了极佳的投资回报率。它对中小型企业来说足够经济实惠，确保了顶级测试能力而不会导致破产。\\n\\n### 高级功能\\n\\n该系统配备了先进的测试算法，包括集成的算法模式生成器（ALPG）。这确保了内存评估的准确性和可靠性，使每个模块都能达到严格的性能标准。\\n\\n### 低功耗\\n\\n同样令人印象深刻的是它的低功耗。这与LP-DDR3和LP-DDR4内存技术的趋势一致。通过在较低电压下运行，它不仅降低了能源成本，还减少了热量输出，是一种环保选择。\\n\\n## 为什么选择 Zeeis？\\n\\n### 可扩展性\\n\\nZeeis 的系统在设计时考虑到了可扩展性。随着新内存技术的出现，该系统可以轻松升级，确保长期使用并减少频繁更换的需求。\\n\\n### 支持和文档\\n\\n另一个重要优点是 Zeeis 的广泛支持和文档。无论你是经验丰富的专业人士还是内存测试的新手，他们详细的指南和响应迅速的客户服务都能确保你有一个顺利的体验。\\n\\n### 满足市场需求\\n\\n随着从智能手机到数据中心的各个领域对高速内存需求的增长，拥有可靠且成本效益高的内存测试解决方案变得至关重要。Zeeis 的系统满足了这些需求，确保你的产品在实际应用中能够完美运行并达到市场标准。\\n\\n## 结论\\n\\n简而言之，Zeeis 的超低成本 DDR3、DDR4、LP-DDR3 和 LP-DDR4 内存测试系统是那些需要可靠、多功能且经济实惠的内存测试解决方案的理想选择。它以其他高端系统的一小部分成本提供高性能，使公司能够在保持高标准的同时不超出预算。\\n\\n如果你有兴趣通过一个为未来内存技术设计的系统来增强你的测试能力，请随时通过 [i@tanshuai.com](mailto:i@tanshuai.com) 联系我以获取更多信息。\\n\\n祝你测试愉快！\\n"},{"lang":"zh","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo 必须由 uid 0 拥有并在 Ubuntu 20.04 上设置 setuid 位","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"谭帅","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\n如果您在 Ubuntu 20.04 上遇到错误信息“/usr/bin/sudo 必须由 uid 0 拥有并设置 setuid 位”，请按照以下步骤解决问题。\\n\\n1. 在启动过程中，按下“ESC”键进入 GRUB 菜单。\\n\\n![GRUB 屏幕](/images/content/wx20211008-210752.png \\"GRUB 屏幕\\")\\n\\n2. 选择第一个选项“Ubuntu”，然后按“e”键编辑启动参数。\\n\\n![编辑启动参数](/images/content/wx20211008-210841.png \\"编辑启动参数\\")\\n\\n3. 在以“linux”开头的行末尾添加以下字符串，以进入救援模式：\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. 进入救援模式后，执行以下命令以恢复 `/usr/bin/sudo` 的正确权限和所有权：\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\n此命令设置必要的权限，并确保 `sudo` 由 root 用户拥有且设置了 setuid 位。\\n\\n通过按照这些步骤操作，您应该能够解决问题并恢复 `sudo` 命令在 Ubuntu 系统上的正常功能。\\n\\n---\\n"},{"lang":"ja","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： GitHub Large File Storage (Git LFS)の無料代替案","description":"AWS CodeCommitがGitHubのLarge File Storage (Git LFS)に代わるコスト効率の高い効果的な代替手段であることを発見してください。この記事では、Git LFSの制限、AWS CodeCommitを大容量ファイルストレージとして使用する利点、そしてGit LFSからCodeCommitへの移行手順をステップバイステップで解説します。AWSのスケーラブルで安全なインフラストラクチャで開発ワークフローを向上させましょう。","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["ソフトウェア開発"],"draft":false},"content":"\\nAWS CodeCommitは、GitHubのLarge File Storage（Git LFS）サービスに代わる強力な選択肢を提供し、Gitリポジトリ内の大容量ファイル管理に効率的なソリューションを提供します。\\n\\n## Git LFSの使用を再考すべき理由\\n\\nGit LFSは、Gitリポジトリ内の大容量ファイルを扱うための一般的な選択肢ですが、いくつかの制限と課題があります。Git LFSは追加のセットアップと管理を必要とし、開発ワークフローを複雑にする可能性があります。さらに、Git LFSに関連するストレージと帯域幅のコストは、多くの大容量ファイルや広範なコラボレーションを含むプロジェクトでは急速に増加する可能性があります。\\n\\n## GitHubのLarge File Storageサービスが完璧ではない理由\\n\\nGitHubのLarge File Storageサービスは便利ですが、固有の欠点があります。主な問題は、ストレージと帯域幅に関連するコストであり、大規模なプロジェクトには高額になる可能性があります。さらに、Git LFSの管理は煩雑で、開発者はLFSクライアントのインストールと設定、特定のファイルの追跡、リポジトリの他の部分と分離された大容量ファイルの取り扱いによるマージコンフリクトの処理を行う必要があります。\\n\\n## Gitで大容量ファイルを保存するためにAWS CodeCommitを使用する理由\\n\\nAWS CodeCommitは、Git LFSの必要なしにGitリポジトリ内で大容量ファイルを保存するための魅力的な選択肢を提供します。CodeCommitは、他のAWSサービスとシームレスに統合されるフルマネージドのソース管理サービスであり、堅牢なスケーラビリティ、セキュリティ、およびコスト効率を提供します。CodeCommitを活用することで、開発者はGit LFSの管理の追加オーバーヘッドを回避しながら、AWSの強力なインフラストラクチャと従量課金モデルの利点を享受できます。\\n\\n## GitHubと比較したAWS CodeCommitの制限\\n\\nその利点にもかかわらず、AWS CodeCommitはGitHubと比較していくつかの制限があります。GitHubの広範なコミュニティサポート、豊富な統合エコシステム、およびGitHub ActionsやGitHub Pagesのような高度な機能は、CodeCommitでは完全に再現されない場合があります。さらに、GitHubのユーザーインターフェースやコラボレーションツールに慣れている開発者にとって、CodeCommitへの移行にはある程度の調整が必要です。\\n\\n## Git LFS リポジトリを CodeCommit に移行する方法\\n\\nGit LFS リポジトリを CodeCommit に移行するには、いくつかのステップが必要です。まず、すべての大きなファイルが Git LFS リポジトリで正しく追跡されていることを確認します。次に、リポジトリをクローンし、Git LFS の追跡設定を削除します。その後、AWS CodeCommit に新しいリポジトリを作成し、ローカルリポジトリをプッシュします。このプロセスを円滑に進めるための詳細なドキュメントとスクリプトが用意されており、データの損失や中断を避けることができます。\\n\\n## より良い解決策\\n\\nGit LFS に大きく依存しているチームやプロジェクトにとって、AWS CodeCommit を代替として検討することは大きな利点をもたらします。CodeCommit は AWS エコシステムとシームレスに統合されており、コスト効果が高くスケーラブルな性質を持つため、Git リポジトリ内の大きなファイルを管理するための魅力的なオプションとなります。Git LFS に関連する課題を軽減することで、CodeCommit は開発チームがコーディングとコラボレーションに集中できるようにし、生産性とイノベーションを促進します。\\n\\n結論として、AWS CodeCommit は GitHub の Large File Storage サービスに対する実行可能でコスト効果が高く効率的な代替手段を提供します。AWS の堅牢なインフラを活用することで、開発者は Git リポジトリ内の大きなファイルを容易に管理し、ワークフローを最適化し、オーバーヘッドを削減することができます。\\n"},{"lang":"ja","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"MacOSでの電圧と電流の確認方法（電源アダプター用）","meta_title":"MacOSでの電圧と電流の確認方法（電源アダプター用）","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","電源アダプター","電圧","電流"],"categories":["MacOS"],"draft":false},"content":"\\nMacBookを使用しているとき、電源アダプタの電圧と電流を確認したいことがあるかもしれません。ここでは、MacOSで電源アダプタの電圧と電流を確認する簡単な方法を紹介します。\\n\\nTerminal.appを開き、次のコマンドを入力します：\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\n次のような電流と電圧の情報が得られます：\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"ja","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"macOSでMarkdownを学術論文スタイルのPDFに素早く変換する","meta_title":"Pandocを使ってmacOSでMarkdownを学術論文スタイルのPDFに変換","description":"PandocとBasicTeXを使用して、macOSでMarkdown文書を学術論文スタイルのPDFに変換する方法を学びます。この簡単で迅速な方法は、学術論文用のプロフェッショナルなPDFファイルを作成するのに最適です。","date":"2022-03-03T00:00:00.000Z","categories":["ソフトウェア開発"],"author":"タン・シュアイ","tags":["Pandoc","LaTeX","PDF","論文","Markdown","macOS"],"draft":false},"content":"\\nこのガイドでは、macOSでPandocとBasicTeXを使用してMarkdownドキュメントを学術スタイルのPDFに変換する方法をご紹介します。この方法は迅速かつ簡単で、学術論文用のプロフェッショナルなPDFファイルを作成するのに最適です。\\n\\n### ステップ1: PandocとBasicTeXのインストール\\n\\nまず、macOSシステムにPandocとBasicTeXをインストールする必要があります。私が行った手順は次のとおりです。\\n\\n1. **Pandocのインストール**: ターミナルを開き、次のコマンドを入力してPandocをインストールします：\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **BasicTeXのインストール**: MacTeXは非常に大きいので、スペースを節約するためにより小さなBasicTeXパッケージを選びました。次のコマンドを実行します：\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **一般的なLaTeXパッケージのインストール**: PDFを生成するために必要なパッケージを確実に揃えるため、次のコマンドを実行します：\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### ステップ2: Markdownファイルの準備\\n\\n次に、Markdownファイル（例：`paper.md`）を作成します。ここでは、タイトル、著者、日付、連絡先情報を含むファイルの設定方法を示します：\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### ステップ3: Pandocを使ってMarkdownをPDFに変換\\n\\n次に、MarkdownファイルをPDFに変換します。私はターミナルで次のコマンドを使用しました：\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nこのコマンドはPandocのデフォルトのLaTeXテンプレートを使用してMarkdownファイルを学術スタイルのPDFに変換し、著者の連絡先情報を名前の下に含めます。\\n\\n### 追加のヒント\\n\\n- **カスタムLaTeXテンプレート**: より高度なフォーマットや特定のスタイルが必要な場合は、カスタムLaTeXテンプレートを作成またはダウンロードしてPandocと一緒に使用できます：\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **追加のメタデータ**: YAMLメタデータヘッダーに要約やキーワードなどの追加情報を記載し、カスタムテンプレートで使用できます。\\n\\n### 結論\\n\\nこれらの手順に従うことで、macOSでMarkdownドキュメントを簡単に学術スタイルのPDFに変換できます。PandocとBasicTeXを使用すると、このプロセスは迅速かつ効率的になり、プロフェッショナルなPDFドキュメントを生成するのに最適です。学術論文、技術報告書、その他の正式なドキュメントの準備に、この方法は非常に有効です。メタデータヘッダーに連絡先情報を含めることで、ドキュメントにプロフェッショナルな印象を与えることができます。\\n\\nこのガイドが役に立つことを願っています！質問がある場合や問題が発生した場合は、遠慮なくお問い合わせください。楽しい執筆を！\\n"},{"lang":"ja","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `エラー Error： Failed to run \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Software Development"]},"content":"\\nElectron Build Toolsを使用している際に、Chocolatey経由でpywin32をインストールする際のエラーに遭遇することがあります。これは特にプロジェクトに必要な依存関係である場合、非常に苛立たしいものです。以下に、その問題と解決策の詳細を説明します。\\n\\n### エラーの詳細\\n\\nElectron Build Toolsを使用してElectronプロジェクトを初期化する際、次のようなエラーメッセージが表示されることがあります：\\n\\n```bash\\nE:\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nこのエラーは通常、pywin32パッケージのインストールスクリプトがリモートサーバー上の必要なファイルを見つけられないために発生します。これにより、指定されたURLでファイルが利用できないことを示す404エラーが発生します。\\n\\n### エラーの理解\\n\\nエラーメッセージの重要な部分は次のとおりです：\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\nこのことは、pywin32のダウンロードURLが無効になっていることを示しており、Chocolateyが必要なインストールファイルを取得できないことを意味します。\\n\\n### トラブルシューティングの手順\\n\\nこの問題を解決するために取るべきいくつかの手順を以下に示します：\\n\\n#### 1. Chocolateyのインストールを確認\\n\\nChocolateyが正しくインストールされ、最新バージョンに更新されていることを確認してください。Chocolateyのバージョンを確認するには、以下を使用します：\\n\\n```bash\\nchoco --version\\n```\\n\\nChocolateyを更新するには、以下を使用します：\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. pywin32を手動でインストール\\n\\n自動インストールが失敗しているため、pywin32を手動でインストールしてみてください。適切なバージョンを公式の[pywin32 GitHubリリースページ](https://github.com/mhammond/pywin32/releases)からダウンロードし、手動でインストールしてください。\\n\\n#### 3. インストールスクリプトを修正\\n\\nElectron Build Toolsスクリプトを制御できる場合は、pywin32の有効なURLを指すように修正するか、手動インストールプロセスを処理するようにスクリプトを修正できます。\\n\\n#### 4. 代替パッケージマネージャーを使用\\n\\nChocolateyが引き続き失敗する場合、Pythonパッケージの代替パッケージマネージャーであるpipを使用することを検討してください：\\n\\n```bash\\npip install pywin32\\n```\\n\\n### pywin32を手動でインストールする例\\n\\n1. [公式GitHubリリース](https://github.com/mhammond/pywin32/releases)から適切なpywin32インストーラーをダウンロードします。\\n2. インストーラーを実行し、インストール手順に従います。\\n3. 簡単なPythonスクリプトを実行して、pywin32のインストールを確認します：\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\n「`choco install pywin32 --yes`を実行できませんでした」というエラーに遭遇すると、開発プロセスが妨げられることがあります。しかし、根本的な原因を理解し、上記の手順に従うことで、この問題を克服し、Electronプロジェクトのセットアップを続けることができます。\\n"},{"lang":"ja","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"ビットコインと暗号通貨マイニングのためのフルカスタムASIC設計の秘密","date":"2022-05-30T00:00:00.000Z","categories":["半導体","ビットコイン","暗号通貨","ブロックチェーン"],"author":"タン・シュアイ","tags":["ASIC","ビットコイン","マイニング","BTC"],"draft":false,"contact":"タン・シュアイ | tanshuai@btc.com | tanshuai.com"},"content":"\\nタン・シュアイ  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## 概要\\n\\n仮想通貨マイニングの競争激しい世界では、電力効率、ハッシュレート性能、信頼性が非常に重要です。本稿では、トップクラスのフルカスタムASIC（特定用途向け集積回路）設計について、業界の秘密と専門的な手法を明らかにします。この論文は、トップASICマイナー企業の技術専門家によって書かれており、高性能なビットコインや仮想通貨マイニングを支えるための高度な設計技術、詳細な物理レイアウト、および包括的な検証プロセスを駆使して、フルカスタムASICの卓越した能力を最大限に引き出す方法を紹介しています。\\n\\n## はじめに\\n\\n仮想通貨マイニング、特にビットコインマイニングの進化は、汎用CPU、FPGA、およびGPUから、専用のASICへとシフトしてきました。これらのASICは、比類のない性能とエネルギー効率を提供します。フルカスタムASIC設計はこの進化の頂点を示し、マイニングオペレーションの特定の要求に応じたカスタマイズされたソリューションを可能にします。\\n\\n仮想通貨マイニング向けASIC設計に関する既存の文献の多くは、学界や非マイニング企業から出されており、実際の適用性に欠けることが多いです。これまでのところ、主に中国（例：MicroBT、Bitmain）を中心に、数社のみが市場性のあるビットコインマイニングASICを成功裏に開発してきました。本稿は、実際の業界の実践から得られた洞察を提供し、マイニングセクターの現実に基づいた視点を提供することを目的としています。\\n\\n技術業界で10年以上の経験を持つ著者は、世界最高のビットコインASICマイナー（WhatsMiner）、LTC/DOGEおよびETHマイナーを開発し、MicroBT、BTC.COM、その他のパブリックファブレス企業で重要な役割を果たしてきました。著者は、NASDAQ、HKSE、およびNYSEに上場している企業で要職を歴任し、TSMC、テキサス・インスツルメンツ、ARM、インテルとのパートナーシップを確立する豊富な経験を持ち、ビットコインおよび仮想通貨マイニング向けのカスタムASIC設計の分野に豊富な知識と実践的な専門知識をもたらします。\\n\\n## 手法と設計フロー\\n\\n### 設計理念\\n\\n我々のフルカスタムASIC設計へのアプローチは、特に低電圧動作条件下でPPA（Power, Performance, and Area）を最大化することに重点を置いています。このセクションでは、我々の設計理念と手法について説明します。\\n\\n1. **パイプラインアーキテクチャ**: パイプライン構造の持つ特性を活かしたマイニングアルゴリズムに最適な設計。レジスタと組み合わせ論理段階により構成されるパイプラインアーキテクチャを使用することで、暗号通貨マイニングに必要な高周波動作を効率的に処理します。\\n2. **手動ネットリストと配置**: クリティカルパスの最適化のための詳細なスクリプトによるネットリスト作成と手動セル配置。これにより、タイミングの精密な制御が可能になり、寄生効果を減少させます。\\n3. **カスタムセルライブラリ**: トランジスタ数を最適化し、動的省電力機能を備えた特別なセルの開発。カスタムセルは可能な限り低い電圧で動作するよう設計されており、電力消費を最小限に抑えます。\\n\\n### PPAのメリットを達成するために\\n\\nカスタム設計によるPPAのメリットを達成するための詳細な戦略：\\n\\n1. **カスタムレジスタ設計**: クロックパワーを削減し、タイミング借用を改善するためのマルチビットレジスタとラッチベースの設計。マルチビットレジスタはクロックツリーの電力消費を最小限に抑え、全体の面積を削減します。\\n2. **手動配置**: 配線長を短縮し、セットアップタイムとホールドタイムのバランスを取り、全体のパフォーマンスを向上。手動配置により、相互接続遅延やクロストークをより良く制御し、信号の整合性を向上させ、電力消費を削減します。\\n3. **最適化されたセル設計**: カスタムセルは低電圧で動作するよう設計され、動的電力消費を最小限に抑え、効率を最大化します。セル設計をマイニングアルゴリズムの特定のニーズに合わせることで、パフォーマンスの大幅な向上を実現します。\\n\\n### 低電圧での信頼性\\n\\n低電圧でカスタム設計されたタイミングロジックの信頼性を確保するためには：\\n\\n1. **正確なシミュレーション**: 特定の条件下でカスタムセルの動作を検証するための回路レベルシミュレーション。SPICEなどのツールを使用して詳細な電気シミュレーションを行い、すべてのPVT（プロセス、電圧、温度）コーナーでセルが正しく動作することを確認します。\\n2. **一貫性のある配置**: 均一性を確保し、変動性を減少させるための手動配置。物理レイアウトを制御することで、プロセス変動の影響を最小限に抑え、一貫したパフォーマンスを確保します。\\n3. **正確なPVTキャリブレーション**: プロセス、電圧、温度の変動に対する検証。異なる動作条件下での設計の堅牢性を確保するために、広範なテストとキャリブレーションを実施します。\\n\\n## ケーススタディと結果\\n\\nフルマスクテープアウトの実例データとケーススタディを紹介します：\\n\\n| プロジェクト | プロセスノード | 電圧/電力効率 | アルゴリズム |\\n| ----------- | ------------- | ------------- | ------------ |\\n| SC          | TSMC 28nm     | 0.45V, 257J/T | Blake2b      |\\n| DCR         | TSMC 28nm     | 0.45V, 150J/T | Blake256     |\\n| DASH        | TSMC 16nm     | 0.38V, 6.2J/G | X11          |\\n| BTC         | TSMC 16nm     | 0.38V, 65J/T  | SHA-256d     |\\n| BTC         | TSMC 7nm      | 0.30V, 37J/T  | SHA-256d     |\\n| BTC         | Samsung 8nm   | 0.31V, 45J/T  | SHA-256d     |\\n| BTC         | SMIC N+1      | 0.30V, 35J/T  | SHA-256d     |\\n\\nこれらの結果は、私たちのカスタム設計アプローチによって達成可能な効率と性能の大幅な向上を示しています。\\n\\n## 統合と検証\\n\\n### ミックスセルサインオフ\\n\\n- **カスタムセルの統合**: カスタムセルは、TSMCや他のファウンドリからの標準セルと統合され、互換性と性能を確保します。カスタムセルは標準セルライブラリの要件に一致するように特性評価と検証が行われ、シームレスな統合が可能です。\\n- **サインオフ戦略**: シームレスな互換性と性能を確保するための戦略には、詳細なDRC（設計規則チェック）およびLVS（レイアウトと回路図の一致チェック）、および業界標準のEDA（電子設計自動化）ツールを使用したタイミングおよび電力解析が含まれます。\\n\\n### デジタルとアナログの共同設計\\n\\n- **統合技術**: 全体のチップ性能を最適化するためにデジタルおよびアナログコンポーネントを統合します。適切な統合と機能を確保するために、ミックスシグナル検証および共同シミュレーションなどの技術が使用されます。\\n- **検証手法**: 異なる動作条件での堅牢性を確保するための手法には、コーナー分析、モンテカルロシミュレーション、およびエージングや電気移動に対処するための信頼性検証が含まれます。\\n\\n## 結論\\n\\nフルカスタムASIC設計は、ビットコインおよび暗号通貨のマイニングにおいて、比類のない性能、電力効率、および信頼性を提供します。本稿では、トップクラスのカスタムASIC設計の秘密を明らかにし、業界のリーダーを際立たせる手法と革新を強調しています。暗号通貨のマイニングが進化を続ける中で、カスタムASICは高効率・高性能の次世代マイニングハードウェアを推進する上で重要な役割を果たすでしょう。\\n\\n論文の[PDF版](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"ja","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Gitの現在のコミットIDを取得してpackage.jsonに更新する","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["ソフトウェア開発"]},"content":"\\nNode.jsプロジェクトを開発する際に、Gitリポジトリの現在のコミットIDを追跡したい場合があります。この情報は、デバッグ、バージョニング、またはデプロイメントの目的で役立つことがあります。これを実現する一つの方法は、ビルドプロセス中に`package.json`ファイルを現在のコミットIDで更新することです。この記事では、Gitの現在のコミットIDを取得し、それをNode.jsを使用して`package.json`ファイルに更新する手順を説明します。\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"ja","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"GitHub LFS (Git Large File Storage) リポジトリを AWS CodeCommit に移行する","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["ソフトウェア開発"]},"content":"\\n最近、Git Large File Storage (LFS) を使用している GitHub リポジトリの一つを AWS CodeCommit に移行しました。同じことを考えている方のために、その手順を共有したいと思います。以下は私の経験に基づいたステップバイステップガイドです。\\n\\n## 前提条件\\n\\n始める前に、以下のツールがインストールされていることを確認してください：\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## ステップバイステップガイド\\n\\n### 1. リポジトリをクローン\\n\\nまず、`--mirror` オプションを使用して GitHub リポジトリをクローンします。これにより、すべてのブランチとタグを含むベアクローンが作成されます。\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. LFSファイルを確認\\n\\n次に、Git LFS で管理されているすべてのファイルをリスト表示し、すべてが揃っていることを確認します。\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\n以下のような出力が見られるはずです：\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. LFSファイルを移行\\n\\n次に、LFSファイルをエクスポートします。このステップにより、これらのファイルがリポジトリの履歴の一部として保存されます。\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\n以下のような進行状況メッセージが表示されます：\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. LFSをクリーンアップ\\n\\nGit LFS の追跡情報を削除し、Git LFS をアンインストールします。\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. AWS CodeCommit にプッシュ\\n\\n最後に、リポジトリを AWS CodeCommit にプッシュします。\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nこれで完了です！これらの手順に従うことで、GitHub LFS リポジトリを AWS CodeCommit に無事に移行することができました。大きなファイルとリポジトリの履歴も完璧に保存されました。\\n\\n## まとめ\\n\\nGit LFS を使用している GitHub リポジトリを AWS CodeCommit に移行するのは、適切な手順に従えば非常に簡単です。質問や問題がある場合は、[AWS CodeCommit ドキュメント](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) や [Git LFS ドキュメント](https://git-lfs.github.com/) を参照すると良いでしょう。\\n\\nこのガイドがお役に立てれば幸いです。楽しいコーディングを！\\n"},{"lang":"ja","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Gitの全てのサブディレクトリをリセット/復元する","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","バージョン管理"],"categories":["ソフトウェア開発"]},"content":"\\nGit リポジトリを効果的に管理するためには、サブディレクトリをリセットまたは復元して、クリーンで機能的なコードベースを維持する必要があります。このガイドでは、Git リポジトリ内のすべてのサブディレクトリをリセットまたは復元するための簡潔で段階的なアプローチを提供します。\\n\\n## サブディレクトリのリセット\\n\\n次の Git コマンドは、リポジトリからすべての追跡されていないファイルとディレクトリを削除します。これは、リセットまたは復元を行う前に不要なファイルをクリーンアップするのに役立ちます。\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### コマンドの内訳:\\n\\n- `-x`: `.gitignore` によって無視されているファイルを含む、すべての追跡されていないファイルを削除します。\\n- `-f`: ファイルの削除を強制します。\\n- `-d`: 追跡されていないディレクトリを削除します。\\n- `-- .`: 現在のディレクトリおよびすべてのサブディレクトリに対してコマンドを適用します。\\n\\n## サブディレクトリの復元\\n\\nリポジトリ内のすべてのファイルを最後にコミットされた状態に復元するには、次のコマンドを使用します。\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### コマンドの内訳:\\n\\n- `{HEAD OR BRANCH}`: 最新のコミットにリセットするには `HEAD` を使用するか、特定のブランチにリセットするにはブランチ名を指定します。\\n- `-- .`: 現在のディレクトリおよびすべてのサブディレクトリに対してコマンドを適用します。\\n\\nこれらのコマンドを使用することで、リポジトリを不要なファイルから解放し、すべてのファイルをコミットされた状態に復元できます。このプロセスは、クリーンで整理されたコードベースを維持し、より容易なコラボレーションと開発を促進します。\\n\\nこのガイドを特定のニーズや好みに応じてカスタマイズしてください。より高度な Git 操作については、[公式 Git ドキュメント](https://git-scm.com/doc)を参照してください。\\n"},{"lang":"ja","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"超低コストDDR3、DDR4、LP-DDR3＆LP-DDR4メモリテストシステム","description":"DDR3、DDR4、LP-DDR3、LP-DDR4技術のための超低コストメモリテストシステムをご紹介します。約20万ドルで、高速テスト、多用途、高度な機能、低消費電力を提供します。コスト効率が高く信頼性のあるメモリテストソリューションを求める企業に最適です。","date":"2024-06-01T00:00:00.000Z","categories":["半導体"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","メモリテストシステム"],"draft":false},"content":"\\nあなたが私のように、品質を犠牲にすることなくコスト効率の高い解決策を常に探しているなら、今日共有する内容を気に入るでしょう。急速に進化するテクノロジーの世界では、デバイスのメモリが十分であることを確保することが重要です。T5503/T5503HS2のような高級オプションは素晴らしいですが、高価です。幸いなことに、Zeeisはパフォーマンスを犠牲にせずに超低コストのメモリテストシステムを提供しています。\\n\\n## これが重要な理由\\n\\nZeeisのメモリテストシステムについて初めて知ったとき、私は興味を持ちました。このシステムはDDR3、DDR4、LP-DDR3、LP-DDR4のメモリ技術に対応するように設計されています。古いシステムから最新のテクノロジーまで、このシステムはすべてをカバーしています。\\n\\n### 高速テスト\\n\\n注目すべき特徴の一つは、DDR3およびDDR4の両方で800から3200 MT/sのデータ転送速度をサポートする能力です。また、メモリモジュールを最大1600 MHzのクロック速度で評価することができます。これにより、徹底的で信頼性の高いテストが可能となり、デバイスが最高のパフォーマンスを発揮することが保証されます。\\n\\n### 多用途性\\n\\nこのシステムの多用途性は画期的です。複数のメモリ標準に対応しているため、家電製品から高性能コンピューティングまで幅広い用途に適しています。さらに、将来にわたって新しいメモリ技術が登場しても、このシステムは簡単にアップグレードできるので安心です。\\n\\n### コスト効率\\n\\nさて、価格について話しましょう。約200,000ドルで、このシステムは優れた投資回収率を提供します。中小企業にとっても手頃な価格で、トップクラスのテスト機能を提供しながらも予算を超えません。\\n\\n### 高度な機能\\n\\nこのシステムには、統合されたアルゴリズムパターンジェネレータ（ALPG）を含む高度なテストアルゴリズムが搭載されています。これにより、各モジュールが厳しいパフォーマンス基準を満たすことが保証され、正確で信頼性の高いメモリ評価が実現します。\\n\\n### 低消費電力\\n\\nさらに印象的なのは、低消費電力です。これはLP-DDR3およびLP-DDR4メモリ技術で見られる傾向と一致しています。低電圧で動作することにより、エネルギーコストを削減するだけでなく、熱出力を最小限に抑えるため、環境に優しい選択肢となります。\\n\\n## なぜZeeisを選ぶのか？\\n\\n### スケーラビリティ\\n\\nZeeisのシステムはスケーラビリティを念頭に設計されています。新しいメモリ技術が登場するたびに、システムを簡単にアップグレードできるため、長期間の使用が可能であり、頻繁な交換の必要が減少します。\\n\\n### サポートとドキュメント\\n\\nZeeisのもう一つの大きな利点は、充実したサポートとドキュメントです。メモリテストのプロフェッショナルであれ初心者であれ、詳細なガイドと迅速なカスタマーサービスにより、スムーズな体験が保証されます。\\n\\n### 市場の需要に応える\\n\\nスマートフォンからデータセンターに至るまで、高速メモリの需要が高まる中、信頼性が高くコスト効果の高いメモリテストソリューションは不可欠です。Zeeisのシステムはこれらの要求を満たし、市場投入の際に製品が確実に実世界で問題なく動作するようにします。\\n\\n## 結論\\n\\n要するに、Zeeisの超低コストDDR3、DDR4、LP-DDR3 & LP-DDR4メモリテストシステムは、信頼性が高く多用途で手頃な価格のメモリテストソリューションを必要とする方々にとって、素晴らしい選択肢です。他の高級システムの一部のコストで高性能を提供し、企業が高い基準を維持しつつコストを抑えることを可能にします。\\n\\n未来のメモリ技術に対応したシステムでテスト能力を向上させたい方は、どうぞお気軽に[i@tanshuai.com](mailto:i@tanshuai.com)までご連絡ください。\\n\\n良いテストを！\\n"},{"lang":"ja","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo は UID 0 の所有であり、Ubuntu 20.04 で setuid ビットが設定されている必要があります","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nUbuntu 20.04で「/usr/bin/sudo は uid 0 の所有であり、setuid ビットが設定されている必要があります」というエラーメッセージが表示された場合、次の手順で問題を解決してください。\\n\\n1. 起動プロセス中に「ESC」キーを押してGRUBメニューにアクセスします。\\n\\n![GRUB画面](/images/content/wx20211008-210752.png \\"GRUB画面\\")\\n\\n2. 最初のオプション「Ubuntu」を選択し、「e」キーを押してブートパラメータを編集します。\\n\\n![ブートパラメータを編集](/images/content/wx20211008-210841.png \\"ブートパラメータを編集\\")\\n\\n3. 「linux」で始まる行に次の文字列を追加して、レスキューモードでブートします：\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. レスキューモードに入ったら、次のコマンドを実行して `/usr/bin/sudo` の正しいパーミッションと所有権を復元します：\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nこのコマンドは必要なパーミッションを設定し、`sudo` がrootユーザーの所有であり、setuidビットが設定されていることを保証します。\\n\\nこれらの手順に従うことで、問題を解決し、Ubuntuシステムで`sudo`コマンドの正常な機能を回復することができます。\\n\\n---\\n"},{"lang":"de","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： Die kostenlose Alternative zu GitHub Large File Storage (Git LFS)","description":"Entdecken Sie, wie AWS CodeCommit eine kosteng\xfcnstige und effiziente Alternative zu GitHubs Large File Storage (Git LFS) bietet. Dieser Artikel behandelt die Einschr\xe4nkungen von Git LFS, die Vorteile der Nutzung von AWS CodeCommit f\xfcr die Speicherung gro\xdfer Dateien und bietet eine Schritt-f\xfcr-Schritt-Anleitung f\xfcr die Migration von Git LFS zu CodeCommit. Verbessern Sie Ihren Entwicklungsworkflow mit der skalierbaren und sicheren Infrastruktur von AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareentwicklung"],"draft":false},"content":"\\nAWS CodeCommit bietet eine robuste Alternative zum Large File Storage (Git LFS) Dienst von GitHub und stellt eine effiziente L\xf6sung f\xfcr das Management gro\xdfer Dateien in Ihren Git-Repositories dar.\\n\\n## Warum Sie die Verwendung von Git LFS \xfcberdenken sollten\\n\\nObwohl Git LFS eine beliebte Wahl f\xfcr den Umgang mit gro\xdfen Dateien in Git-Repositories ist, hat es seine Einschr\xe4nkungen und Herausforderungen. Git LFS erfordert zus\xe4tzliche Einrichtung und Verwaltung, was den Entwicklungsworkflow verkomplizieren kann. Zudem k\xf6nnen die Speicher- und Bandbreitenkosten, die mit Git LFS verbunden sind, schnell ansteigen, insbesondere bei Projekten mit zahlreichen gro\xdfen Dateien oder umfangreicher Zusammenarbeit.\\n\\n## Warum der Large File Storage Dienst von GitHub nicht perfekt ist\\n\\nDer Large File Storage Dienst von GitHub, obwohl n\xfctzlich, weist inh\xe4rente Nachteile auf. Das Hauptproblem sind die Kosten f\xfcr Speicher und Bandbreite, die bei gr\xf6\xdferen Projekten prohibitiv werden k\xf6nnen. Dar\xfcber hinaus kann die Verwaltung von Git LFS umst\xe4ndlich sein, da Entwickler den LFS-Client installieren und konfigurieren, spezifische Dateien verfolgen und mit potenziellen Merge-Konflikten umgehen m\xfcssen, die durch die separate Handhabung gro\xdfer Dateien vom Rest des Repositories entstehen.\\n\\n## Warum Sie AWS CodeCommit zur Speicherung gro\xdfer Dateien in Git verwenden sollten\\n\\nAWS CodeCommit bietet eine \xfcberzeugende Alternative zur Speicherung gro\xdfer Dateien in Git-Repositories, ohne dass Git LFS ben\xf6tigt wird. CodeCommit ist ein vollst\xe4ndig verwalteter Quellcodeverwaltungsdienst, der nahtlos mit anderen AWS-Diensten integriert ist und robuste Skalierbarkeit, Sicherheit und Kosteneffizienz bietet. Durch die Nutzung von CodeCommit k\xf6nnen Entwickler den zus\xe4tzlichen Aufwand der Verwaltung von Git LFS vermeiden und gleichzeitig von der robusten Infrastruktur und dem Pay-as-you-go-Preismodell von AWS profitieren.\\n\\n## Was sind die Einschr\xe4nkungen von AWS CodeCommit im Vergleich zu GitHub\\n\\nTrotz seiner Vorteile hat AWS CodeCommit im Vergleich zu GitHub einige Einschr\xe4nkungen. Die umfangreiche Community-Unterst\xfctzung, das reichhaltige \xd6kosystem an Integrationen und fortschrittliche Funktionen wie GitHub Actions und GitHub Pages sind m\xf6glicherweise nicht vollst\xe4ndig in CodeCommit repliziert. Dar\xfcber hinaus k\xf6nnten Entwickler, die an die Benutzeroberfl\xe4che und die Zusammenarbeitstools von GitHub gew\xf6hnt sind, feststellen, dass der \xdcbergang zu CodeCommit eine gewisse Anpassung erfordert.\\n\\n## So migrieren Sie ein Git LFS-Repository zu CodeCommit\\n\\nDie Migration eines Git LFS-Repository zu CodeCommit umfasst mehrere Schritte. Stellen Sie zun\xe4chst sicher, dass alle gro\xdfen Dateien korrekt in Ihrem Git LFS-Repository verfolgt werden. Klonen Sie anschlie\xdfend das Repository und entfernen Sie die Git LFS-Tracking-Konfiguration. Erstellen Sie danach ein neues Repository in AWS CodeCommit und pushen Sie Ihr lokales Repository dorthin. Ausf\xfchrliche Dokumentationen und Skripte sind verf\xfcgbar, um diesen Prozess zu vereinfachen und einen reibungslosen \xdcbergang ohne Datenverlust oder Unterbrechung zu gew\xe4hrleisten.\\n\\n## Eine bessere L\xf6sung\\n\\nF\xfcr Teams und Projekte, die stark auf Git LFS angewiesen sind, kann die Erkundung von AWS CodeCommit als Alternative erhebliche Vorteile bieten. Die nahtlose Integration von CodeCommit in das AWS-\xd6kosystem, zusammen mit seiner kosteneffizienten und skalierbaren Natur, macht es zu einer attraktiven Option f\xfcr das Verwalten gro\xdfer Dateien in Git-Repositories. Indem die Herausforderungen, die mit Git LFS verbunden sind, gemindert werden, erm\xf6glicht CodeCommit den Entwicklungsteams, sich auf das Codieren und die Zusammenarbeit zu konzentrieren, was die Produktivit\xe4t und Innovation f\xf6rdert.\\n\\nAbschlie\xdfend bietet AWS CodeCommit eine tragf\xe4hige, kosteneffiziente und effiziente Alternative zum Large File Storage-Dienst von GitHub. Durch die Nutzung der robusten Infrastruktur von AWS k\xf6nnen Entwickler gro\xdfe Dateien in Git-Repositories problemlos verwalten, ihre Arbeitsabl\xe4ufe optimieren und den Aufwand reduzieren.\\n"},{"lang":"de","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Spannung und Stromst\xe4rke auf MacOS f\xfcr das Netzteil pr\xfcfen","meta_title":"Spannung und Stromst\xe4rke auf MacOS f\xfcr das Netzteil pr\xfcfen","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Netzteil","Spannung","Stromst\xe4rke"],"categories":["MacOS"],"draft":false},"content":"\\nWenn Sie ein MacBook verwenden, m\xf6chten Sie m\xf6glicherweise die Spannung und den Strom des Netzadapters \xfcberpr\xfcfen. Hier ist eine einfache M\xf6glichkeit, die Spannung und den Strom des Netzadapters unter MacOS zu \xfcberpr\xfcfen.\\n\\n\xd6ffnen Sie Terminal.app und geben Sie den folgenden Befehl ein:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nSie erhalten die folgenden Informationen, einschlie\xdflich Strom und Spannung:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"de","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Markdown schnell in ein akademisches PDF auf macOS umwandeln","meta_title":"Markdown auf macOS mit Pandoc in ein akademisches PDF umwandeln","description":"Erfahren Sie, wie Sie Markdown-Dokumente auf macOS mit Pandoc und BasicTeX in akademische PDF-Papiere umwandeln k\xf6nnen. Diese schnelle und einfache Methode eignet sich perfekt zur Erstellung professioneller PDF-Dateien f\xfcr akademische Arbeiten.","date":"2022-03-03T00:00:00.000Z","categories":["Softwareentwicklung"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Papier","Markdown","macOS"],"draft":false},"content":"\\nIn diesem Leitfaden zeige ich Ihnen, wie ich Markdown-Dokumente auf macOS mit Pandoc und BasicTeX in PDFs im akademischen Stil umwandle. Diese Methode ist schnell und unkompliziert, perfekt, wenn Sie professionell aussehende PDF-Dateien f\xfcr Ihre wissenschaftlichen Arbeiten erstellen m\xfcssen.\\n\\n### Schritt 1: Installation von Pandoc und BasicTeX\\n\\nZuerst m\xfcssen Sie Pandoc und BasicTeX auf Ihrem macOS-System installieren. So habe ich es gemacht:\\n\\n1. **Pandoc installieren**: \xd6ffnen Sie das Terminal und geben Sie den folgenden Befehl ein, um Pandoc zu installieren:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **BasicTeX installieren**: Da MacTeX ziemlich gro\xdf ist, habe ich mich f\xfcr das kleinere BasicTeX-Paket entschieden, um Platz zu sparen. F\xfchren Sie diesen Befehl aus:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **H\xe4ufige LaTeX-Pakete installieren**: Um sicherzustellen, dass Sie die notwendigen Pakete zur Erstellung von PDFs haben, f\xfchren Sie diese Befehle aus:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Schritt 2: Bereiten Sie Ihre Markdown-Datei vor\\n\\nErstellen Sie als N\xe4chstes Ihre Markdown-Datei (z. B. `paper.md`). So habe ich meine Datei eingerichtet, einschlie\xdflich Titel, Autor, Datum und Kontaktinformationen:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here. \\n```\\n\\n### Schritt 3: Konvertieren Sie Markdown mit Pandoc in PDF\\n\\nJetzt k\xf6nnen Sie Ihre Markdown-Datei in eine PDF-Datei konvertieren. Ich habe den folgenden Befehl im Terminal verwendet:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nDieser Befehl verwendet Pandocs Standard-LaTeX-Vorlage, um die Markdown-Datei in eine PDF-Datei im akademischen Stil umzuwandeln, einschlie\xdflich der Kontaktinformationen des Autors unter dessen Namen.\\n\\n### Zus\xe4tzliche Tipps\\n\\n- **Eigene LaTeX-Vorlage**: Wenn Sie fortgeschrittenere Formatierungen oder spezifische Stile ben\xf6tigen, k\xf6nnen Sie eine eigene LaTeX-Vorlage erstellen oder herunterladen und mit Pandoc verwenden:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Mehr Metadaten**: Sie k\xf6nnen zus\xe4tzliche Informationen in der YAML-Metadaten\xfcberschrift hinzuf\xfcgen, wie z. B. ein Abstract oder Schl\xfcsselw\xf6rter, und diese in benutzerdefinierten Vorlagen verwenden.\\n\\n### Fazit\\n\\nMit diesen Schritten k\xf6nnen Sie ganz einfach Markdown-Dokumente auf macOS in PDFs im akademischen Stil umwandeln. Die Verwendung von Pandoc und BasicTeX macht diesen Prozess schnell und effizient, perfekt, wenn Sie professionelle PDF-Dokumente erstellen m\xfcssen. Ob Sie wissenschaftliche Arbeiten, technische Berichte oder andere formelle Dokumente vorbereiten, diese Methode funktioniert hervorragend. Das Hinzuf\xfcgen von Kontaktinformationen in der Metadaten\xfcberschrift verleiht Ihren Dokumenten eine professionelle Note.\\n\\nIch hoffe, Sie finden diesen Leitfaden hilfreich! Wenn Sie Fragen haben oder auf Probleme sto\xdfen, z\xf6gern Sie nicht, uns zu kontaktieren. Viel Spa\xdf beim Schreiben!\\n"},{"lang":"de","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Electron Build Tools `ERROR Error： Failed to run \\\\\\"choco install pywin32 --yes\\\\\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Softwareentwicklung"]},"content":"\\nBei der Arbeit mit Electron Build Tools kann es zu einem Fehler bei der Installation von pywin32 \xfcber Chocolatey kommen. Dies kann frustrierend sein, insbesondere wenn es sich um eine erforderliche Abh\xe4ngigkeit f\xfcr Ihr Projekt handelt. Im Folgenden finden Sie eine detaillierte Erkl\xe4rung des Problems und m\xf6gliche Schritte zu dessen Behebung.\\n\\n### Der Fehler\\n\\nBeim Initialisieren eines Electron-Projekts mit Electron Build Tools kann die folgende Fehlermeldung angezeigt werden:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nDieser Fehler tritt typischerweise auf, weil das Installationsskript f\xfcr das pywin32-Paket die erforderlichen Dateien auf dem Remote-Server nicht finden kann. Dies f\xfchrt zu einem 404-Fehler, der darauf hinweist, dass die Datei unter der angegebenen URL nicht verf\xfcgbar ist.\\n\\n### Verst\xe4ndnis des Fehlers\\n\\nDer entscheidende Teil der Fehlermeldung lautet:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\nDies deutet darauf hin, dass die Download-URL f\xfcr pywin32 nicht mehr g\xfcltig ist, was bedeutet, dass Chocolatey die erforderlichen Installationsdateien nicht abrufen kann.\\n\\n### Schritte zur Fehlerbehebung\\n\\nHier sind einige Schritte, die Sie unternehmen k\xf6nnen, um dieses Problem zu l\xf6sen:\\n\\n#### 1. \xdcberpr\xfcfen Sie die Chocolatey-Installation\\n\\nStellen Sie sicher, dass Chocolatey korrekt installiert und auf die neueste Version aktualisiert ist. Sie k\xf6nnen Ihre Chocolatey-Version mit folgendem Befehl \xfcberpr\xfcfen:\\n\\n```bash\\nchoco --version\\n```\\n\\nUm Chocolatey zu aktualisieren, verwenden Sie:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installieren Sie pywin32 manuell\\n\\nDa die automatisierte Installation fehlschl\xe4gt, versuchen Sie, pywin32 manuell zu installieren. Sie k\xf6nnen die entsprechende Version von der offiziellen [pywin32 GitHub Releases Seite](https://github.com/mhammond/pywin32/releases) herunterladen und manuell installieren.\\n\\n#### 3. \xc4ndern Sie das Installationsskript\\n\\nWenn Sie die Kontrolle \xfcber das Electron Build Tools-Skript haben, k\xf6nnen Sie es so \xe4ndern, dass es auf eine g\xfcltige URL f\xfcr pywin32 verweist oder den manuellen Installationsprozess abwickelt.\\n\\n#### 4. Verwenden Sie einen alternativen Paketmanager\\n\\nWenn Chocolatey weiterhin fehlschl\xe4gt, ziehen Sie die Verwendung eines alternativen Paketmanagers wie pip f\xfcr Python-Pakete in Betracht:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Beispiel f\xfcr die manuelle Installation von pywin32\\n\\n1. Laden Sie den passenden pywin32-Installer von den [offiziellen GitHub Releases](https://github.com/mhammond/pywin32/releases) herunter.\\n2. F\xfchren Sie den Installer aus und folgen Sie den Installationsanweisungen.\\n3. \xdcberpr\xfcfen Sie die Installation, indem Sie ein einfaches Python-Skript ausf\xfchren, das pywin32 importiert:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nDas Auftreten des Fehlers \\"Failed to run `choco install pywin32 --yes`\\" kann ein Hindernis in Ihrem Entwicklungsprozess darstellen. Indem Sie jedoch die Ursache verstehen und die oben beschriebenen Schritte befolgen, k\xf6nnen Sie dieses Problem \xfcberwinden und mit der Einrichtung Ihres Electron-Projekts fortfahren.\\n"},{"lang":"de","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Geheimnisse des vollst\xe4ndigen kundenspezifischen ASIC-Designs f\xfcr Bitcoin- und Kryptow\xe4hrungs-Mining","date":"2022-05-30T00:00:00.000Z","categories":["Halbleiter","Bitcoin","Kryptow\xe4hrung","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Mining","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\n\\\\ntan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Zusammenfassung\\n\\nIm wettbewerbsintensiven Bereich des Kryptow\xe4hrungs-Minings sind Energieeffizienz, Hashrate-Performance und Zuverl\xe4ssigkeit von gr\xf6\xdfter Bedeutung. Dieses Papier befasst sich mit dem erstklassigen Full-Custom-ASIC-Design (Application-Specific Integrated Circuit) und enth\xfcllt Branchengeheimnisse und Expertenmethoden, die das Hochleistungs-Bitcoin- und Kryptow\xe4hrungs-Mining vorantreiben. Geschrieben von einem Technologieexperten eines der f\xfchrenden ASIC-Miner-Unternehmen, nutzt dieses Papier fortschrittliche Designtechniken, akribische physische Layouts und umfassende Verifizierungsprozesse, um die au\xdfergew\xf6hnlichen F\xe4higkeiten von Full-Custom-ASICs zur Maximierung der Mining-Effizienz und -Rentabilit\xe4t zu demonstrieren.\\n\\n## Einleitung\\n\\nDie Entwicklung des Kryptow\xe4hrungs-Minings, insbesondere des Bitcoin-Minings, hat einen Wandel von der Nutzung allgemeiner CPUs, FPGAs und GPUs hin zu spezialisierten ASICs erlebt. Diese ASICs bieten unvergleichliche Leistung und Energieeffizienz. Full-Custom-ASIC-Design stellt den H\xf6hepunkt dieser Entwicklung dar und erm\xf6glicht ma\xdfgeschneiderte L\xf6sungen, die den spezifischen Anforderungen von Mining-Betrieben gerecht werden.\\n\\nEin Gro\xdfteil der bestehenden Literatur \xfcber ASIC-Design f\xfcr das Kryptow\xe4hrungs-Mining stammt aus der Wissenschaft oder von nicht im Mining t\xe4tigen Unternehmen und ist oft wenig praxisnah. Bisher haben nur eine Handvoll Unternehmen, haupts\xe4chlich chinesische (z.B. MicroBT, Bitmain), erfolgreich marktf\xe4hige Bitcoin-Mining-ASICs entwickelt. Dieses Papier zielt darauf ab, diese L\xfccke zu schlie\xdfen, indem es Einblicke aus der tats\xe4chlichen Praxis der Branche bietet und eine Perspektive vermittelt, die in den Realit\xe4ten des Mining-Sektors verankert ist.\\n\\nAls Profi mit \xfcber zehn Jahren Erfahrung in der Technologiebranche hat der Autor dieses Papiers den weltweit besten Bitcoin-ASIC-Miner (WhatsMiner), LTC/DOGE- und ETH-Miner entwickelt und eine Schl\xfcsselrolle bei Unternehmen wie MicroBT, BTC.COM und anderen fablesses gespielt. Er hat Schl\xfcsselpositionen in an der NASDAQ, HKSE und NYSE notierten Unternehmen innegehabt. Mit umfangreicher Erfahrung in der Zusammenarbeit mit TSMC, Texas Instruments, ARM und Intel bringt er ein reichhaltiges Wissen und praktische Expertise im Bereich des Custom-ASIC-Designs f\xfcr Bitcoin- und Kryptow\xe4hrungs-Mining mit.\\n\\n## Methodik und Designablauf\\n\\n### Designphilosophie\\n\\nUnser Ansatz f\xfcr das vollst\xe4ndige kundenspezifische ASIC-Design basiert auf einem Fokus auf die Maximierung von PPA (Power, Performance und Area), insbesondere unter Niederspannungsbedingungen. In diesem Abschnitt werden unsere Designphilosophie und Methodik beschrieben:\\n\\n1. **Pipeline-Architektur**: Nutzung der inh\xe4renten Vorteile von Pipeline-Strukturen f\xfcr Mining-Algorithmen, die durch Register und kombinatorische Logikstufen gekennzeichnet sind. Durch den Einsatz einer Pipeline-Architektur k\xf6nnen wir effizient die hochfrequenten Operationen bew\xe4ltigen, die f\xfcr das Kryptow\xe4hrungs-Mining erforderlich sind.\\n2. **Manuelles Netlist und Platzierung**: Detaillierte Skripterstellung f\xfcr die Netlist-Erstellung und manuelle Zellplatzierung zur Optimierung kritischer Pfade. Dies erm\xf6glicht eine pr\xe4zise Steuerung der Zeitgebung und reduziert parasit\xe4re Effekte.\\n3. **Kundenspezifische Zellbibliotheken**: Entwicklung spezialisierter Zellen mit optimierter Transistoranzahl und dynamischen Energiesparfunktionen. Kundenspezifische Zellen sind darauf ausgelegt, bei den niedrigsten m\xf6glichen Spannungen zu arbeiten und so den Energieverbrauch zu minimieren.\\n\\n### Erreichen von PPA-Vorteilen\\n\\nDetaillierte Strategien zur Erreichung von PPA-Vorteilen durch kundenspezifisches Design:\\n\\n1. **Kundenspezifisches Registerdesign**: Einsatz von Mehrbit-Register und latchbasierten Designs zur Reduzierung der Taktleistung und Verbesserung des Timing-Borrowings. Mehrbit-Register minimieren den Stromverbrauch des Taktbaums und reduzieren die gesamte Fl\xe4che.\\n2. **Manuelle Platzierung**: Reduzierung der Leitungsl\xe4ngen und Ausgleich der Setup- und Haltezeiten zur Verbesserung der Gesamtleistung. Die manuelle Platzierung erm\xf6glicht eine bessere Kontrolle \xfcber Interconnect-Verz\xf6gerungen und \xdcbersprechen, was die Signalintegrit\xe4t verbessert und den Energieverbrauch reduziert.\\n3. **Optimiertes Zelldesign**: Kundenspezifische Zellen sind so konzipiert, dass sie bei niedrigeren Spannungen arbeiten und so den dynamischen Energieverbrauch minimieren und die Effizienz maximieren. Durch die Anpassung der Zelldesigns an die spezifischen Anforderungen der Mining-Algorithmen k\xf6nnen wir signifikante Leistungsverbesserungen erzielen.\\n\\n### Zuverl\xe4ssigkeit unter Niederspannung\\n\\nSicherstellung der Zuverl\xe4ssigkeit von kundenspezifisch entworfener Timing-Logik bei Niederspannungen umfasst:\\n\\n1. **Akkurate Simulation**: Schaltungssimulationen zur Validierung des Verhaltens kundenspezifischer Zellen unter spezifischen Bedingungen. Werkzeuge wie SPICE werden f\xfcr detaillierte elektrische Simulationen verwendet, um sicherzustellen, dass die Zellen unter allen PVT (Prozess, Spannung, Temperatur)-Ecken korrekt arbeiten.\\n2. **Konsistenz in der Platzierung**: Manuelle Platzierung zur Sicherstellung der Uniformit\xe4t und Reduzierung der Variabilit\xe4t. Durch die Steuerung des physischen Layouts k\xf6nnen wir den Einfluss von Prozessvariationen minimieren und eine konsistente Leistung gew\xe4hrleisten.\\n3. **Pr\xe4zise PVT-Kalibrierung**: Verifikation gegen Prozess-, Spannungs- und Temperaturvariationen. Umfangreiche Tests und Kalibrierungen werden durchgef\xfchrt, um die Robustheit des Designs unter verschiedenen Betriebsbedingungen sicherzustellen.\\n\\n## Fallstudien und Ergebnisse\\n\\nVorstellung von realen Daten und Fallstudien aus Full-Mask-Tape-Outs:\\n\\n| Projekt | Prozessknoten | Spannungs-/Leistungs-Effizienz | Algorithmus |\\n| ------- | ------------- | ----------------------------- | ----------- |\\n| SC      | TSMC 28nm     | 0,45V, 257J/T                 | Blake2b     |\\n| DCR     | TSMC 28nm     | 0,45V, 150J/T                 | Blake256    |\\n| DASH    | TSMC 16nm     | 0,38V, 6,2J/G                 | X11         |\\n| BTC     | TSMC 16nm     | 0,38V, 65J/T                  | SHA-256d    |\\n| BTC     | TSMC 7nm      | 0,30V, 37J/T                  | SHA-256d    |\\n| BTC     | Samsung 8nm   | 0,31V, 45J/T                  | SHA-256d    |\\n| BTC     | SMIC N+1      | 0,30V, 35J/T                  | SHA-256d    |\\n\\nDiese Ergebnisse demonstrieren die erheblichen Effizienz- und Leistungssteigerungen, die durch unseren kundenspezifischen Designansatz erzielt werden k\xf6nnen.\\n\\n## Integration und Verifikation\\n\\n### Mixed-Cell-Abschluss\\n\\n- **Integration von kundenspezifischen Zellen**: Kundenspezifische Zellen werden mit Standardzellen von TSMC und anderen Foundries integriert, um Kompatibilit\xe4t und Leistung zu gew\xe4hrleisten. Kundenspezifische Zellen werden charakterisiert und validiert, um den Anforderungen der Standardzellenbibliothek zu entsprechen und eine nahtlose Integration zu erm\xf6glichen.\\n- **Abschlussstrategien**: Strategien zur Sicherstellung nahtloser Kompatibilit\xe4t und Leistung umfassen detaillierte DRC (Design Rule Check) und LVS (Layout Versus Schematic) Pr\xfcfungen sowie Timing- und Leistungsanalysen mit branchen\xfcblichen EDA (Electronic Design Automation) Tools.\\n\\n### Digital- und Analog-Co-Design\\n\\n- **Techniken zur Integration**: Integration von digitalen und analogen Komponenten zur Optimierung der Gesamtchip-Leistung. Techniken wie Mixed-Signal-Verifikation und Co-Simulation werden eingesetzt, um eine ordnungsgem\xe4\xdfe Integration und Funktionalit\xe4t sicherzustellen.\\n- **Verifikationsmethodologien**: Methodologien zur Sicherstellung der Robustheit unter verschiedenen Betriebsbedingungen umfassen Eckwertanalysen, Monte-Carlo-Simulationen und Zuverl\xe4ssigkeitspr\xfcfungen zur Ber\xfccksichtigung von Alterung und Elektromigration.\\n\\n## Schlussfolgerung\\n\\nFull-Custom-ASIC-Design bietet erhebliche Vorteile f\xfcr das Bitcoin- und Kryptow\xe4hrungs-Mining und gew\xe4hrleistet unvergleichliche Leistung, Energieeffizienz und Zuverl\xe4ssigkeit. Durch die Enth\xfcllung der Geheimnisse erstklassiger kundenspezifischer ASIC-Designs hebt dieses Papier die Methoden und Innovationen hervor, die Branchenf\xfchrer auszeichnen. W\xe4hrend sich das Kryptow\xe4hrungs-Mining weiterentwickelt, werden kundenspezifische ASICs eine entscheidende Rolle bei der n\xe4chsten Generation von hocheffizienter, leistungsstarker Mining-Hardware spielen.\\n\\n[PDF-Version des Papiers](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"de","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Erhalten Sie die aktuelle Commit-ID von Git und aktualisieren Sie sie in package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Softwareentwicklung"]},"content":"\\nBei der Entwicklung eines Node.js-Projekts m\xf6chten Sie m\xf6glicherweise die aktuelle Commit-ID Ihres Git-Repositorys verfolgen. Diese Information kann f\xfcr Debugging-, Versions- oder Bereitstellungszwecke n\xfctzlich sein. Eine M\xf6glichkeit, dies zu erreichen, besteht darin, die `package.json`-Datei w\xe4hrend des Build-Prozesses mit der aktuellen Commit-ID zu aktualisieren. Dieser Artikel f\xfchrt Sie durch die Schritte, um die aktuelle Commit-ID von Git zu erhalten und sie mithilfe von Node.js in die `package.json`-Datei zu aktualisieren.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\"\\",\\n"},{"lang":"de","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migriere ein GitHub LFS (Git Large File Storage) Repository zu AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Softwareentwicklung"]},"content":"\\nIch habe k\xfcrzlich eines meiner GitHub-Repositories, das Git Large File Storage (LFS) verwendet, auf AWS CodeCommit migriert. Ich m\xf6chte den Prozess mit Ihnen teilen, falls Sie etwas \xc4hnliches vorhaben. Hier ist eine Schritt-f\xfcr-Schritt-Anleitung basierend auf meinen Erfahrungen.\\n\\n## Voraussetzungen\\n\\nBevor wir beginnen, stellen Sie sicher, dass diese Tools installiert sind:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Schritt-f\xfcr-Schritt-Anleitung\\n\\n### 1. Repository klonen\\n\\nZuerst klonen Sie Ihr GitHub-Repository mit der Option `--mirror`. Dies erstellt einen nackten Klon des Repositories, einschlie\xdflich aller Branches und Tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. LFS-Dateien \xfcberpr\xfcfen\\n\\nListen Sie als n\xe4chstes alle Dateien auf, die von Git LFS verwaltet werden, um sicherzustellen, dass alles an seinem Platz ist.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nSie sollten etwas \xc4hnliches sehen:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. LFS-Dateien migrieren\\n\\nExportieren Sie nun die LFS-Dateien. Dieser Schritt stellt sicher, dass sie Teil der Repository-Historie sind.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nSie werden einige Fortschrittsmeldungen wie diese sehen:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. LFS bereinigen\\n\\nEntfernen Sie die Git LFS-Tracking-Informationen und deinstallieren Sie Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Auf AWS CodeCommit pushen\\n\\nZum Schluss pushen Sie Ihr Repository zu AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nDas war\'s! Durch Befolgen dieser Schritte konnte ich mein GitHub LFS-Repository erfolgreich zu AWS CodeCommit migrieren. Die gro\xdfen Dateien und die Repository-Historie wurden perfekt erhalten.\\n\\n## Zusammenfassung\\n\\nDas Migrieren eines GitHub-Repositories, das Git LFS verwendet, zu AWS CodeCommit ist ziemlich einfach, wenn man die richtigen Schritte befolgt. Wenn Sie Fragen haben oder auf Probleme sto\xdfen, sind die [AWS CodeCommit-Dokumentation](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) und die [Git LFS-Dokumentation](https://git-lfs.github.com/) gro\xdfartige Ressourcen.\\n\\nIch hoffe, du findest diesen Leitfaden hilfreich. Viel Spa\xdf beim Programmieren!\\n"},{"lang":"de","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Alle Unterverzeichnisse von Git zur\xfccksetzen/wiederherstellen","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Versionskontrolle"],"categories":["Softwareentwicklung"]},"content":"\\nEin Git-Repository effektiv zu verwalten, erfordert oft das Zur\xfccksetzen oder Wiederherstellen von Unterverzeichnissen, um eine saubere und funktionsf\xe4hige Codebasis zu erhalten. Diese Anleitung bietet einen pr\xe4gnanten, schrittweisen Ansatz zum Zur\xfccksetzen oder Wiederherstellen aller Unterverzeichnisse in einem Git-Repository.\\n\\n## Zur\xfccksetzen von Unterverzeichnissen\\n\\nDer folgende Git-Befehl entfernt alle nicht verfolgten Dateien und Verzeichnisse aus dem Repository. Dies ist n\xfctzlich, um unn\xf6tige Dateien zu bereinigen, bevor ein Zur\xfccksetzen oder Wiederherstellen durchgef\xfchrt wird.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Befehlsaufteilung:\\n\\n- `-x`: Entfernt alle nicht verfolgten Dateien, einschlie\xdflich derjenigen, die von `.gitignore` ignoriert werden.\\n- `-f`: Erzwingt das Entfernen von Dateien.\\n- `-d`: Entfernt nicht verfolgte Verzeichnisse.\\n- `-- .`: Wendet den Befehl auf das aktuelle Verzeichnis und alle Unterverzeichnisse an.\\n\\n## Wiederherstellen von Unterverzeichnissen\\n\\nUm alle Dateien im Repository auf ihren letzten commit zur\xfcckzusetzen, verwenden Sie den folgenden Befehl:\\n\\n```bash\\ngit checkout {HEAD ODER BRANCH} -- .\\n```\\n\\n### Befehlsaufteilung:\\n\\n- `{HEAD ODER BRANCH}`: Ersetzen Sie dies durch `HEAD`, um auf den neuesten Commit zur\xfcckzusetzen, oder geben Sie einen Branch-Namen an, um auf einen bestimmten Branch zur\xfcckzusetzen.\\n- `-- .`: Wendet den Befehl auf das aktuelle Verzeichnis und alle Unterverzeichnisse an.\\n\\nMit diesen Befehlen k\xf6nnen Sie sicherstellen, dass Ihr Repository frei von unerw\xfcnschten Dateien ist und dass alle Dateien auf ihre commit-St\xe4nde zur\xfcckgesetzt werden. Dieser Prozess hilft dabei, eine saubere und organisierte Codebasis zu erhalten, was die Zusammenarbeit und Entwicklung erleichtert.\\n\\nPassen Sie diese Anleitung nach Ihren spezifischen Bed\xfcrfnissen und Vorlieben an. F\xfcr weiterf\xfchrende Git-Operationen konsultieren Sie die [offizielle Git-Dokumentation](https://git-scm.com/doc).\\n"},{"lang":"de","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Ultra-Kosteng\xfcnstiges DDR3-, DDR4-, LP-DDR3- und LP-DDR4-Speichertestsystem","description":"Entdecken Sie das ultra-kosteng\xfcnstige Speichertestsystem f\xfcr DDR3-, DDR4-, LP-DDR3- und LP-DDR4-Technologien. Zum Preis von etwa 200.000 USD bietet es Hochgeschwindigkeitstests, Vielseitigkeit, erweiterte Funktionen und einen geringen Stromverbrauch. Perfekt f\xfcr Unternehmen, die kosteng\xfcnstige und zuverl\xe4ssige Speichertestl\xf6sungen suchen.","date":"2024-06-01T00:00:00.000Z","categories":["Halbleiter"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Speichertestsystem"],"draft":false},"content":"\\nWenn Sie wie ich sind und immer nach kosteng\xfcnstigen L\xf6sungen suchen, ohne dabei an Qualit\xe4t einzub\xfc\xdfen, werden Sie lieben, was ich heute zu teilen habe. In unserer schnelllebigen Technikwelt ist es entscheidend, dass der Speicher unserer Ger\xe4te auf dem neuesten Stand ist. Hochwertige Optionen wie der T5503/T5503HS2 sind fantastisch, aber sie haben einen hohen Preis. Zum Gl\xfcck ist Zeeis mit einem ultra kosteng\xfcnstigen Speichertestsystem auf den Markt gekommen, das keine Leistungseinbu\xdfen hat.\\n\\n## Warum das wichtig ist\\n\\nAls ich zum ersten Mal von dem Speichertestsystem von Zeeis h\xf6rte, war ich fasziniert. Dieses System ist darauf ausgelegt, DDR3-, DDR4-, LP-DDR3- und LP-DDR4-Speichertechnologien zu unterst\xfctzen. Egal, ob Sie mit \xe4lteren Systemen oder der neuesten Technik arbeiten, dieses System deckt alles ab.\\n\\n### Hochgeschwindigkeitstests\\n\\nEine der herausragenden Eigenschaften ist seine F\xe4higkeit, Daten\xfcbertragungsraten von 800 bis 3200 MT/s sowohl f\xfcr DDR3 als auch DDR4 zu unterst\xfctzen. Es kann Speichermodule bei Taktraten von bis zu 1600 MHz bewerten. Das bedeutet gr\xfcndliche und zuverl\xe4ssige Tests, die sicherstellen, dass Ihre Ger\xe4te optimal funktionieren.\\n\\n### Vielseitigkeit\\n\\nDie Vielseitigkeit dieses Systems ist ein echter Wendepunkt. Es unterst\xfctzt mehrere Speicherstandards, was es f\xfcr eine breite Palette von Anwendungen geeignet macht – von Unterhaltungselektronik bis hin zu Hochleistungsrechnern. Au\xdferdem ist es zukunftssicher. Wenn neue Speichertechnologien auf den Markt kommen, kann dieses System leicht aufger\xfcstet werden, um sie zu unterst\xfctzen.\\n\\n### Kosteneffizienz\\n\\nKommen wir nun zum Preis. Bei etwa 200.000 USD bietet dieses System eine ausgezeichnete Kapitalrendite. Es ist erschwinglich genug f\xfcr kleine bis mittelst\xe4ndische Unternehmen und bietet erstklassige Testm\xf6glichkeiten, ohne das Budget zu sprengen.\\n\\n### Erweiterte Funktionen\\n\\nDas System verf\xfcgt \xfcber fortschrittliche Testalgorithmen, einschlie\xdflich eines integrierten algorithmischen Mustergenerators (ALPG). Dies gew\xe4hrleistet eine genaue und zuverl\xe4ssige Speicherbewertung, sodass jedes Modul strenge Leistungsstandards erf\xfcllt.\\n\\n### Niedriger Stromverbrauch\\n\\nBeeindruckend ist auch der geringe Stromverbrauch. Es entspricht den Trends bei LP-DDR3- und LP-DDR4-Speichertechnologien. Durch den Betrieb bei niedrigeren Spannungen werden nicht nur Energiekosten gesenkt, sondern auch die W\xe4rmeabgabe minimiert, was es zu einer umweltfreundlichen Wahl macht.\\n\\n## Warum Zeeis w\xe4hlen?\\n\\n### Skalierbarkeit\\n\\nDas System von Zeeis ist auf Skalierbarkeit ausgelegt. Wenn neue Speichertechnologien auf den Markt kommen, kann das System problemlos aufger\xfcstet werden, was eine langfristige Nutzbarkeit gew\xe4hrleistet und die Notwendigkeit h\xe4ufiger Ersetzungen verringert.\\n\\n### Unterst\xfctzung und Dokumentation\\n\\nEin weiterer gro\xdfer Vorteil ist die umfangreiche Unterst\xfctzung und Dokumentation von Zeeis. Egal, ob Sie ein erfahrener Profi oder neu im Bereich der Speicherpr\xfcfung sind, ihre detaillierten Anleitungen und der reaktionsschnelle Kundenservice sorgen f\xfcr ein reibungsloses Erlebnis.\\n\\n### Erf\xfcllung der Marktnachfrage\\n\\nMit der wachsenden Nachfrage nach Hochgeschwindigkeitsspeichern in allem, von Smartphones bis hin zu Rechenzentren, ist eine zuverl\xe4ssige und kosteneffiziente Speicherpr\xfcfl\xf6sung unerl\xe4sslich. Das System von Zeeis erf\xfcllt diese Anforderungen und stellt sicher, dass Ihre Produkte marktreif sind und in realen Anwendungen einwandfrei funktionieren.\\n\\n## Fazit\\n\\nKurz gesagt, das Ultra Low Cost DDR3, DDR4, LP-DDR3 & LP-DDR4 Memory Test System von Zeeis ist eine fantastische Option f\xfcr alle, die zuverl\xe4ssige, vielseitige und kosteng\xfcnstige Speicherpr\xfcfl\xf6sungen ben\xf6tigen. Es bietet hohe Leistung zu einem Bruchteil der Kosten anderer High-End-Systeme und erm\xf6glicht es Unternehmen, hohe Standards aufrechtzuerhalten, ohne das Budget zu sprengen.\\n\\nWenn Sie daran interessiert sind, Ihre Testkapazit\xe4ten mit einem System zu verbessern, das f\xfcr die Zukunft der Speichertechnologie ausgelegt ist, k\xf6nnen Sie sich gerne f\xfcr weitere Informationen an mich wenden: [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nViel Erfolg beim Testen!\\n"},{"lang":"de","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo muss im Besitz von UID 0 sein und das Setuid-Bit auf Ubuntu 20.04 gesetzt haben","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nWenn Sie die Fehlermeldung \\"/usr/bin/sudo must be owned by uid 0 and have the setuid bit set\\" auf Ubuntu 20.04 erhalten, folgen Sie diesen Schritten, um das Problem zu beheben.\\n\\n1. Dr\xfccken Sie w\xe4hrend des Bootvorgangs die \'ESC\'-Taste, um das GRUB-Men\xfc zu \xf6ffnen.\\n\\n![GRUB Bildschirm](/images/content/wx20211008-210752.png \\"GRUB Bildschirm\\")\\n\\n2. W\xe4hlen Sie die erste Option \\"Ubuntu\\" und dr\xfccken Sie die \'e\'-Taste, um die Boot-Parameter zu bearbeiten.\\n\\n![Boot-Parameter bearbeiten](/images/content/wx20211008-210841.png \\"Boot-Parameter bearbeiten\\")\\n\\n3. F\xfcgen Sie die folgende Zeichenkette zu der Zeile hinzu, die mit \'linux\' beginnt, um im Rescue-Modus zu booten:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. F\xfchren Sie im Rescue-Modus den folgenden Befehl aus, um die richtigen Berechtigungen und den Besitz f\xfcr `/usr/bin/sudo` wiederherzustellen:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nDieser Befehl setzt die notwendigen Berechtigungen und stellt sicher, dass `sudo` dem Root-Benutzer geh\xf6rt und das setuid-Bit gesetzt ist.\\n\\nDurch das Befolgen dieser Schritte sollten Sie das Problem beheben und die ordnungsgem\xe4\xdfe Funktion des `sudo`-Befehls auf Ihrem Ubuntu-System wiederherstellen k\xf6nnen.\\n\\n---\\n"},{"lang":"fr","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit ： l\'alternative gratuite \xe0 GitHub Large File Storage (Git LFS)","description":"D\xe9couvrez comment AWS CodeCommit est une alternative rentable et efficace \xe0 GitHub Large File Storage (Git LFS). Cet article couvre les limitations de Git LFS, les avantages de l\'utilisation d\'AWS CodeCommit pour le stockage de fichiers volumineux, et fournit un guide \xe9tape par \xe9tape pour migrer de Git LFS \xe0 CodeCommit. Am\xe9liorez votre flux de d\xe9veloppement avec l\'infrastructure \xe9volutive et s\xe9curis\xe9e d\'AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["D\xe9veloppement logiciel"],"draft":false},"content":"\\nAWS CodeCommit offre une alternative robuste au service de stockage de fichiers volumineux de GitHub (Git LFS), en fournissant une solution efficace pour g\xe9rer les fichiers volumineux dans vos d\xe9p\xf4ts Git.\\n\\n## Pourquoi vous devriez reconsid\xe9rer l\'utilisation de Git LFS\\n\\nBien que Git LFS soit un choix populaire pour g\xe9rer les fichiers volumineux dans les d\xe9p\xf4ts Git, il pr\xe9sente des limitations et des d\xe9fis. Git LFS n\xe9cessite une configuration et une gestion suppl\xe9mentaires, ce qui peut compliquer le flux de travail de d\xe9veloppement. De plus, les co\xfbts de stockage et de bande passante associ\xe9s \xe0 Git LFS peuvent augmenter rapidement, en particulier pour les projets avec de nombreux fichiers volumineux ou une collaboration \xe9tendue.\\n\\n## Pourquoi le service de stockage de fichiers volumineux de GitHub n\'est pas parfait\\n\\nLe service de stockage de fichiers volumineux de GitHub, bien que utile, pr\xe9sente des inconv\xe9nients inh\xe9rents. La principale pr\xe9occupation est le co\xfbt associ\xe9 au stockage et \xe0 la bande passante, qui peut devenir prohibitif pour les projets plus importants. De plus, la gestion de Git LFS peut \xeatre fastidieuse, n\xe9cessitant des d\xe9veloppeurs d\'installer et de configurer le client LFS, de suivre des fichiers sp\xe9cifiques et de faire face \xe0 des conflits de fusion potentiels dus \xe0 la gestion s\xe9par\xe9e des fichiers volumineux du reste du d\xe9p\xf4t.\\n\\n## Pourquoi utiliser AWS CodeCommit pour stocker des fichiers volumineux dans Git\\n\\nAWS CodeCommit fournit une alternative convaincante pour stocker des fichiers volumineux dans les d\xe9p\xf4ts Git sans avoir besoin de Git LFS. CodeCommit est un service de contr\xf4le de source enti\xe8rement g\xe9r\xe9 qui s\'int\xe8gre parfaitement avec d\'autres services AWS, offrant une \xe9volutivit\xe9, une s\xe9curit\xe9 et une rentabilit\xe9 robustes. En tirant parti de CodeCommit, les d\xe9veloppeurs peuvent \xe9viter les frais g\xe9n\xe9raux suppl\xe9mentaires de gestion de Git LFS tout en b\xe9n\xe9ficiant de l\'infrastructure robuste d\'AWS et de son mod\xe8le de tarification \xe0 la carte.\\n\\n## Quelles sont les limitations d\'AWS CodeCommit par rapport \xe0 GitHub\\n\\nMalgr\xe9 ses avantages, AWS CodeCommit pr\xe9sente certaines limitations par rapport \xe0 GitHub. Le support communautaire \xe9tendu de GitHub, son riche \xe9cosyst\xe8me d\'int\xe9grations et ses fonctionnalit\xe9s avanc\xe9es telles que GitHub Actions et GitHub Pages ne sont peut-\xeatre pas enti\xe8rement reproduits dans CodeCommit. De plus, les d\xe9veloppeurs habitu\xe9s \xe0 l\'interface utilisateur et aux outils de collaboration de GitHub pourraient trouver que la transition vers CodeCommit n\xe9cessite une certaine adaptation.\\n\\n## Comment migrer un d\xe9p\xf4t Git LFS vers CodeCommit\\n\\nLa migration d\'un d\xe9p\xf4t Git LFS vers CodeCommit implique plusieurs \xe9tapes. Tout d\'abord, assurez-vous que tous les fichiers volumineux sont correctement suivis dans votre d\xe9p\xf4t Git LFS. Ensuite, clonez le d\xe9p\xf4t et supprimez la configuration de suivi Git LFS. Apr\xe8s cela, cr\xe9ez un nouveau d\xe9p\xf4t dans AWS CodeCommit et poussez-y votre d\xe9p\xf4t local. Une documentation d\xe9taill\xe9e et des scripts sont disponibles pour simplifier ce processus, assurant une transition en douceur sans perte de donn\xe9es ni interruption.\\n\\n## Une meilleure solution\\n\\nPour les \xe9quipes et projets fortement d\xe9pendants de Git LFS, explorer AWS CodeCommit comme alternative peut offrir des avantages significatifs. L\'int\xe9gration transparente de CodeCommit avec l\'\xe9cosyst\xe8me AWS, coupl\xe9e \xe0 sa nature rentable et \xe9volutive, en fait une option attrayante pour la gestion des fichiers volumineux dans les d\xe9p\xf4ts Git. En att\xe9nuant les d\xe9fis associ\xe9s \xe0 Git LFS, CodeCommit permet aux \xe9quipes de d\xe9veloppement de se concentrer sur la programmation et la collaboration, augmentant ainsi la productivit\xe9 et l\'innovation.\\n\\nEn conclusion, AWS CodeCommit offre une alternative viable, rentable et efficace au service de stockage de fichiers volumineux de GitHub. En tirant parti de l\'infrastructure robuste d\'AWS, les d\xe9veloppeurs peuvent g\xe9rer facilement les fichiers volumineux dans les d\xe9p\xf4ts Git, optimisant leurs flux de travail et r\xe9duisant les co\xfbts.\\n"},{"lang":"fr","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"V\xe9rifier la Tension et le Courant sur MacOS pour l\'Adaptateur d\'Alimentation","meta_title":"V\xe9rifier la Tension et le Courant sur MacOS pour l\'Adaptateur d\'Alimentation","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Adaptateur d\'Alimentation","Tension","Courant"],"categories":["MacOS"],"draft":false},"content":"\\nLorsque vous utilisez un MacBook, vous pouvez souhaiter v\xe9rifier la tension et le courant de l\'adaptateur secteur. Voici une m\xe9thode simple pour v\xe9rifier la tension et le courant de l\'adaptateur secteur sur MacOS.\\n\\nOuvrez Terminal.app et tapez la commande :\\n\\n`ioreg -l -n AppleSmartBattery -r | grep AppleRawAdapterDetails`\\n\\nVous obtiendrez les informations suivantes, incluant le courant et la tension :\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"fr","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Convertir rapidement des fichiers Markdown en PDF de style acad\xe9mique sur macOS","meta_title":"Convertir des fichiers Markdown en PDF de style acad\xe9mique sur macOS avec Pandoc","description":"D\xe9couvrez comment convertir des documents Markdown en PDF de style acad\xe9mique sur macOS en utilisant Pandoc et BasicTeX. Cette m\xe9thode rapide et simple est parfaite pour cr\xe9er des fichiers PDF professionnels pour les articles acad\xe9miques.","date":"2022-03-03T00:00:00.000Z","categories":["D\xe9veloppement de logiciels"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Article","Markdown","macOS"],"draft":false},"content":"\\nDans ce guide, je vais vous expliquer comment je convertis des documents Markdown en PDFs de style acad\xe9mique sur macOS en utilisant Pandoc et BasicTeX. Cette m\xe9thode est rapide et simple, parfaite pour cr\xe9er des fichiers PDF \xe0 l\'aspect professionnel pour vos articles acad\xe9miques.\\n\\n### \xc9tape 1 : Installer Pandoc et BasicTeX\\n\\nTout d\'abord, vous devez installer Pandoc et BasicTeX sur votre syst\xe8me macOS. Voici comment j\'ai proc\xe9d\xe9 :\\n\\n1. **Installer Pandoc** : Ouvrez Terminal et entrez la commande suivante pour installer Pandoc :\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Installer BasicTeX** : Comme MacTeX est assez volumineux, j\'ai opt\xe9 pour le plus petit package BasicTeX afin d\'\xe9conomiser de l\'espace. Ex\xe9cutez cette commande :\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Installer les paquets LaTeX courants** : Pour vous assurer d\'avoir les paquets n\xe9cessaires pour g\xe9n\xe9rer des PDFs, ex\xe9cutez ces commandes :\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### \xc9tape 2 : Pr\xe9parer votre fichier Markdown\\n\\nEnsuite, cr\xe9ez votre fichier Markdown (par exemple, `paper.md`). Voici comment j\'ai configur\xe9 mon fichier, y compris le titre, l\'auteur, la date et les informations de contact :\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### \xc9tape 3 : Convertir le Markdown en PDF avec Pandoc\\n\\nMaintenant, vous pouvez convertir votre fichier Markdown en PDF. J\'ai utilis\xe9 la commande suivante dans Terminal :\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nCette commande utilise le mod\xe8le LaTeX par d\xe9faut de Pandoc pour convertir le fichier Markdown en PDF de style acad\xe9mique, y compris les informations de contact de l\'auteur sous son nom.\\n\\n### Conseils suppl\xe9mentaires\\n\\n- **Mod\xe8le LaTeX personnalis\xe9** : Si vous avez besoin de formatages plus avanc\xe9s ou de styles sp\xe9cifiques, vous pouvez cr\xe9er ou t\xe9l\xe9charger un mod\xe8le LaTeX personnalis\xe9 et l\'utiliser avec Pandoc :\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Plus de m\xe9tadonn\xe9es** : Vous pouvez ajouter des informations suppl\xe9mentaires dans l\'en-t\xeate de m\xe9tadonn\xe9es YAML, telles qu\'un r\xe9sum\xe9 ou des mots-cl\xe9s, et les utiliser dans des mod\xe8les personnalis\xe9s.\\n\\n### Conclusion\\n\\nEn suivant ces \xe9tapes, vous pouvez facilement convertir des documents Markdown en PDFs de style acad\xe9mique sur macOS. Utiliser Pandoc et BasicTeX rend ce processus rapide et efficace, parfait pour g\xe9n\xe9rer des documents PDF professionnels. Que vous pr\xe9pariez des articles acad\xe9miques, des rapports techniques ou d\'autres documents formels, cette m\xe9thode fonctionne tr\xe8s bien. Inclure des informations de contact dans l\'en-t\xeate de m\xe9tadonn\xe9es ajoute une touche professionnelle \xe0 vos documents.\\n\\nJ\'esp\xe8re que ce guide vous sera utile ! Si vous avez des questions ou rencontrez des probl\xe8mes, n\'h\xe9sitez pas \xe0 me contacter. Bonne r\xe9daction !\\n"},{"lang":"fr","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Outils de Construction Electron `ERREUR Erreur ： \xc9chec de l\'ex\xe9cution de \\"choco install pywin32 --yes\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["\xc9lectron","Outils de Construction","PyWin32","Chocolatey","Win32"],"categories":["D\xe9veloppement de Logiciels"]},"content":"\\nLors de l\'utilisation des outils de construction Electron, vous pouvez rencontrer une erreur li\xe9e \xe0 l\'installation de pywin32 via Chocolatey. Cela peut \xeatre frustrant, surtout lorsqu\'il s\'agit d\'une d\xe9pendance requise pour votre projet. Voici une explication d\xe9taill\xe9e du probl\xe8me et des \xe9tapes potentielles pour le r\xe9soudre.\\n\\n### L\'Erreur\\n\\nLors de l\'initialisation d\'un projet Electron \xe0 l\'aide des outils de construction Electron, vous pouvez voir le message d\'erreur suivant :\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN Une erreur r\xe9parable est survenue\\n--> Une d\xe9pendance requise \\"pywin32\\" n\'a pas pu \xeatre localis\xe9e, elle doit probablement \xeatre install\xe9e.\\nVoulez-vous que les outils de construction essaient de r\xe9soudre ce probl\xe8me ? [y/n] : y\\n\\nEx\xe9cution de \\"choco install pywin32 --yes\\"\\nERROR Erreur : \xc9chec de l\'ex\xe9cution de \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nCette erreur se produit g\xe9n\xe9ralement parce que le script d\'installation du paquet pywin32 ne peut pas trouver les fichiers requis sur le serveur distant. Cela entra\xeene une erreur 404, indiquant que le fichier n\'est pas disponible \xe0 l\'URL sp\xe9cifi\xe9e.\\n\\n### Comprendre l\'Erreur\\n\\nLa partie cl\xe9 du message d\'erreur est :\\n\\n```bash\\nERROR: Le fichier distant n\'existe pas, n\'est pas autoris\xe9, ou est interdit pour l\'URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception en appelant \\"GetResponse\\" avec \\"0\\" argument(s) : \\"Le serveur distant a retourn\xe9 une erreur : (404) Non trouv\xe9.\\"\\n\\nCela indique que l\'URL de t\xe9l\xe9chargement pour pywin32 n\'est plus valide, ce qui signifie que Chocolatey ne peut pas r\xe9cup\xe9rer les fichiers d\'installation n\xe9cessaires.\\n\\n### \xc9tapes de d\xe9pannage\\n\\nVoici quelques \xe9tapes que vous pouvez suivre pour r\xe9soudre ce probl\xe8me :\\n\\n#### 1. V\xe9rifier l\'installation de Chocolatey\\n\\nAssurez-vous que Chocolatey est install\xe9 correctement et mis \xe0 jour vers la derni\xe8re version. Vous pouvez v\xe9rifier votre version de Chocolatey avec :\\n\\n```bash\\nchoco --version\\n```\\n\\nPour mettre \xe0 jour Chocolatey, utilisez :\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Installer pywin32 manuellement\\n\\n\xc9tant donn\xe9 que l\'installation automatique \xe9choue, essayez d\'installer pywin32 manuellement. Vous pouvez t\xe9l\xe9charger la version appropri\xe9e depuis la [page des versions officielles de pywin32 sur GitHub](https://github.com/mhammond/pywin32/releases) et l\'installer manuellement.\\n\\n#### 3. Modifier le script d\'installation\\n\\nSi vous avez le contr\xf4le sur le script des outils de construction d\'Electron, vous pouvez le modifier pour pointer vers une URL valide pour pywin32 ou g\xe9rer le processus d\'installation manuelle.\\n\\n#### 4. Utiliser un gestionnaire de paquets alternatif\\n\\nSi Chocolatey continue d\'\xe9chouer, envisagez d\'utiliser un gestionnaire de paquets alternatif comme pip pour les paquets Python :\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Exemple d\'installation manuelle de pywin32\\n\\n1. T\xe9l\xe9chargez l\'installateur appropri\xe9 de pywin32 depuis les [versions officielles sur GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Ex\xe9cutez l\'installateur et suivez les instructions d\'installation.\\n3. V\xe9rifiez l\'installation en ex\xe9cutant un script Python simple qui importe pywin32 :\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nRencontrer l\'erreur \xab Failed to run `choco install pywin32 --yes` \xbb peut \xeatre un obstacle dans votre processus de d\xe9veloppement. Cependant, en comprenant la cause profonde et en suivant les \xe9tapes d\xe9crites ci-dessus, vous pouvez surmonter ce probl\xe8me et continuer avec la configuration de votre projet Electron.\\n"},{"lang":"fr","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Les secrets de la conception ASIC enti\xe8rement personnalis\xe9e pour le minage de Bitcoin et de cryptomonnaies","date":"2022-05-30T00:00:00.000Z","categories":["Semi-conducteurs","Bitcoin","Cryptomonnaie","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Minage","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## R\xe9sum\xe9\\n\\nDans le monde comp\xe9titif du minage de cryptomonnaies, l\'efficacit\xe9 \xe9nerg\xe9tique, les performances de hashrate et la fiabilit\xe9 sont primordiales. Cet article explore la conception ASIC (circuit int\xe9gr\xe9 sp\xe9cifique \xe0 une application) enti\xe8rement personnalis\xe9e de premier ordre, r\xe9v\xe9lant les secrets de l\'industrie et les m\xe9thodologies expertes qui propulsent le minage de Bitcoin et de cryptomonnaies \xe0 haute performance. \xc9crit par un expert en technologie d\'une des principales entreprises de minage ASIC, cet article s\'appuie sur des techniques de conception avanc\xe9es, une disposition physique m\xe9ticuleuse et des processus de v\xe9rification complets pour d\xe9montrer les capacit\xe9s exceptionnelles des ASIC enti\xe8rement personnalis\xe9s dans l\'optimisation de l\'efficacit\xe9 et de la rentabilit\xe9 du minage.\\n\\n## Introduction\\n\\nL\'\xe9volution du minage de cryptomonnaies, en particulier le minage de Bitcoin, a vu une transition de l\'utilisation de CPU, FPGA et GPU \xe0 usage g\xe9n\xe9ral vers des ASIC sp\xe9cialis\xe9s. Ces ASIC offrent des performances et une efficacit\xe9 \xe9nerg\xe9tique in\xe9gal\xe9es. La conception ASIC enti\xe8rement personnalis\xe9e repr\xe9sente le sommet de cette \xe9volution, permettant des solutions sur mesure qui r\xe9pondent aux exigences sp\xe9cifiques des op\xe9rations de minage.\\n\\nUne grande partie de la litt\xe9rature existante sur la conception ASIC pour le minage de cryptomonnaies provient du milieu acad\xe9mique ou d\'entreprises non li\xe9es au minage, ce qui manque souvent de pertinence pratique. \xc0 ce jour, seules quelques entreprises, principalement chinoises (par exemple, MicroBT, Bitmain), ont r\xe9ussi \xe0 d\xe9velopper des ASIC de minage de Bitcoin commercialisables. Cet article vise \xe0 combler cette lacune en fournissant des informations tir\xe9es de la pratique industrielle r\xe9elle, offrant une perspective ancr\xe9e dans les r\xe9alit\xe9s du secteur minier.\\n\\nEn tant que professionnel avec plus de dix ans d\'exp\xe9rience dans l\'industrie technologique, l\'auteur de cet article a d\xe9velopp\xe9 le meilleur ASIC Miner Bitcoin au monde (WhatsMiner), les Miners LTC/DOGE et ETH, et a jou\xe9 un r\xf4le cl\xe9 dans des entreprises comme MicroBT, BTC.COM, et d\'autres soci\xe9t\xe9s sans usine cot\xe9es en bourse. Il a occup\xe9 des postes cl\xe9s dans des entreprises cot\xe9es au NASDAQ, HKSE et NYSE. Avec une vaste exp\xe9rience dans l\'\xe9tablissement de partenariats avec TSMC, Texas Instruments, ARM et Intel, il apporte une richesse de connaissances et d\'expertise pratique dans le domaine de la conception ASIC personnalis\xe9e pour le minage de Bitcoin et de cryptomonnaies.\\n\\n## M\xe9thodologie et Flux de Conception\\n\\n### Philosophie de Conception\\n\\nNotre approche de la conception ASIC enti\xe8rement personnalis\xe9e est guid\xe9e par un objectif de maximisation de la PPA (Puissance, Performance et Surface), en particulier dans des conditions de fonctionnement \xe0 basse tension. Cette section d\xe9crit notre philosophie et m\xe9thodologie de conception :\\n\\n1. **Architecture Pipeline** : Exploiter les avantages inh\xe9rents des structures pipeline pour les algorithmes de minage, caract\xe9ris\xe9s par des registres et des \xe9tapes de logique combinatoire. En utilisant une architecture pipeline, nous pouvons g\xe9rer efficacement les op\xe9rations \xe0 haute fr\xe9quence requises pour le minage de cryptomonnaie.\\n2. **Netlist et Placement Manuels** : Script d\xe9taill\xe9 pour la cr\xe9ation de la netlist et placement manuel des cellules afin d\'optimiser les chemins critiques. Cela permet un contr\xf4le pr\xe9cis du timing et r\xe9duit les effets parasites.\\n3. **Biblioth\xe8ques de Cellules Personnalis\xe9es** : D\xe9velopper des cellules sp\xe9cialis\xe9es avec des nombres de transistors optimis\xe9s et des caract\xe9ristiques dynamiques d\'\xe9conomie d\'\xe9nergie. Les cellules personnalis\xe9es sont con\xe7ues pour fonctionner \xe0 des tensions aussi basses que possible, garantissant une consommation d\'\xe9nergie minimale.\\n\\n### Atteindre les B\xe9n\xe9fices de la PPA\\n\\nStrat\xe9gies d\xe9taill\xe9es pour atteindre les b\xe9n\xe9fices de la PPA gr\xe2ce \xe0 une conception personnalis\xe9e :\\n\\n1. **Conception de Registres Personnalis\xe9s** : Utiliser des registres multi-bits et des conceptions bas\xe9es sur des verrouillages pour r\xe9duire la puissance d\'horloge et am\xe9liorer l\'emprunt de timing. Les registres multi-bits minimisent la consommation d\'\xe9nergie de l\'arbre d\'horloge et r\xe9duisent la surface globale.\\n2. **Placement Manuel** : R\xe9duire la longueur des fils et \xe9quilibrer les temps de configuration et de maintien pour am\xe9liorer la performance globale. Le placement manuel permet un meilleur contr\xf4le des d\xe9lais d\'interconnexion et des diaphonies, am\xe9liorant l\'int\xe9grit\xe9 du signal et r\xe9duisant la consommation d\'\xe9nergie.\\n3. **Conception de Cellules Optimis\xe9e** : Les cellules personnalis\xe9es sont con\xe7ues pour fonctionner \xe0 des tensions plus basses, minimisant la consommation d\'\xe9nergie dynamique et maximisant l\'efficacit\xe9. En adaptant les conceptions des cellules aux besoins sp\xe9cifiques des algorithmes de minage, nous pouvons obtenir des am\xe9liorations significatives en termes de performance.\\n\\n### Fiabilit\xe9 Sous Basse Tension\\n\\nAssurer la fiabilit\xe9 de la logique de timing con\xe7ue sur mesure \xe0 basse tension implique :\\n\\n1. **Simulation Pr\xe9cise** : Simulations au niveau du circuit pour valider le comportement des cellules personnalis\xe9es dans des conditions sp\xe9cifiques. Des outils comme SPICE sont utilis\xe9s pour des simulations \xe9lectriques d\xe9taill\xe9es afin de garantir que les cellules fonctionnent correctement sous tous les coins PVT (Processus, Tension, Temp\xe9rature).\\n2. **Coh\xe9rence dans le Placement** : Placement manuel pour assurer l\'uniformit\xe9 et r\xe9duire la variabilit\xe9. En contr\xf4lant la disposition physique, nous pouvons minimiser l\'impact des variations de processus et garantir des performances constantes.\\n3. **Calibration PVT Pr\xe9cise** : V\xe9rification par rapport aux variations de processus, de tension et de temp\xe9rature. Des tests et une calibration approfondis sont effectu\xe9s pour garantir la robustesse de la conception dans diff\xe9rentes conditions de fonctionnement.\\n\\n## \xc9tudes de cas et r\xe9sultats\\n\\nPr\xe9sentation de donn\xe9es r\xe9elles et d\'\xe9tudes de cas provenant de tape-outs complets de masques :\\n\\n| Projet | Nœud de proc\xe9d\xe9 | Efficacit\xe9 Tension/Puissance | Algorithme |\\n| ------- | ------------ | ------------------------ | --------- |\\n| SC      | TSMC 28nm    | 0,45V, 257J/T            | Blake2b   |\\n| DCR     | TSMC 28nm    | 0,45V, 150J/T            | Blake256  |\\n| DASH    | TSMC 16nm    | 0,38V, 6,2J/G            | X11       |\\n| BTC     | TSMC 16nm    | 0,38V, 65J/T             | SHA-256d  |\\n| BTC     | TSMC 7nm     | 0,30V, 37J/T             | SHA-256d  |\\n| BTC     | Samsung 8nm  | 0,31V, 45J/T             | SHA-256d  |\\n| BTC     | SMIC N+1     | 0,30V, 35J/T             | SHA-256d  |\\n\\nCes r\xe9sultats d\xe9montrent les gains substantiels en efficacit\xe9 et en performance r\xe9alisables gr\xe2ce \xe0 notre approche de conception personnalis\xe9e.\\n\\n## Int\xe9gration et v\xe9rification\\n\\n### Validation des cellules mixtes\\n\\n- **Int\xe9gration de cellules personnalis\xe9es** : Les cellules personnalis\xe9es sont int\xe9gr\xe9es avec des cellules standard de TSMC et d\'autres fonderies, assurant compatibilit\xe9 et performance. Les cellules personnalis\xe9es sont caract\xe9ris\xe9es et valid\xe9es pour correspondre aux exigences de la biblioth\xe8que de cellules standard, permettant une int\xe9gration transparente.\\n- **Strat\xe9gies de validation** : Les strat\xe9gies pour assurer une compatibilit\xe9 et une performance sans faille incluent des v\xe9rifications d\xe9taill\xe9es DRC (Design Rule Check) et LVS (Layout Versus Schematic), ainsi que des analyses de timing et de puissance \xe0 l\'aide d\'outils EDA (Electronic Design Automation) standard de l\'industrie.\\n\\n### Co-conception num\xe9rique et analogique\\n\\n- **Techniques d\'int\xe9gration** : Int\xe9gration des composants num\xe9riques et analogiques pour optimiser les performances globales de la puce. Des techniques telles que la v\xe9rification mixte de signaux et la co-simulation sont utilis\xe9es pour garantir une int\xe9gration et une fonctionnalit\xe9 correctes.\\n- **M\xe9thodologies de v\xe9rification** : Les m\xe9thodologies pour assurer la robustesse dans diff\xe9rentes conditions op\xe9rationnelles incluent l\'analyse de coin, les simulations Monte Carlo et la v\xe9rification de la fiabilit\xe9 pour aborder le vieillissement et l\'\xe9lectromigration.\\n\\n## Conclusion\\n\\nLa conception ASIC enti\xe8rement personnalis\xe9e offre des avantages significatifs pour le minage de Bitcoin et de cryptomonnaies, fournissant des performances, une efficacit\xe9 \xe9nerg\xe9tique et une fiabilit\xe9 in\xe9gal\xe9es. En d\xe9voilant les secrets de la conception ASIC personnalis\xe9e de haut niveau, ce document met en lumi\xe8re les m\xe9thodologies et les innovations qui distinguent les leaders de l\'industrie. Alors que le minage de cryptomonnaies continue d\'\xe9voluer, les ASIC personnalis\xe9s joueront un r\xf4le crucial dans la conduite de la prochaine g\xe9n\xe9ration de mat\xe9riel de minage \xe0 haute efficacit\xe9 et haute performance.\\n\\n[Version PDF de l\'article](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"fr","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Obtenir l\'ID de commit actuel de Git et le mettre \xe0 jour dans package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["D\xe9veloppement logiciel"]},"content":"\\nLors du d\xe9veloppement d\'un projet Node.js, vous pouvez vouloir suivre l\'ID de commit actuel de votre d\xe9p\xf4t Git. Cette information peut \xeatre utile pour le d\xe9bogage, la gestion des versions ou les d\xe9ploiements. Une fa\xe7on d\'y parvenir est de mettre \xe0 jour le fichier `package.json` avec l\'ID de commit actuel pendant le processus de build. Cet article vous guidera \xe0 travers les \xe9tapes pour obtenir l\'ID de commit actuel de Git et le mettre \xe0 jour dans le fichier `package.json` en utilisant Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"fr","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrer un d\xe9p\xf4t GitHub LFS (Git Large File Storage) vers AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["D\xe9veloppement logiciel"]},"content":"\\nJ\'ai r\xe9cemment migr\xe9 l\'un de mes d\xe9p\xf4ts GitHub, qui utilise Git Large File Storage (LFS), vers AWS CodeCommit. J\'ai pens\xe9 partager le processus avec vous au cas o\xf9 vous chercheriez \xe0 faire quelque chose de similaire. Voici un guide \xe9tape par \xe9tape bas\xe9 sur mon exp\xe9rience.\\n\\n## Pr\xe9requis\\n\\nAvant de commencer, assurez-vous d\'avoir install\xe9 ces outils :\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Guide \xe9tape par \xe9tape\\n\\n### 1. Cloner le d\xe9p\xf4t\\n\\nTout d\'abord, clonez votre d\xe9p\xf4t GitHub en utilisant l\'option `--mirror`. Cela cr\xe9e un clone nu du d\xe9p\xf4t, incluant toutes les branches et tags.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. V\xe9rifier les fichiers LFS\\n\\nEnsuite, listez tous les fichiers g\xe9r\xe9s par Git LFS pour vous assurer que tout est en place.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nVous devriez voir quelque chose comme ceci :\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrer les fichiers LFS\\n\\nMaintenant, exportez les fichiers LFS. Cette \xe9tape permet de s\'assurer qu\'ils font partie de l\'historique de votre d\xe9p\xf4t.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nVous verrez des messages de progression comme ceux-ci :\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster    98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Nettoyer LFS\\n\\nSupprimez les informations de suivi Git LFS et d\xe9sinstallez Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Pousser vers AWS CodeCommit\\n\\nEnfin, poussez votre d\xe9p\xf4t vers AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nC\'est tout ! En suivant ces \xe9tapes, j\'ai r\xe9ussi \xe0 migrer mon d\xe9p\xf4t GitHub LFS vers AWS CodeCommit. Les gros fichiers et l\'historique du d\xe9p\xf4t ont \xe9t\xe9 parfaitement pr\xe9serv\xe9s.\\n\\n## Conclusion\\n\\nMigrer un d\xe9p\xf4t GitHub qui utilise Git LFS vers AWS CodeCommit est assez simple si vous suivez les bonnes \xe9tapes. Si vous avez des questions ou rencontrez des probl\xe8mes, la [documentation AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) et la [documentation Git LFS](https://git-lfs.github.com/) sont d\'excellentes ressources.\\n\\nJ\'esp\xe8re que ce guide vous sera utile. Bon codage !\\n"},{"lang":"fr","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"R\xe9initialiser/Restaurer tous les sous-r\xe9pertoires de Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Contr\xf4le de version"],"categories":["D\xe9veloppement logiciel"]},"content":"\\nG\xe9rer efficacement un d\xe9p\xf4t Git n\xe9cessite souvent de r\xe9initialiser ou de restaurer des sous-r\xe9pertoires pour maintenir une base de code propre et fonctionnelle. Ce guide fournit une approche concise et \xe9tape par \xe9tape pour r\xe9initialiser ou restaurer tous les sous-r\xe9pertoires d\'un d\xe9p\xf4t Git.\\n\\n## R\xe9initialisation des sous-r\xe9pertoires\\n\\nLa commande Git suivante supprime tous les fichiers et r\xe9pertoires non suivis du d\xe9p\xf4t. Cela est utile pour nettoyer les fichiers inutiles avant d\'effectuer une r\xe9initialisation ou une restauration.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### D\xe9composition de la commande :\\n\\n- `-x` : Supprimer tous les fichiers non suivis, y compris ceux ignor\xe9s par `.gitignore`.\\n- `-f` : Forcer la suppression des fichiers.\\n- `-d` : Supprimer les r\xe9pertoires non suivis.\\n- `-- .` : Appliquer la commande au r\xe9pertoire courant et \xe0 tous les sous-r\xe9pertoires.\\n\\n## Restauration des sous-r\xe9pertoires\\n\\nPour restaurer tous les fichiers du d\xe9p\xf4t \xe0 leur \xe9tat de dernier commit, utilisez la commande suivante :\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### D\xe9composition de la commande :\\n\\n- `{HEAD OR BRANCH}` : Remplacer par `HEAD` pour r\xe9initialiser au dernier commit ou sp\xe9cifier un nom de branche pour r\xe9initialiser \xe0 une branche sp\xe9cifique.\\n- `-- .` : Appliquer la commande au r\xe9pertoire courant et \xe0 tous les sous-r\xe9pertoires.\\n\\nEn utilisant ces commandes, vous pouvez vous assurer que votre d\xe9p\xf4t est exempt de fichiers ind\xe9sirables et que tous les fichiers sont restaur\xe9s \xe0 leur \xe9tat de commit. Ce processus aide \xe0 maintenir une base de code propre et organis\xe9e, facilitant ainsi la collaboration et le d\xe9veloppement.\\n\\nN\'h\xe9sitez pas \xe0 personnaliser ce guide selon vos besoins et pr\xe9f\xe9rences sp\xe9cifiques. Pour des op\xe9rations Git plus avanc\xe9es, consultez la [documentation officielle de Git](https://git-scm.com/doc).\\n"},{"lang":"fr","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Syst\xe8me de Test de M\xe9moire DDR3, DDR4, LP-DDR3 et LP-DDR4 \xe0 Tr\xe8s Bas Co\xfbt","description":"D\xe9couvrez un syst\xe8me de test de m\xe9moire \xe0 tr\xe8s bas co\xfbt pour les technologies DDR3, DDR4, LP-DDR3 et LP-DDR4. Propos\xe9 \xe0 environ 200 000 USD, il offre des tests \xe0 haute vitesse, une grande polyvalence, des fonctionnalit\xe9s avanc\xe9es et une faible consommation d\'\xe9nergie. Parfait pour les entreprises \xe0 la recherche de solutions de test de m\xe9moire \xe9conomiques et fiables.","date":"2024-06-01T00:00:00.000Z","categories":["Semi-conducteurs"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Syst\xe8me de Test de M\xe9moire"],"draft":false},"content":"\\nSi vous \xeates comme moi, toujours \xe0 la recherche de solutions \xe9conomiques sans compromettre la qualit\xe9, vous allez adorer ce que j\'ai \xe0 partager aujourd\'hui. Dans notre monde technologique en perp\xe9tuel mouvement, il est crucial de s\'assurer que la m\xe9moire de nos appareils est \xe0 la hauteur. Les options haut de gamme comme le T5503/T5503HS2 sont fantastiques, mais elles sont accompagn\xe9es d\'un prix \xe9lev\xe9. Heureusement, Zeeis a lanc\xe9 un syst\xe8me de test de m\xe9moire ultra-\xe9conomique qui ne sacrifie pas la performance.\\n\\n## Pourquoi c\'est important\\n\\nLorsque j\'ai entendu parler du syst\xe8me de test de m\xe9moire de Zeeis pour la premi\xe8re fois, j\'ai \xe9t\xe9 intrigu\xe9. Ce syst\xe8me est con\xe7u pour g\xe9rer les technologies de m\xe9moire DDR3, DDR4, LP-DDR3 et LP-DDR4. Que vous travailliez avec des syst\xe8mes plus anciens ou la technologie la plus r\xe9cente, ce syst\xe8me r\xe9pond \xe0 vos besoins.\\n\\n### Test \xe0 haute vitesse\\n\\nL\'une des caract\xe9ristiques remarquables est sa capacit\xe9 \xe0 supporter des taux de transfert de donn\xe9es allant de 800 \xe0 3200 MT/s pour le DDR3 et le DDR4. Il peut \xe9valuer les modules de m\xe9moire \xe0 des vitesses d\'horloge allant jusqu\'\xe0 1600 MHz. Cela signifie des tests approfondis et fiables, garantissant que vos appareils fonctionnent au mieux.\\n\\n### Polyvalence\\n\\nLa polyvalence de ce syst\xe8me est r\xe9volutionnaire. Il prend en charge plusieurs standards de m\xe9moire, le rendant adapt\xe9 \xe0 une large gamme d\'applications, des \xe9lectroniques grand public \xe0 l\'informatique haute performance. De plus, il est \xe9volutif. \xc0 mesure que de nouvelles technologies de m\xe9moire \xe9mergent, ce syst\xe8me peut \xeatre facilement mis \xe0 jour pour les supporter.\\n\\n### Rentabilit\xe9\\n\\nParlons maintenant du prix. \xc0 environ 200 000 USD, ce syst\xe8me offre un excellent retour sur investissement. Il est suffisamment abordable pour les petites et moyennes entreprises, garantissant des capacit\xe9s de test de premier ordre sans se ruiner.\\n\\n### Caract\xe9ristiques avanc\xe9es\\n\\nLe syst\xe8me est dot\xe9 d\'algorithmes de test avanc\xe9s, y compris un g\xe9n\xe9rateur de motifs algorithmiques int\xe9gr\xe9 (ALPG). Cela garantit une \xe9valuation pr\xe9cise et fiable de la m\xe9moire, de sorte que chaque module r\xe9pond \xe0 des normes de performance strictes.\\n\\n### Faible consommation d\'\xe9nergie\\n\\nCe qui est \xe9galement impressionnant, c\'est sa faible consommation d\'\xe9nergie. Cela s\'aligne avec les tendances observ\xe9es dans les technologies de m\xe9moire LP-DDR3 et LP-DDR4. En fonctionnant \xe0 des tensions plus basses, il r\xe9duit non seulement les co\xfbts \xe9nerg\xe9tiques mais aussi la production thermique, ce qui en fait un choix \xe9cologique.\\n\\n## Pourquoi choisir Zeeis ?\\n\\n### Scalabilit\xe9\\n\\nLe syst\xe8me de Zeeis est con\xe7u pour \xeatre \xe9volutif. \xc0 mesure que de nouvelles technologies de m\xe9moire \xe9mergent, le syst\xe8me peut \xeatre facilement mis \xe0 jour, garantissant une utilisation \xe0 long terme et r\xe9duisant le besoin de remplacements fr\xe9quents.\\n\\n### Support et Documentation\\n\\nUn autre grand avantage est le support et la documentation \xe9tendus de Zeeis. Que vous soyez un professionnel chevronn\xe9 ou novice en mati\xe8re de test de m\xe9moire, leurs guides d\xe9taill\xe9s et leur service client r\xe9actif assurent une exp\xe9rience fluide.\\n\\n### R\xe9pondre aux exigences du march\xe9\\n\\nAvec la demande croissante de m\xe9moire haute vitesse, allant des smartphones aux centres de donn\xe9es, disposer d\'une solution de test de m\xe9moire fiable et rentable est essentiel. Le syst\xe8me de Zeeis r\xe9pond \xe0 ces exigences, garantissant que vos produits sont pr\xeats pour le march\xe9 et fonctionnent parfaitement dans des applications r\xe9elles.\\n\\n## Conclusion\\n\\nEn r\xe9sum\xe9, le syst\xe8me de test de m\xe9moire DDR3, DDR4, LP-DDR3 et LP-DDR4 ultra-\xe9conomique de Zeeis est une option fantastique pour ceux d\'entre nous qui ont besoin de solutions de test de m\xe9moire fiables, polyvalentes et abordables. Il offre des performances \xe9lev\xe9es \xe0 une fraction du co\xfbt des autres syst\xe8mes haut de gamme, permettant aux entreprises de maintenir des standards \xe9lev\xe9s sans se ruiner.\\n\\nSi vous \xeates int\xe9ress\xe9 par l\'am\xe9lioration de vos capacit\xe9s de test avec un syst\xe8me con\xe7u pour l\'avenir de la technologie de m\xe9moire, n\'h\xe9sitez pas \xe0 me contacter pour plus d\'informations \xe0 [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nBon test !\\n"},{"lang":"fr","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo doit appartenir \xe0 uid 0 et avoir le bit setuid activ\xe9 sur Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nSi vous rencontrez le message d\'erreur \xab /usr/bin/sudo must be owned by uid 0 and have the setuid bit set \xbb sur Ubuntu 20.04, suivez ces \xe9tapes pour r\xe9soudre le probl\xe8me.\\n\\n1. Pendant le processus de d\xe9marrage, appuyez sur la touche ‘ESC’ pour acc\xe9der au menu GRUB.\\n\\n![\xc9cran GRUB](/images/content/wx20211008-210752.png \\"\xc9cran GRUB\\")\\n\\n2. S\xe9lectionnez la premi\xe8re option, \xab Ubuntu \xbb, et appuyez sur la touche ‘e’ pour modifier les param\xe8tres de d\xe9marrage.\\n\\n![Modifier les param\xe8tres de d\xe9marrage](/images/content/wx20211008-210841.png \\"Modifier les param\xe8tres de d\xe9marrage\\")\\n\\n3. Ajoutez la cha\xeene suivante \xe0 la ligne commen\xe7ant par ‘linux’ pour d\xe9marrer en mode de r\xe9cup\xe9ration :\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Une fois en mode de r\xe9cup\xe9ration, ex\xe9cutez la commande suivante pour restaurer les permissions et la propri\xe9t\xe9 correctes de `/usr/bin/sudo` :\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nCette commande d\xe9finit les permissions n\xe9cessaires et s\'assure que `sudo` est poss\xe9d\xe9 par l\'utilisateur root avec le bit setuid activ\xe9.\\n\\nEn suivant ces \xe9tapes, vous devriez pouvoir r\xe9soudre le probl\xe8me et restaurer le bon fonctionnement de la commande `sudo` sur votre syst\xe8me Ubuntu.\\n\\n---\\n"},{"lang":"ru","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： бесплатная альтернатива GitHub Large File Storage (Git LFS)","description":"Узнайте, как AWS CodeCommit является экономичной и эффективной альтернативой GitHub Large File Storage (Git LFS). В этой статье рассматриваются ограничения Git LFS, преимущества использования AWS CodeCommit для хранения больших файлов и предоставляется пошаговое руководство по переходу с Git LFS на CodeCommit. Улучшите ваш рабочий процесс разработки с помощью масштабируемой и безопасной инфраструктуры AWS.","date":"2022-02-09T00:00:00.000Z","author":"Тан Шуай","tags":["AWS","Git","GitHub","LFS"],"categories":["Разработка программного обеспечения"],"draft":false},"content":"\\nAWS CodeCommit предлагает надёжную альтернативу службе Large File Storage (Git LFS) от GitHub, предоставляя эффективное решение для управления большими файлами в ваших Git-репозиториях.\\n\\n## Почему стоит пересмотреть использование Git LFS\\n\\nХотя Git LFS является популярным выбором для работы с большими файлами в Git-репозиториях, у него есть свои ограничения и проблемы. Git LFS требует дополнительной настройки и управления, что может усложнить рабочий процесс разработки. Кроме того, затраты на хранение и пропускную способность, связанные с Git LFS, могут быстро увеличиваться, особенно для проектов с многочисленными большими файлами или при интенсивном сотрудничестве.\\n\\n## Почему служба Large File Storage от GitHub не является идеальной\\n\\nСлужба Large File Storage от GitHub, хотя и полезна, имеет свои недостатки. Основная проблема — это стоимость, связанная с хранением и пропускной способностью, которая может стать непомерной для больших проектов. Кроме того, управление Git LFS может быть затруднительным, требуя от разработчиков установки и настройки клиента LFS, отслеживания конкретных файлов и решения возможных конфликтов слияния, возникающих из-за обработки больших файлов отдельно от остальной части репозитория.\\n\\n## Почему стоит использовать AWS CodeCommit для хранения больших файлов в Git\\n\\nAWS CodeCommit предлагает убедительную альтернативу для хранения больших файлов в Git-репозиториях без необходимости использования Git LFS. CodeCommit — это полностью управляемая служба контроля версий, которая бесшовно интегрируется с другими сервисами AWS, предлагая надёжную масштабируемость, безопасность и экономичность. Используя CodeCommit, разработчики могут избежать дополнительной нагрузки, связанной с управлением Git LFS, и воспользоваться надёжной инфраструктурой AWS и моделью оплаты по мере использования.\\n\\n## Каковы ограничения AWS CodeCommit по сравнению с GitHub\\n\\nНесмотря на свои преимущества, AWS CodeCommit имеет некоторые ограничения по сравнению с GitHub. Обширная поддержка сообщества GitHub, богатая экосистема интеграций и передовые функции, такие как GitHub Actions и GitHub Pages, могут быть не полностью воспроизведены в CodeCommit. Кроме того, разработчики, привыкшие к пользовательскому интерфейсу и инструментам совместной работы GitHub, могут столкнуться с необходимостью адаптации при переходе на CodeCommit.\\n\\n## Как перенести репозиторий Git LFS в CodeCommit\\n\\nПеренос репозитория Git LFS в CodeCommit включает несколько шагов. Сначала убедитесь, что все большие файлы правильно отслеживаются в вашем репозитории Git LFS. Затем клонируйте репозиторий и удалите конфигурацию отслеживания Git LFS. После этого создайте новый репозиторий в AWS CodeCommit и отправьте в него ваш локальный репозиторий. Подробная документация и скрипты доступны для упрощения этого процесса, обеспечивая плавный переход без потери данных или сбоев.\\n\\n## Лучшее решение\\n\\nДля команд и проектов, сильно зависящих от Git LFS, изучение AWS CodeCommit как альтернативы может предложить значительные преимущества. Бесшовная интеграция CodeCommit с экосистемой AWS, в сочетании с его экономичностью и масштабируемостью, делает его привлекательным вариантом для управления большими файлами в Git-репозиториях. Устраняя проблемы, связанные с Git LFS, CodeCommit позволяет командам разработчиков сосредоточиться на кодировании и сотрудничестве, повышая производительность и стимулируя инновации.\\n\\nВ заключение, AWS CodeCommit предоставляет жизнеспособную, экономичную и эффективную альтернативу службе хранения больших файлов GitHub. Используя надежную инфраструктуру AWS, разработчики могут легко управлять большими файлами в Git-репозиториях, оптимизируя свои рабочие процессы и снижая накладные расходы.\\n"},{"lang":"ru","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Проверка напряжения и тока на MacOS для адаптера питания","meta_title":"Проверка напряжения и тока на MacOS для адаптера питания","date":"2022-02-14T00:00:00.000Z","author":"Тан Шуай","tags":["MacOS","Адаптер питания","Напряжение","Ток"],"categories":["MacOS"],"draft":false},"content":"\\nКогда вы используете MacBook, вам может понадобиться проверить напряжение и ток адаптера питания. Вот простой способ проверить напряжение и ток адаптера питания на MacOS.\\n\\nОткройте Terminal.app и введите команду:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nВы получите следующую информацию, включая ток и напряжение:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"ru","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Быстрое преобразование Markdown в PDF в академическом стиле на macOS","meta_title":"Преобразование Markdown в PDF в академическом стиле на macOS с помощью Pandoc","description":"Узнайте, как преобразовать документы Markdown в PDF в академическом стиле на macOS с использованием Pandoc и BasicTeX. Этот быстрый и простой метод идеально подходит для создания профессиональных PDF файлов для академических работ.","date":"2022-03-03T00:00:00.000Z","categories":["Разработка программного обеспечения"],"author":"Тан Шуай","tags":["Pandoc","LaTeX","PDF","Статья","Markdown","macOS"],"draft":false},"content":"\\nВ этом руководстве я покажу вам, как я конвертирую документы Markdown в PDF в академическом стиле на macOS с помощью Pandoc и BasicTeX. Этот метод быстрый и простой, идеально подходит для создания профессионально выглядящих PDF файлов для ваших научных работ.\\n\\n### Шаг 1: Установка Pandoc и BasicTeX\\n\\nСначала вам нужно установить Pandoc и BasicTeX на вашу систему macOS. Вот как я это сделал:\\n\\n1. **Установите Pandoc**: Откройте Терминал и введите следующую команду для установки Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Установите BasicTeX**: Поскольку MacTeX довольно большой, я выбрал меньший пакет BasicTeX, чтобы сэкономить место. Выполните эту команду:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Установите основные пакеты LaTeX**: Чтобы убедиться, что у вас есть необходимые пакеты для создания PDF, выполните следующие команды:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Шаг 2: Подготовьте ваш файл Markdown\\n\\nЗатем создайте ваш файл Markdown (например, `paper.md`). Вот как я настроил свой файл, включая заголовок, автора, дату и контактную информацию:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Шаг 3: Конвертируйте Markdown в PDF с помощью Pandoc\\n\\nТеперь вы можете конвертировать ваш файл Markdown в PDF. Я использовал следующую команду в Терминале:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nЭта команда использует стандартный шаблон LaTeX от Pandoc для конвертации файла Markdown в PDF в академическом стиле, включая контактную информацию автора под его именем.\\n\\n### Дополнительные советы\\n\\n- **Пользовательский шаблон LaTeX**: Если вам нужны более продвинутые форматы или специфические стили, вы можете создать или скачать пользовательский шаблон LaTeX и использовать его с Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **Больше метаданных**: Вы можете добавить дополнительную информацию в заголовок метаданных YAML, такую как аннотацию или ключевые слова, и использовать их в пользовательских шаблонах.\\n\\n### Заключение\\n\\nСледуя этим шагам, вы легко сможете конвертировать документы Markdown в PDF в академическом стиле на macOS. Использование Pandoc и BasicTeX делает этот процесс быстрым и эффективным, идеально подходящим для создания профессиональных PDF документов. Независимо от того, готовите ли вы научные работы, технические отчеты или другие формальные документы, этот метод отлично работает. Включение контактной информации в заголовок метаданных придаёт вашим документам профессиональный вид.\\n\\nНадеюсь, что это руководство окажется для вас полезным! Если у вас возникнут вопросы или проблемы, не стесняйтесь обращаться. Удачи в написании!\\n"},{"lang":"ru","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Инструменты сборки Electron `ОШИБКА Error： Не удалось выполнить \\\\\\"choco install pywin32 --yes\\\\\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Тан Шуай","tags":["Electron","Инструменты сборки","PyWin32","Chocolatey","Win32"],"categories":["Разработка программного обеспечения"]},"content":"\\nПри работе с инструментами сборки Electron вы можете столкнуться с ошибкой, связанной с установкой pywin32 через Chocolatey. Это может быть неприятно, особенно если эта зависимость необходима для вашего проекта. Ниже приводится подробное объяснение проблемы и возможные шаги для ее решения.\\n\\n### Ошибка\\n\\nПри инициализации проекта Electron с использованием инструментов сборки Electron вы можете увидеть следующее сообщение об ошибке:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN A fixable error has occurred\\n--> A required dependency \\"pywin32\\" could not be located, it probably has to be installed.\\nDo you want build-tools to try fix this for you? [y/n]: y\\n\\nRunning \\"choco install pywin32 --yes\\"\\nERROR Error: Failed to run \\"choco install pywin32 --yes\\"\\n    at spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    at fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    at maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    at whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    at checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    at Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    at Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    at Module.load (internal/modules/cjs/loader.js:937:32)\\n    at Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nЭта ошибка обычно возникает из-за того, что скрипт установки пакета pywin32 не может найти необходимые файлы на удаленном сервере. Это приводит к ошибке 404, указывающей на то, что файл недоступен по указанному URL.\\n\\n### Понимание ошибки\\n\\nКлючевая часть сообщения об ошибке:\\n\\n```bash\\nERROR: The remote file either doesn\'t exist, is unauthorized, or is forbidden for url \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Exception calling \\"GetResponse\\" with \\"0\\" argument(s): \\"The remote server returned an error: (404) Not Found.\\"\\n\\nЭто указывает на то, что URL-адрес для загрузки pywin32 больше не действителен, что означает, что Chocolatey не может получить необходимые файлы для установки.\\n\\n### Шаги по устранению неполадок\\n\\nВот несколько шагов, которые вы можете предпринять для решения этой проблемы:\\n\\n#### 1. Проверьте установку Chocolatey\\n\\nУбедитесь, что Chocolatey установлен правильно и обновлен до последней версии. Вы можете проверить версию Chocolatey с помощью команды:\\n\\n```bash\\nchoco --version\\n```\\n\\nДля обновления Chocolatey используйте команду:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Установите pywin32 вручную\\n\\nПоскольку автоматическая установка не удается, попробуйте установить pywin32 вручную. Вы можете скачать соответствующую версию с официальной [страницы релизов pywin32 на GitHub](https://github.com/mhammond/pywin32/releases) и установить ее вручную.\\n\\n#### 3. Измените скрипт установки\\n\\nЕсли у вас есть контроль над скриптом Electron Build Tools, вы можете изменить его, чтобы он указывал на действительный URL для pywin32 или обрабатывал процесс ручной установки.\\n\\n#### 4. Используйте альтернативный менеджер пакетов\\n\\nЕсли Chocolatey продолжает выдавать ошибки, рассмотрите возможность использования альтернативного менеджера пакетов, такого как pip для пакетов Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Пример ручной установки pywin32\\n\\n1. Скачайте подходящий установщик pywin32 с [официальной страницы релизов на GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Запустите установщик и следуйте инструкциям по установке.\\n3. Проверьте установку, запустив простой скрипт на Python, который импортирует pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nВозникновение ошибки \\"Failed to run `choco install pywin32 --yes`\\" может стать препятствием в процессе разработки. Однако, поняв основную причину и следуя приведенным выше шагам, вы сможете преодолеть эту проблему и продолжить настройку вашего проекта Electron.\\n"},{"lang":"ru","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Секреты Полного Пользовательского Проектирования ASIC для Биткойн- и Криптовалютного Майнинга","date":"2022-05-30T00:00:00.000Z","categories":["Полупроводники","Биткойн","Криптовалюта","Блокчейн"],"author":"Тан Шуай","tags":["ASIC","Биткойн","Майнинг","BTC"],"draft":false,"contact":"Тан Шуай | tanshuai@btc.com | tanshuai.com"},"content":"\\nТан Шуай  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Аннотация\\n\\nВ конкурентном мире криптовалютного майнинга первостепенное значение имеют энергоэффективность, производительность хэшрейта и надежность. В этой статье рассматривается первоклассный полный заказной дизайн ASIC (специализированной интегральной схемы), раскрывающий отраслевые секреты и экспертные методики, которые обеспечивают высокую производительность майнинга биткойнов и криптовалют. Написанная техническим экспертом одной из ведущих компаний по производству ASIC-майнеров, эта статья использует передовые методы проектирования, тщательную физическую компоновку и всесторонние процессы проверки, чтобы продемонстрировать исключительные возможности полноценных заказных ASIC в максимизации эффективности и прибыльности майнинга.\\n\\n## Введение\\n\\nЭволюция криптовалютного майнинга, особенно майнинга биткойнов, привела к переходу от использования универсальных ЦПУ, ПЛИС и графических процессоров к специализированным ASIC. Эти ASIC обеспечивают непревзойденную производительность и энергоэффективность. Полный заказной дизайн ASIC представляет собой вершину этой эволюции, позволяя создавать индивидуальные решения, которые отвечают специфическим требованиям майнинговых операций.\\n\\nБольшая часть существующей литературы по проектированию ASIC для криптовалютного майнинга исходит из академических кругов или не-майнинговых предприятий, что часто лишает её практической применимости. На сегодняшний день лишь несколько компаний, главным образом китайских (например, MicroBT, Bitmain), успешно разработали коммерческие ASIC для майнинга биткойнов. Эта статья стремится заполнить этот пробел, предоставляя информацию, основанную на реальной практике отрасли, предлагая перспективу, основанную на реалиях майнингового сектора.\\n\\nКак профессионал с более чем десятью годами опыта в технической индустрии, автор этой статьи разработал лучший в мире биткойн ASIC-майнер (WhatsMiner), а также майнеры для LTC/DOGE и ETH, и сыграл ключевую роль в таких компаниях, как MicroBT, BTC.COM и других публичных фаблессах. Он занимал ключевые должности в компаниях, котирующихся на NASDAQ, HKSE и NYSE. Имея обширный опыт установления партнерских отношений с TSMC, Texas Instruments, ARM и Intel, он приносит богатые знания и практический опыт в область разработки заказных ASIC для майнинга биткойнов и криптовалют.\\n\\n## Методология и проектный поток\\n\\n### Проектная философия\\n\\nНаш подход к полному кастомному проектированию ASIC основан на максимизации PPA (энергопотребление, производительность и площадь), особенно при низковольтных условиях эксплуатации. В этом разделе описана наша проектная философия и методология:\\n\\n1. **Конвейерная архитектура**: Использование преимуществ конвейерных структур для майнинговых алгоритмов, характеризующихся регистрами и этапами комбинационной логики. Применение конвейерной архитектуры позволяет эффективно обрабатывать высокочастотные операции, необходимые для майнинга криптовалют.\\n2. **Ручная разработка нетлиста и размещение**: Подробное написание скриптов для создания нетлиста и ручное размещение ячеек для оптимизации критических путей. Это позволяет точно контролировать временные характеристики и снижать паразитные эффекты.\\n3. **Кастомные библиотеки ячеек**: Разработка специализированных ячеек с оптимизированным количеством транзисторов и функциями экономии динамической мощности. Кастомные ячейки разрабатываются для работы при минимально возможных напряжениях, обеспечивая минимальное энергопотребление.\\n\\n### Достижение преимуществ PPA\\n\\nПодробные стратегии достижения преимуществ PPA через кастомное проектирование:\\n\\n1. **Разработка кастомных регистров**: Использование многоразрядных регистров и схем на основе защелок для снижения энергопотребления часов и улучшения заимствования времени. Многоразрядные регистры минимизируют энергопотребление дерева часов и уменьшают общую площадь.\\n2. **Ручное размещение**: Сокращение длины проводов и балансировка времен установления и удержания для повышения общей производительности. Ручное размещение позволяет лучше контролировать задержки межсоединений и перекрестные помехи, улучшая целостность сигнала и снижая энергопотребление.\\n3. **Оптимизированное проектирование ячеек**: Кастомные ячейки разрабатываются для работы при более низких напряжениях, минимизируя динамическое энергопотребление и максимизируя эффективность. Подстраивая проектирование ячеек под конкретные потребности майнинговых алгоритмов, мы можем добиться значительных улучшений производительности.\\n\\n### Надежность при низких напряжениях\\n\\nОбеспечение надежности кастомной проектной логики при низких напряжениях включает:\\n\\n1. **Точные симуляции**: Симуляции на уровне схем для валидации поведения кастомных ячеек в конкретных условиях. Инструменты, такие как SPICE, используются для детализированных электрических симуляций, чтобы обеспечить корректную работу ячеек при всех углах ПВТ (Процесс, Напряжение, Температура).\\n2. **Согласованность размещения**: Ручное размещение для обеспечения однородности и уменьшения вариабельности. Контролируя физическую компоновку, мы можем минимизировать влияние процессных вариаций и обеспечить стабильную производительность.\\n3. **Точная калибровка ПВТ**: Верификация с учетом вариаций процесса, напряжения и температуры. Проводятся обширные тестирования и калибровка, чтобы гарантировать\\n\\n## Исследования и результаты\\n\\nПредставляем данные и исследования реальных случаев, полученные при полном масочном проектировании:\\n\\n| Проект | Технологический процесс | Напряжение/Энергоэффективность | Алгоритм |\\n| ------ | ---------------------- | ----------------------------- | -------- |\\n| SC     | TSMC 28nm              | 0.45V, 257J/T                 | Blake2b  |\\n| DCR    | TSMC 28nm              | 0.45V, 150J/T                 | Blake256 |\\n| DASH   | TSMC 16nm              | 0.38V, 6.2J/G                 | X11      |\\n| BTC    | TSMC 16nm              | 0.38V, 65J/T                  | SHA-256d |\\n| BTC    | TSMC 7nm               | 0.30V, 37J/T                  | SHA-256d |\\n| BTC    | Samsung 8nm            | 0.31V, 45J/T                  | SHA-256d |\\n| BTC    | SMIC N+1               | 0.30V, 35J/T                  | SHA-256d |\\n\\nЭти результаты демонстрируют значительные улучшения в эффективности и производительности, достижимые благодаря нашему индивидуальному подходу к проектированию.\\n\\n## Интеграция и проверка\\n\\n### Подтверждение смешанных ячеек\\n\\n- **Интеграция индивидуальных ячеек**: Индивидуальные ячейки интегрируются со стандартными ячейками от TSMC и других производителей, обеспечивая совместимость и производительность. Индивидуальные ячейки характеризуются и проверяются на соответствие требованиям стандартной библиотеки ячеек, что позволяет их бесшовную интеграцию.\\n- **Стратегии подтверждения**: Стратегии, обеспечивающие бесшовную совместимость и производительность, включают детализированные проверки DRC (Design Rule Check) и LVS (Layout Versus Schematic), а также анализ времени и мощности с использованием отраслевых инструментов EDA (Electronic Design Automation).\\n\\n### Цифровое и аналоговое совместное проектирование\\n\\n- **Техники интеграции**: Интеграция цифровых и аналоговых компонентов для оптимизации общей производительности чипа. Для обеспечения правильной интеграции и функциональности используются такие техники, как смешанная верификация сигналов и совместное моделирование.\\n- **Методологии проверки**: Методологии для обеспечения надежности в различных эксплуатационных условиях включают угловой анализ, имитации Монте-Карло и проверку надежности для решения проблем старения и электромиграции.\\n\\n## Заключение\\n\\nПолный индивидуальный дизайн ASIC предлагает значительные преимущества для майнинга Bitcoin и криптовалют, обеспечивая непревзойденную производительность, энергоэффективность и надежность. Раскрывая секреты высококлассного индивидуального дизайна ASIC, эта статья подчеркивает методологии и инновации, которые отличают лидеров отрасли. По мере развития майнинга криптовалют, индивидуальные ASIC будут играть ключевую роль в продвижении следующего поколения высокоэффективного и высокопроизводительного майнингового оборудования.\\n\\n[PDF версия статьи](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"ru","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Получить текущий идентификатор коммита Git и обновить его в package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Тан Шуай","tags":["Git","Package.json","Node.js"],"categories":["Разработка программного обеспечения"]},"content":"\\nПри разработке проекта на Node.js может понадобиться отслеживать текущий идентификатор коммита в вашем репозитории Git. Эта информация может быть полезной для отладки, версионирования или развертывания. Один из способов добиться этого — обновить файл `package.json` с текущим идентификатором коммита во время процесса сборки. Эта статья проведет вас через шаги получения текущего идентификатора коммита Git и обновления его в файле `package.json` с использованием Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\\\\\",\\n"},{"lang":"ru","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Миграция репозитория GitHub LFS (Git Large File Storage) в AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Тань Шуай","tags":["AWS","Git","GitHub","LFS"],"categories":["Разработка программного обеспечения"]},"content":"\\nНедавно я перенёс один из своих репозиториев на GitHub, который использует Git Large File Storage (LFS), на AWS CodeCommit. Решил поделиться процессом с вами, если вы планируете сделать что-то подобное. Вот пошаговое руководство, основанное на моем опыте.\\n\\n## Требования\\n\\nПрежде чем мы начнем, убедитесь, что у вас установлены следующие инструменты:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Пошаговое руководство\\n\\n### 1. Клонирование репозитория\\n\\nСначала клонируйте ваш репозиторий на GitHub с использованием опции `--mirror`. Это создаст зеркальную копию репозитория, включая все ветки и теги.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Проверка файлов LFS\\n\\nДалее, перечислите все файлы, управляемые Git LFS, чтобы убедиться, что всё на месте.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nВы должны увидеть что-то вроде этого:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Миграция файлов LFS\\n\\nТеперь экспортируйте файлы LFS. Этот шаг гарантирует, что они являются частью истории вашего репозитория.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nВы увидите сообщения о прогрессе, такие как эти:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster\\t98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Очистка LFS\\n\\nУдалите информацию о трекинге Git LFS и деинсталлируйте Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Публикация на AWS CodeCommit\\n\\nНаконец, отправьте ваш репозиторий на AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\nВот и всё! Следуя этим шагам, я успешно перенёс свой репозиторий GitHub LFS на AWS CodeCommit. Большие файлы и история репозитория были сохранены идеально.\\n\\n## Завершение\\n\\nМиграция репозитория GitHub, который использует Git LFS, на AWS CodeCommit довольно проста, если следовать правильным шагам. Если у вас есть вопросы или возникнут проблемы, [документация AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) и [документация Git LFS](https://git-lfs.github.com/) являются отличными ресурсами.\\n\\nНадеюсь, этот гид будет вам полезен. Удачного программирования!\\n"},{"lang":"ru","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Сброс/Восстановление всех подкаталогов Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Тан Шуай","tags":["Git","Контроль версий"],"categories":["Разработка программного обеспечения"]},"content":"\\nЭффективное управление репозиторием Git часто требует сброса или восстановления подкаталогов для поддержания чистого и функционального кода. Это руководство предоставляет краткий, пошаговый подход к сбросу или восстановлению всех подкаталогов в репозитории Git.\\n\\n## Сброс подкаталогов\\n\\nСледующая команда Git удаляет все неотслеживаемые файлы и каталоги из репозитория. Это полезно для очистки ненужных файлов перед выполнением сброса или восстановления.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Разбор команды:\\n\\n- `-x`: Удалить все неотслеживаемые файлы, включая игнорируемые `.gitignore`.\\n- `-f`: Принудительное удаление файлов.\\n- `-d`: Удалить неотслеживаемые каталоги.\\n- `-- .`: Применить команду к текущему каталогу и всем подкаталогам.\\n\\n## Восстановление подкаталогов\\n\\nЧтобы восстановить все файлы в репозитории до их последнего зафиксированного состояния, используйте следующую команду:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Разбор команды:\\n\\n- `{HEAD OR BRANCH}`: Замените на `HEAD` для сброса к последнему коммиту или укажите имя ветки для сброса к конкретной ветке.\\n- `-- .`: Применить команду к текущему каталогу и всем подкаталогам.\\n\\nИспользуя эти команды, вы можете убедиться, что ваш репозиторий свободен от нежелательных файлов, а все файлы восстановлены до их зафиксированных состояний. Этот процесс помогает поддерживать чистоту и организованность кода, что облегчает совместную работу и разработку.\\n\\nНе стесняйтесь настраивать это руководство в соответствии с вашими конкретными потребностями и предпочтениями. Для более продвинутых операций с Git обратитесь к [официальной документации Git](https://git-scm.com/doc).\\n"},{"lang":"ru","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Система тестирования памяти DDR3, DDR4, LP-DDR3 и LP-DDR4 по сверхнизкой цене","description":"Откройте для себя сверхнизкую стоимость системы тестирования памяти для технологий DDR3, DDR4, LP-DDR3 и LP-DDR4. По цене около 200 000 долларов США она предлагает высокоскоростное тестирование, универсальность, продвинутые функции и низкое энергопотребление. Идеально подходит для бизнеса, ищущего экономичные и надежные решения для тестирования памяти.","date":"2024-06-01T00:00:00.000Z","categories":["Полупроводники"],"author":"Тан Шуай","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Система тестирования памяти"],"draft":false},"content":"\\nЕсли вы, как и я, всегда ищете экономичные решения, не уступающие в качестве, вам понравится то, чем я хочу поделиться сегодня. В нашем стремительно развивающемся мире технологий важно, чтобы память наших устройств была на должном уровне. Высококлассные варианты, такие как T5503/T5503HS2, великолепны, но они имеют высокую цену. К счастью, Zeeis представила ультраэкономичную систему тестирования памяти, которая не жертвует производительностью.\\n\\n## Почему это важно\\n\\nКогда я впервые узнал о системе тестирования памяти от Zeeis, я был заинтригован. Эта система предназначена для работы с технологиями памяти DDR3, DDR4, LP-DDR3 и LP-DDR4. Будь то старые системы или новейшие технологии, эта система справится с любой задачей.\\n\\n### Высокоскоростное тестирование\\n\\nОдной из выдающихся характеристик является её способность поддерживать скорость передачи данных в диапазоне от 800 до 3200 MT/s как для DDR3, так и для DDR4. Она может оценивать модули памяти на частотах до 1600 МГц. Это означает тщательное и надёжное тестирование, обеспечивающее максимальную производительность ваших устройств.\\n\\n### Универсальность\\n\\nУниверсальность этой системы меняет правила игры. Она поддерживает множество стандартов памяти, что делает её подходящей для широкого спектра применений — от бытовой электроники до высокопроизводительных вычислений. Более того, она защищена от устаревания. По мере появления новых технологий памяти, эту систему можно легко модернизировать для их поддержки.\\n\\n### Экономическая эффективность\\n\\nТеперь поговорим о цене. Примерно за 200 000 долларов США эта система предлагает отличную отдачу от инвестиций. Она достаточно доступна для малых и средних предприятий, обеспечивая высококлассные возможности тестирования без значительных затрат.\\n\\n### Продвинутые функции\\n\\nСистема оснащена передовыми алгоритмами тестирования, включая интегрированный генератор алгоритмических шаблонов (ALPG). Это обеспечивает точную и надёжную оценку памяти, чтобы каждый модуль соответствовал строгим стандартам производительности.\\n\\n### Низкое энергопотребление\\n\\nЧто также впечатляет, так это низкое энергопотребление системы. Это соответствует тенденциям, наблюдаемым в технологиях памяти LP-DDR3 и LP-DDR4. Работая при низких напряжениях, она не только снижает затраты на энергию, но и минимизирует тепловыделение, что делает её экологичным выбором.\\n\\n## Почему выбрать Zeeis?\\n\\n### Масштабируемость\\n\\nСистема Zeeis разработана с учетом масштабируемости. По мере появления новых технологий памяти, систему можно легко модернизировать, что обеспечивает долгосрочную пригодность и снижает необходимость в частых заменах.\\n\\n### Поддержка и документация\\n\\nЕще один большой плюс – это обширная поддержка и документация от Zeeis. Независимо от того, являетесь ли вы опытным профессионалом или новичком в тестировании памяти, их подробные руководства и оперативная служба поддержки обеспечивают плавный опыт.\\n\\n### Соответствие рыночным требованиям\\n\\nС учетом растущего спроса на высокоскоростную память везде, от смартфонов до дата-центров, наличие надежного и экономически эффективного решения для тестирования памяти является необходимостью. Система Zeeis отвечает этим требованиям, гарантируя, что ваши продукты будут готовы к рынку и безупречно функционировать в реальных условиях.\\n\\n## Заключение\\n\\nВ двух словах, Ultra Low Cost DDR3, DDR4, LP-DDR3 и LP-DDR4 Memory Test System от Zeeis – это отличный выбор для тех, кому нужны надежные, универсальные и доступные решения для тестирования памяти. Она предлагает высокую производительность по цене, значительно ниже стоимости других высококлассных систем, что позволяет компаниям поддерживать высокие стандарты без больших затрат.\\n\\nЕсли вы заинтересованы в повышении ваших возможностей тестирования с системой, разработанной для будущих технологий памяти, пожалуйста, свяжитесь со мной для получения дополнительной информации по адресу [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\nУдачного тестирования!\\n"},{"lang":"ru","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo должен принадлежать uid 0 и иметь установленный бит setuid в Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Тан Шуай","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nЕсли вы сталкиваетесь с сообщением об ошибке \xab/usr/bin/sudo должен принадлежать uid 0 и иметь установлен бит setuid\xbb на Ubuntu 20.04, выполните следующие шаги для устранения проблемы.\\n\\n1. Во время процесса загрузки нажмите клавишу \'ESC\', чтобы получить доступ к меню GRUB.\\n\\n![Экран GRUB](/images/content/wx20211008-210752.png \\"Экран GRUB\\")\\n\\n2. Выберите первый вариант, \xabUbuntu\xbb, и нажмите клавишу \'e\' для редактирования параметров загрузки.\\n\\n![Редактирование параметров загрузки](/images/content/wx20211008-210841.png \\"Редактирование параметров загрузки\\")\\n\\n3. Добавьте следующую строку к строке, начинающейся с \'linux\', чтобы загрузиться в режиме восстановления:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. После входа в режим восстановления выполните следующую команду для восстановления правильных разрешений и владельца для `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nЭта команда устанавливает необходимые разрешения и гарантирует, что `sudo` принадлежит пользователю root с установленным битом setuid.\\n\\nСледуя этим шагам, вы сможете устранить проблему и восстановить правильную работу команды `sudo` на вашей системе Ubuntu.\\n"},{"lang":"es","group":"blog","slug":"blog/aws-codecommit-the-githubs-large-file-storage-git-lfs-free-alternative","frontmatter":{"title":"AWS CodeCommit： La alternativa gratuita a GitHub Large File Storage (Git LFS)","description":"Descubre c\xf3mo AWS CodeCommit funciona como una alternativa rentable y eficiente al almacenamiento de archivos grandes de GitHub (Git LFS). Este art\xedculo cubre las limitaciones de Git LFS, los beneficios de usar AWS CodeCommit para el almacenamiento de archivos grandes, y proporciona una gu\xeda paso a paso para migrar de Git LFS a CodeCommit. Mejora tu flujo de trabajo de desarrollo con la infraestructura escalable y segura de AWS.","date":"2022-02-09T00:00:00.000Z","author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Desarrollo de Software"],"draft":false},"content":"\\nAWS CodeCommit ofrece una alternativa robusta al servicio de almacenamiento de archivos grandes de GitHub (Git LFS), proporcionando una soluci\xf3n eficiente para gestionar archivos grandes en tus repositorios Git.\\n\\n## Por Qu\xe9 Deber\xedas Reconsiderar el Uso de Git LFS\\n\\nAunque Git LFS es una opci\xf3n popular para manejar archivos grandes en repositorios Git, tiene sus limitaciones y desaf\xedos. Git LFS requiere una configuraci\xf3n y gesti\xf3n adicionales, lo que puede complicar el flujo de trabajo de desarrollo. Adem\xe1s, los costos de almacenamiento y ancho de banda asociados con Git LFS pueden aumentar r\xe1pidamente, especialmente en proyectos con numerosos archivos grandes o una colaboraci\xf3n extensa.\\n\\n## Por Qu\xe9 el Servicio de Almacenamiento de Archivos Grandes de GitHub No es Perfecto\\n\\nEl servicio de almacenamiento de archivos grandes de GitHub, aunque \xfatil, tiene inconvenientes inherentes. La preocupaci\xf3n principal es el costo asociado con el almacenamiento y el ancho de banda, que puede volverse prohibitivo para proyectos m\xe1s grandes. Adem\xe1s, gestionar Git LFS puede ser engorroso, requiriendo que los desarrolladores instalen y configuren el cliente LFS, rastreen archivos espec\xedficos y lidien con posibles conflictos de fusi\xf3n que surgen debido al manejo de archivos grandes por separado del resto del repositorio.\\n\\n## Por Qu\xe9 Usar AWS CodeCommit para Almacenar Archivos Grandes en Git\\n\\nAWS CodeCommit proporciona una alternativa convincente para almacenar archivos grandes en repositorios Git sin la necesidad de Git LFS. CodeCommit es un servicio de control de versiones totalmente gestionado que se integra perfectamente con otros servicios de AWS, ofreciendo una escalabilidad, seguridad y eficiencia en costos robustas. Al aprovechar CodeCommit, los desarrolladores pueden evitar la sobrecarga adicional de gestionar Git LFS mientras se benefician de la infraestructura robusta de AWS y su modelo de precios basado en el consumo.\\n\\n## Cu\xe1les Son las Limitaciones de AWS CodeCommit Comparado con GitHub\\n\\nA pesar de sus ventajas, AWS CodeCommit tiene algunas limitaciones en comparaci\xf3n con GitHub. El extenso soporte de la comunidad de GitHub, su rico ecosistema de integraciones y funciones avanzadas como GitHub Actions y GitHub Pages pueden no estar completamente replicadas en CodeCommit. Adem\xe1s, los desarrolladores acostumbrados a la interfaz de usuario y las herramientas de colaboraci\xf3n de GitHub pueden encontrar que la transici\xf3n a CodeCommit requiere cierta adaptaci\xf3n.\\n\\n## C\xf3mo Migrar un Repositorio Git LFS a CodeCommit\\n\\nMigrar un repositorio Git LFS a CodeCommit implica varios pasos. Primero, aseg\xfarate de que todos los archivos grandes est\xe9n correctamente rastreados en tu repositorio Git LFS. Luego, clona el repositorio y elimina la configuraci\xf3n de rastreo de Git LFS. Despu\xe9s de eso, crea un nuevo repositorio en AWS CodeCommit y sube tu repositorio local a \xe9l. Hay documentaci\xf3n detallada y scripts disponibles para agilizar este proceso, asegurando una transici\xf3n sin p\xe9rdida de datos ni interrupciones.\\n\\n## Una Mejor Soluci\xf3n\\n\\nPara equipos y proyectos que dependen en gran medida de Git LFS, explorar AWS CodeCommit como una alternativa puede ofrecer beneficios significativos. La integraci\xf3n perfecta de CodeCommit con el ecosistema de AWS, junto con su naturaleza rentable y escalable, lo convierte en una opci\xf3n atractiva para gestionar archivos grandes en repositorios Git. Al mitigar los desaf\xedos asociados con Git LFS, CodeCommit permite a los equipos de desarrollo enfocarse en la codificaci\xf3n y la colaboraci\xf3n, impulsando la productividad y la innovaci\xf3n.\\n\\nEn conclusi\xf3n, AWS CodeCommit proporciona una alternativa viable, rentable y eficiente al servicio de Almacenamiento de Archivos Grandes de GitHub. Al aprovechar la robusta infraestructura de AWS, los desarrolladores pueden gestionar archivos grandes en repositorios Git con facilidad, optimizando sus flujos de trabajo y reduciendo los costos.\\n"},{"lang":"es","group":"blog","slug":"blog/check-voltage-current-on-macos-for-power-adapter","frontmatter":{"title":"Verificar Voltaje y Corriente en MacOS para Adaptador de Corriente","meta_title":"Verificar Voltaje y Corriente en MacOS para Adaptador de Corriente","date":"2022-02-14T00:00:00.000Z","author":"Tan Shuai","tags":["MacOS","Adaptador de Corriente","Voltaje","Corriente"],"categories":["MacOS"],"draft":false},"content":"\\nCuando uses un MacBook, es posible que desees verificar el voltaje y la corriente del adaptador de corriente. Aqu\xed tienes una forma sencilla de comprobar el voltaje y la corriente del adaptador de corriente en macOS.\\n\\nAbre Terminal.app y escribe el comando:\\n\\n`ioreg -l -n AppleSmartBattery -r |grep AppleRawAdapterDetails`\\n\\nObtendr\xe1s la siguiente informaci\xf3n que incluye la corriente y el voltaje:\\n\\n```json\\n\\"AppleRawAdapterDetails\\" = ({\\"IsWireless\\"=No,\\"AdapterID\\"=0,\\"FamilyCode\\"=18446744073172697098,\\"Watts\\"=89,**\\"Current\\"=4450**,\\"PMUConfiguration\\"=4448,**\\"Voltage\\"=20000**})\\n"},{"lang":"es","group":"blog","slug":"blog/convert-markdown-academic-paper-pdf-macos","frontmatter":{"title":"Convierta R\xe1pidamente Markdown a PDF de Estilo Acad\xe9mico en macOS","meta_title":"Convertir Markdown a PDF de Estilo Acad\xe9mico en macOS con Pandoc","description":"Aprenda a convertir documentos Markdown a PDFs de estilo acad\xe9mico en macOS utilizando Pandoc y BasicTeX. Este m\xe9todo r\xe1pido y sencillo es perfecto para crear archivos PDF profesionales para trabajos acad\xe9micos.","date":"2022-03-03T00:00:00.000Z","categories":["Desarrollo de Software"],"author":"Tan Shuai","tags":["Pandoc","LaTeX","PDF","Trabajo","Markdown","macOS"],"draft":false},"content":"\\nEn esta gu\xeda, te mostrar\xe9 c\xf3mo convierto documentos Markdown en archivos PDF con estilo acad\xe9mico en macOS utilizando Pandoc y BasicTeX. Este m\xe9todo es r\xe1pido y sencillo, perfecto para cuando necesitas crear archivos PDF de aspecto profesional para tus trabajos acad\xe9micos.\\n\\n### Paso 1: Instalar Pandoc y BasicTeX\\n\\nPrimero, necesitar\xe1s instalar Pandoc y BasicTeX en tu sistema macOS. As\xed es como lo hice:\\n\\n1. **Instalar Pandoc**: Abre Terminal y escribe el siguiente comando para instalar Pandoc:\\n\\n   ```bash\\n   brew install pandoc\\n   ```\\n\\n2. **Instalar BasicTeX**: Dado que MacTeX es bastante grande, opt\xe9 por el paquete m\xe1s peque\xf1o BasicTeX para ahorrar espacio. Ejecuta este comando:\\n\\n   ```bash\\n   brew install --cask basictex\\n   ```\\n\\n3. **Instalar Paquetes Comunes de LaTeX**: Para asegurarte de tener los paquetes necesarios para generar PDFs, ejecuta estos comandos:\\n   ```bash\\n   sudo tlmgr update --self\\n   sudo tlmgr install collection-basic collection-latex collection-latexrecommended collection-fontsrecommended\\n   ```\\n\\n### Paso 2: Prepara tu Archivo Markdown\\n\\nA continuaci\xf3n, crea tu archivo Markdown (por ejemplo, `paper.md`). As\xed es como configur\xe9 mi archivo, incluyendo el t\xedtulo, autor, fecha e informaci\xf3n de contacto:\\n\\n```markdown\\n---\\ntitle: \\"Your Paper Title\\"\\nsubtitle: \\"Optional Subtitle\\"\\ndate: \\\\today\\n\\nauthor: |\\n  | Your Name\\n  | your-email@tanshuai.com\\n  | www.tanshuai.com\\n---\\n\\n# Abstract\\n\\nYour abstract here.\\n\\n# Introduction\\n\\nYour introduction here.\\n\\n# Methodology\\n\\nYour methodology here.\\n\\n# Results\\n\\nYour results here.\\n\\n# Conclusion\\n\\nYour conclusion here.\\n```\\n\\n### Paso 3: Convierte Markdown a PDF con Pandoc\\n\\nAhora, puedes convertir tu archivo Markdown a PDF. Utilic\xe9 el siguiente comando en Terminal:\\n\\n```bash\\npandoc paper.md -o paper.pdf --pdf-engine=xelatex\\n```\\n\\nEste comando utiliza la plantilla LaTeX predeterminada de Pandoc para convertir el archivo Markdown en un PDF con estilo acad\xe9mico, incluyendo la informaci\xf3n de contacto del autor debajo de su nombre.\\n\\n### Consejos Adicionales\\n\\n- **Plantilla LaTeX Personalizada**: Si necesitas un formato m\xe1s avanzado o estilos espec\xedficos, puedes crear o descargar una plantilla LaTeX personalizada y usarla con Pandoc:\\n\\n  ```bash\\n  pandoc paper.md -o paper.pdf --pdf-engine=xelatex --template=your-template.tex\\n  ```\\n\\n- **M\xe1s Metadatos**: Puedes a\xf1adir informaci\xf3n extra en el encabezado de metadatos YAML, como un resumen o palabras clave, y usar estos en plantillas personalizadas.\\n\\n### Conclusi\xf3n\\n\\nSiguiendo estos pasos, puedes convertir f\xe1cilmente documentos Markdown en archivos PDF con estilo acad\xe9mico en macOS. Usar Pandoc y BasicTeX hace que este proceso sea r\xe1pido y eficiente, perfecto para cuando necesitas generar documentos PDF profesionales. Ya sea que est\xe9s preparando trabajos acad\xe9micos, informes t\xe9cnicos u otros documentos formales, este m\xe9todo funciona de maravilla. Incluir informaci\xf3n de contacto en el encabezado de metadatos a\xf1ade un toque profesional a tus documentos.\\n\\n\xa1Espero que encuentres \xfatil esta gu\xeda! Si tienes alguna pregunta o encuentras alg\xfan problema, no dudes en ponerte en contacto. \xa1Feliz escritura!\\n"},{"lang":"es","group":"blog","slug":"blog/electron-build-tools-error-error-failed-to-run-choco-install-pywin32-yes","frontmatter":{"title":"Herramientas de Construcci\xf3n de Electron `ERROR Error： Failed to run \\\\\\"choco install pywin32\\\\n  --yes\\\\\\"`","date":"2021-09-08T00:00:00.000Z","draft":false,"author":"Tan Shuai","tags":["Electron","Build Tools","PyWin32","Chocolatey","Win32"],"categories":["Desarrollo de Software"]},"content":"\\nAl trabajar con Electron Build Tools, es posible que encuentres un error relacionado con la instalaci\xf3n de pywin32 a trav\xe9s de Chocolatey. Esto puede ser frustrante, especialmente cuando es una dependencia requerida para tu proyecto. A continuaci\xf3n, se ofrece una explicaci\xf3n detallada del problema y los posibles pasos para resolverlo.\\n\\n### El error\\n\\nAl iniciar un proyecto de Electron utilizando Electron Build Tools, podr\xedas ver el siguiente mensaje de error:\\n\\n```bash\\nE:\\\\\\\\>e init main-testing -i testing --root=e:/src/electron\\nWARN Se ha producido un error solucionable\\n--> No se pudo localizar una dependencia requerida \\"pywin32\\", probablemente deba instalarse.\\n\xbfQuieres que build-tools intente solucionarlo por ti? [y/n]: y\\n\\nEjecutando \\"choco install pywin32 --yes\\"\\nERROR Error: Fallo al ejecutar \\"choco install pywin32 --yes\\"\\n    en spawnSyncWithLog (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:11:11)\\n    en fix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:39:9)\\n    en maybeAutoFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\maybe-auto-fix.js:13:3)\\n    en whichAndFix (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\which.js:10:5)\\n    en checkPlatformDependencies (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\utils\\\\\\\\deps-check.js:61:7)\\n    en Object.<anonymous> (C:\\\\\\\\Users\\\\\\\\zeeis\\\\\\\\.electron_build_tools\\\\\\\\src\\\\\\\\e-init.js:165:3)\\n    en Module._compile (internal/modules/cjs/loader.js:1072:14)\\n    en Object.Module._extensions..js (internal/modules/cjs/loader.js:1101:10)\\n    en Module.load (internal/modules/cjs/loader.js:937:32)\\n    en Function.Module._load (internal/modules/cjs/loader.js:778:12)\\n```\\n\\nEste error suele ocurrir porque el script de instalaci\xf3n del paquete pywin32 no puede encontrar los archivos necesarios en el servidor remoto. Esto resulta en un error 404, indicando que el archivo no est\xe1 disponible en la URL especificada.\\n\\n### Entendiendo el error\\n\\nLa parte clave del mensaje de error es:\\n\\n```bash\\nERROR: El archivo remoto no existe, no est\xe1 autorizado o est\xe1 prohibido para la URL \'http://sourceforge.net/projects/pywin32/files/pywin32/Build%20219/pywin32-219.win-amd64-py3.9.exe/download\'. Excepci\xf3n al llamar a \\"GetResponse\\" con \\"0\\" argumento(s): \\"El servidor remoto devolvi\xf3 un error: (404) No encontrado.\\"\\n\\nEsto indica que la URL de descarga para pywin32 ya no es v\xe1lida, lo que significa que Chocolatey no puede recuperar los archivos de instalaci\xf3n necesarios.\\n\\n### Pasos para la Soluci\xf3n de Problemas\\n\\nAqu\xed hay algunos pasos que puedes seguir para resolver este problema:\\n\\n#### 1. Verificar la Instalaci\xf3n de Chocolatey\\n\\nAseg\xfarate de que Chocolatey est\xe9 instalado correctamente y actualizado a la \xfaltima versi\xf3n. Puedes verificar tu versi\xf3n de Chocolatey con:\\n\\n```bash\\nchoco --version\\n```\\n\\nPara actualizar Chocolatey, usa:\\n\\n```bash\\nchoco upgrade chocolatey\\n```\\n\\n#### 2. Instalar pywin32 Manualmente\\n\\nDado que la instalaci\xf3n automatizada est\xe1 fallando, intenta instalar pywin32 manualmente. Puedes descargar la versi\xf3n adecuada desde la [p\xe1gina de lanzamientos de pywin32 en GitHub](https://github.com/mhammond/pywin32/releases) e instalarla manualmente.\\n\\n#### 3. Modificar el Script de Instalaci\xf3n\\n\\nSi tienes control sobre el script de Electron Build Tools, puedes modificarlo para que apunte a una URL v\xe1lida para pywin32 o maneje el proceso de instalaci\xf3n manual.\\n\\n#### 4. Usar un Gestor de Paquetes Alternativo\\n\\nSi Chocolatey sigue fallando, considera usar un gestor de paquetes alternativo como pip para paquetes de Python:\\n\\n```bash\\npip install pywin32\\n```\\n\\n### Ejemplo de Instalaci\xf3n Manual de pywin32\\n\\n1. Descarga el instalador adecuado de pywin32 desde los [lanzamientos oficiales en GitHub](https://github.com/mhammond/pywin32/releases).\\n2. Ejecuta el instalador y sigue las instrucciones de instalaci\xf3n.\\n3. Verifica la instalaci\xf3n ejecutando un simple script de Python que importe pywin32:\\n\\n```python\\nimport win32api\\nprint(win32api.GetVersionEx())\\n```\\n\\nEncontrar el error \\"Failed to run `choco install pywin32 --yes`\\" puede ser un obst\xe1culo en tu proceso de desarrollo. Sin embargo, al comprender la causa ra\xedz y seguir los pasos descritos anteriormente, puedes superar este problema y continuar con la configuraci\xf3n de tu proyecto Electron.\\n"},{"lang":"es","group":"blog","slug":"blog/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining","frontmatter":{"title":"Secretos del Dise\xf1o ASIC Personalizado Completo para la Miner\xeda de Bitcoin y Criptomonedas","date":"2022-05-30T00:00:00.000Z","categories":["Semiconductores","Bitcoin","Criptomonedas","Blockchain"],"author":"Tan Shuai","tags":["ASIC","Bitcoin","Miner\xeda","BTC"],"draft":false,"contact":"Tan Shuai | tanshuai@btc.com | tanshuai.com"},"content":"\\nTan Shuai  \\n[tanshuai@btc.com](mailto:tanshuai@btc.com)  \\n[tanshuai.com](https://tanshuai.com)\\n\\n---\\n\\n## Resumen\\n\\nEn el competitivo mundo de la miner\xeda de criptomonedas, la eficiencia energ\xe9tica, el rendimiento del hashrate y la fiabilidad son primordiales. Este documento explora el dise\xf1o ASIC (Circuito Integrado de Aplicaci\xf3n Espec\xedfica) completamente personalizado de primera categor\xeda, revelando secretos de la industria y metodolog\xedas expertas que impulsan la miner\xeda de Bitcoin y criptomonedas de alto rendimiento. Escrito por un experto tecnol\xf3gico de una de las principales empresas de mineros ASIC, este documento aprovecha t\xe9cnicas avanzadas de dise\xf1o, una disposici\xf3n f\xedsica meticulosa y procesos de verificaci\xf3n completos para mostrar las capacidades excepcionales de los ASIC personalizados en la maximizaci\xf3n de la eficiencia y la rentabilidad de la miner\xeda.\\n\\n## Introducci\xf3n\\n\\nLa evoluci\xf3n de la miner\xeda de criptomonedas, en particular la miner\xeda de Bitcoin, ha experimentado una transici\xf3n del uso de CPU, FPGA y GPU de prop\xf3sito general a ASIC especializados. Estos ASIC ofrecen un rendimiento y una eficiencia energ\xe9tica sin igual. El dise\xf1o de ASIC completamente personalizado representa el pin\xe1culo de esta evoluci\xf3n, permitiendo soluciones adaptadas que satisfacen las demandas espec\xedficas de las operaciones mineras.\\n\\nGran parte de la literatura existente sobre el dise\xf1o de ASIC para la miner\xeda de criptomonedas proviene del \xe1mbito acad\xe9mico o de empresas no mineras, lo que a menudo carece de aplicabilidad en el mundo real. Hasta la fecha, solo un pu\xf1ado de empresas, principalmente chinas (e.g., MicroBT, Bitmain), han desarrollado con \xe9xito ASIC de miner\xeda de Bitcoin comercializables. Este documento busca llenar ese vac\xedo proporcionando conocimientos extra\xeddos de la pr\xe1ctica industrial real, ofreciendo una perspectiva basada en las realidades del sector minero.\\n\\nComo profesional con m\xe1s de diez a\xf1os de experiencia en la industria tecnol\xf3gica, el autor de este documento ha desarrollado el ASIC Miner de Bitcoin m\xe1s avanzado del mundo (WhatsMiner), as\xed como mineros de LTC/DOGE y ETH, y ha desempe\xf1ado un papel clave en empresas como MicroBT, BTC.COM y otras empresas fabless p\xfablicas. Ha ocupado posiciones clave en empresas cotizadas en NASDAQ, HKSE y NYSE. Con una amplia experiencia en el establecimiento de asociaciones con TSMC, Texas Instruments, ARM e Intel, aporta un vasto conocimiento y experiencia pr\xe1ctica al campo del dise\xf1o de ASIC personalizados para la miner\xeda de Bitcoin y criptomonedas.\\n\\n## Metodolog\xeda y Flujo de Dise\xf1o\\n\\n### Filosof\xeda de Dise\xf1o\\n\\nNuestro enfoque para el dise\xf1o ASIC a medida se centra en maximizar PPA (Potencia, Rendimiento y \xc1rea), especialmente bajo condiciones de operaci\xf3n a bajo voltaje. Esta secci\xf3n describir\xe1 nuestra filosof\xeda y metodolog\xeda de dise\xf1o:\\n\\n1. **Arquitectura de Pipeline**: Aprovechando los beneficios inherentes de las estructuras de pipeline para algoritmos de miner\xeda, caracterizados por registros y etapas de l\xf3gica combinacional. Al usar una arquitectura de pipeline, podemos manejar eficientemente las operaciones de alta frecuencia requeridas para la miner\xeda de criptomonedas.\\n2. **Lista de Redes y Colocaci\xf3n Manual**: Scripting detallado para la creaci\xf3n de la lista de redes y colocaci\xf3n manual de celdas para optimizar rutas cr\xedticas. Esto permite un control preciso sobre el tiempo y reduce los efectos par\xe1sitos.\\n3. **Bibliotecas de Celdas Personalizadas**: Desarrollo de celdas especializadas con recuentos de transistores optimizados y caracter\xedsticas de ahorro din\xe1mico de energ\xeda. Las celdas personalizadas est\xe1n dise\xf1adas para operar al menor voltaje posible, asegurando un consumo m\xednimo de energ\xeda.\\n\\n### Logro de Beneficios PPA\\n\\nEstrategias detalladas para lograr beneficios PPA a trav\xe9s del dise\xf1o personalizado:\\n\\n1. **Dise\xf1o de Registro Personalizado**: Utilizaci\xf3n de registros multibit y dise\xf1os basados en latches para reducir el consumo de energ\xeda del reloj y mejorar el pr\xe9stamo de tiempo. Los registros multibit minimizan el consumo de energ\xeda del \xe1rbol de reloj y reducen el \xe1rea total.\\n2. **Colocaci\xf3n Manual**: Reducci\xf3n de la longitud de los cables y balanceo de los tiempos de configuraci\xf3n y retenci\xf3n para mejorar el rendimiento general. La colocaci\xf3n manual permite un mejor control sobre los retrasos de interconexi\xf3n y la diafon\xeda, mejorando la integridad de la se\xf1al y reduciendo el consumo de energ\xeda.\\n3. **Dise\xf1o Optimizado de Celdas**: Las celdas personalizadas est\xe1n dise\xf1adas para operar a voltajes m\xe1s bajos, minimizando el consumo de energ\xeda din\xe1mica y maximizando la eficiencia. Al adaptar los dise\xf1os de celdas a las necesidades espec\xedficas de los algoritmos de miner\xeda, podemos lograr mejoras significativas en el rendimiento.\\n\\n### Fiabilidad Bajo Bajo Voltaje\\n\\nAsegurar la fiabilidad de la l\xf3gica de temporizaci\xf3n dise\xf1ada a medida a bajos voltajes implica:\\n\\n1. **Simulaci\xf3n Precisa**: Simulaciones a nivel de circuito para validar el comportamiento de las celdas personalizadas bajo condiciones espec\xedficas. Se utilizan herramientas como SPICE para simulaciones el\xe9ctricas detalladas para asegurar que las celdas operen correctamente bajo todas las esquinas PVT (Proceso, Voltaje, Temperatura).\\n2. **Consistencia en la Colocaci\xf3n**: Colocaci\xf3n manual para asegurar uniformidad y reducir la variabilidad. Al controlar el dise\xf1o f\xedsico, podemos minimizar el impacto de las variaciones de proceso y asegurar un rendimiento consistente.\\n3. **Calibraci\xf3n Precisa de PVT**: Verificaci\xf3n contra variaciones de proceso, voltaje y temperatura. Se realizan pruebas y calibraciones exhaustivas para asegurar la robustez del dise\xf1o en diferentes condiciones de operaci\xf3n.\\n\\n## Estudios de Casos y Resultados\\n\\nPresentaci\xf3n de datos del mundo real y estudios de casos de tape-outs de m\xe1scara completa:\\n\\n| Proyecto | Nodo de Proceso | Eficiencia de Voltaje/Potencia | Algoritmo |\\n| ------- | -------------- | ----------------------------- | --------- |\\n| SC      | TSMC 28nm      | 0.45V, 257J/T                 | Blake2b   |\\n| DCR     | TSMC 28nm      | 0.45V, 150J/T                 | Blake256  |\\n| DASH    | TSMC 16nm      | 0.38V, 6.2J/G                 | X11       |\\n| BTC     | TSMC 16nm      | 0.38V, 65J/T                  | SHA-256d  |\\n| BTC     | TSMC 7nm       | 0.30V, 37J/T                  | SHA-256d  |\\n| BTC     | Samsung 8nm    | 0.31V, 45J/T                  | SHA-256d  |\\n| BTC     | SMIC N+1       | 0.30V, 35J/T                  | SHA-256d  |\\n\\nEstos resultados demuestran las ganancias sustanciales en eficiencia y rendimiento alcanzables a trav\xe9s de nuestro enfoque de dise\xf1o personalizado.\\n\\n## Integraci\xf3n y Verificaci\xf3n\\n\\n### Signoff de Celdas Mixtas\\n\\n- **Integraci\xf3n de Celdas Personalizadas**: Las celdas personalizadas se integran con celdas est\xe1ndar de TSMC y otras fundiciones, garantizando compatibilidad y rendimiento. Las celdas personalizadas se caracterizan y validan para cumplir con los requisitos de la biblioteca de celdas est\xe1ndar, permitiendo una integraci\xf3n sin problemas.\\n- **Estrategias de Signoff**: Las estrategias para garantizar compatibilidad y rendimiento sin problemas incluyen verificaciones detalladas de DRC (Design Rule Check) y LVS (Layout Versus Schematic), as\xed como an\xe1lisis de tiempo y potencia utilizando herramientas EDA (Automatizaci\xf3n de Dise\xf1o Electr\xf3nico) est\xe1ndar de la industria.\\n\\n### Co-Dise\xf1o Digital y Anal\xf3gico\\n\\n- **T\xe9cnicas de Integraci\xf3n**: Integraci\xf3n de componentes digitales y anal\xf3gicos para optimizar el rendimiento general del chip. Se utilizan t\xe9cnicas como la verificaci\xf3n de se\xf1ales mixtas y la co-simulaci\xf3n para asegurar una integraci\xf3n y funcionalidad adecuadas.\\n- **Metodolog\xedas de Verificaci\xf3n**: Las metodolog\xedas para asegurar la robustez en diferentes condiciones operativas incluyen an\xe1lisis de esquinas, simulaciones Monte Carlo y verificaci\xf3n de confiabilidad para abordar el envejecimiento y la electromigraci\xf3n.\\n\\n## Conclusi\xf3n\\n\\nEl dise\xf1o ASIC completamente personalizado ofrece ventajas significativas para la miner\xeda de Bitcoin y criptomonedas, proporcionando un rendimiento, eficiencia energ\xe9tica y confiabilidad incomparables. Al desvelar los secretos del dise\xf1o ASIC personalizado de primer nivel, este documento destaca las metodolog\xedas e innovaciones que distinguen a los l\xedderes de la industria. A medida que la miner\xeda de criptomonedas contin\xfaa evolucionando, los ASIC personalizados jugar\xe1n un papel crucial en impulsar la pr\xf3xima generaci\xf3n de hardware de miner\xeda de alta eficiencia y alto rendimiento.\\n\\n[Versi\xf3n PDF del Documento](/docs/full-custom-asic-design-secrets-bitcoin-cryptocurrency-mining.pdf)\\n"},{"lang":"es","group":"blog","slug":"blog/get-current-commit-id-of-git-and-update-to-package-json","frontmatter":{"title":"Obtener el ID del commit actual de Git y actualizarlo en package.json","date":"2021-08-21T09:19:58.875Z","draft":false,"author":"Tan Shuai","tags":["Git","Package.json","Node.js"],"categories":["Desarrollo de software"]},"content":"\\nAl desarrollar un proyecto de Node.js, es posible que desees realizar un seguimiento del ID de commit actual de tu repositorio Git. Esta informaci\xf3n puede ser \xfatil para la depuraci\xf3n, la gesti\xf3n de versiones o fines de implementaci\xf3n. Una forma de lograr esto es actualizando el archivo `package.json` con el ID de commit actual durante el proceso de construcci\xf3n. Este art\xedculo te guiar\xe1 a trav\xe9s de los pasos para obtener el ID de commit actual de Git y actualizarlo en el archivo `package.json` utilizando Node.js.\\n\\n```bash\\n\\"predev\\": \\"node ./node_modules/json/lib/json.js -I -f package.json -e \\\\\\\\\\\\\\"this.commit=\'$(git rev-parse --short HEAD)\'\\\\\\\\\\\\\\"\\",\\n"},{"lang":"es","group":"blog","slug":"blog/migrate-a-github-lfs-git-large-file-storage-repository-to-aws-codecommit","frontmatter":{"title":"Migrar un repositorio de GitHub LFS (Git Large File Storage) a AWS CodeCommit","date":"2022-02-09T09:36:57.481Z","draft":false,"author":"Tan Shuai","tags":["AWS","Git","GitHub","LFS"],"categories":["Desarrollo de Software"]},"content":"\\nRecientemente migr\xe9 uno de mis repositorios de GitHub, que utiliza Git Large File Storage (LFS), a AWS CodeCommit. Pens\xe9 en compartir el proceso contigo por si deseas hacer algo similar. Aqu\xed tienes una gu\xeda paso a paso basada en mi experiencia.\\n\\n## Requisitos previos\\n\\nAntes de empezar, aseg\xfarate de tener estas herramientas instaladas:\\n\\n- Git\\n- Git LFS\\n- AWS CLI\\n\\n## Gu\xeda paso a paso\\n\\n### 1. Clonar el repositorio\\n\\nPrimero, clona tu repositorio de GitHub usando la opci\xf3n `--mirror`. Esto crea una clonaci\xf3n bare del repositorio, incluyendo todas las ramas y etiquetas.\\n\\n```zsh\\ngit clone --mirror https://github.com/tanshuai/designs.git designs\\n```\\n\\n### 2. Verificar archivos LFS\\n\\nA continuaci\xf3n, lista todos los archivos gestionados por Git LFS para asegurarte de que todo est\xe9 en su lugar.\\n\\n```zsh\\ngit lfs ls-files\\n```\\n\\nDeber\xedas ver algo como esto:\\n\\n```\\ncadfa0bc9e * Brochure-Trifold-Draft.ai\\naf9b8b8a1c * Brochure-Trifold-English.ai\\n27bb5f4e61 * Brochure-Trifold.ai\\n```\\n\\n### 3. Migrar archivos LFS\\n\\nAhora, exporta los archivos LFS. Este paso asegura que sean parte del historial de tu repositorio.\\n\\n```zsh\\ngit lfs migrate export --include=\\"*.ai\\" --everything\\n```\\n\\nVer\xe1s algunos mensajes de progreso como estos:\\n\\n```\\nmigrate: Sorting commits: ..., done.\\nmigrate: Rewriting commits: 100% (20/20), done.\\nmaster 98a3c48d85... -> 82f8873b41...\\nmigrate: Updating refs: ..., done.\\nmigrate: checkout: ..., done.\\nprune: 3 local object(s), 0 retained, done.\\ncadfa0bc9e... (133 MB)\\n27bb5f4e61... (131 MB)\\naf9b8b8a1c... (130 MB), done.\\nprune: Deleting objects: 100% (3/3), done.\\n```\\n\\n### 4. Limpiar LFS\\n\\nElimina la informaci\xf3n de seguimiento de Git LFS y desinstala Git LFS.\\n\\n```zsh\\ngit lfs ls-files\\ngit rm .gitattributes -f\\ngit lfs uninstall\\n```\\n\\n### 5. Subir a AWS CodeCommit\\n\\nFinalmente, sube tu repositorio a AWS CodeCommit.\\n\\n```zsh\\ngit push https://git-codecommit.us-east-2.amazonaws.com/v1/repos/designs --all\\n```\\n\\n\xa1Eso es todo! Siguiendo estos pasos, migr\xe9 con \xe9xito mi repositorio de GitHub LFS a AWS CodeCommit. Los archivos grandes y el historial del repositorio se conservaron perfectamente.\\n\\n## Conclusi\xf3n\\n\\nMigrar un repositorio de GitHub que utiliza Git LFS a AWS CodeCommit es bastante sencillo si sigues los pasos correctos. Si tienes alguna pregunta o encuentras problemas, la [documentaci\xf3n de AWS CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) y la [documentaci\xf3n de Git LFS](https://git-lfs.github.com/) son excelentes recursos.\\n\\nEspero que encuentres \xfatil esta gu\xeda. \xa1Feliz programaci\xf3n!\\n"},{"lang":"es","group":"blog","slug":"blog/reset-restore-all-subdirectories-of-git","frontmatter":{"title":"Restablecer/Restaurar Todos los Subdirectorios de Git","date":"2021-09-22T08:33:49.201Z","draft":false,"author":"Tan Shuai","tags":["Git","Control de Versiones"],"categories":["Desarrollo de Software"]},"content":"\\nGestionar un repositorio Git de manera efectiva a menudo requiere restablecer o restaurar subdirectorios para mantener una base de c\xf3digo limpia y funcional. Esta gu\xeda proporciona un enfoque conciso, paso a paso, para restablecer o restaurar todos los subdirectorios en un repositorio Git.\\n\\n## Restablecer Subdirectorios\\n\\nEl siguiente comando de Git elimina todos los archivos y directorios no rastreados del repositorio. Esto es \xfatil para limpiar archivos innecesarios antes de realizar un restablecimiento o restauraci\xf3n.\\n\\n```bash\\ngit clean -xfdf -- .\\n```\\n\\n### Desglose del Comando:\\n\\n- `-x`: Elimina todos los archivos no rastreados, incluidos los ignorados por `.gitignore`.\\n- `-f`: Fuerza la eliminaci\xf3n de archivos.\\n- `-d`: Elimina directorios no rastreados.\\n- `-- .`: Aplica el comando al directorio actual y todos los subdirectorios.\\n\\n## Restaurar Subdirectorios\\n\\nPara restaurar todos los archivos en el repositorio a su estado \xfaltimo comprometido, use el siguiente comando:\\n\\n```bash\\ngit checkout {HEAD OR BRANCH} -- .\\n```\\n\\n### Desglose del Comando:\\n\\n- `{HEAD OR BRANCH}`: Reemplace con `HEAD` para restablecer al \xfaltimo commit o especifique un nombre de rama para restablecer a una rama espec\xedfica.\\n- `-- .`: Aplica el comando al directorio actual y todos los subdirectorios.\\n\\nUsando estos comandos, puede asegurarse de que su repositorio est\xe9 libre de archivos no deseados y que todos los archivos se restauren a sus estados comprometidos. Este proceso ayuda a mantener una base de c\xf3digo limpia y organizada, facilitando la colaboraci\xf3n y el desarrollo.\\n\\nSi\xe9ntase libre de personalizar esta gu\xeda seg\xfan sus necesidades y preferencias espec\xedficas. Para operaciones m\xe1s avanzadas con Git, consulte la [documentaci\xf3n oficial de Git](https://git-scm.com/doc).\\n"},{"lang":"es","group":"blog","slug":"blog/ultra-low-cost-ddr3-ddr4-lpddr3-lpddr4-memory-test-system","frontmatter":{"title":"Sistema de Pruebas de Memoria DDR3, DDR4, LP-DDR3 y LP-DDR4 de Ultra Bajo Costo","description":"Descubra el sistema de pruebas de memoria de ultra bajo costo para tecnolog\xedas DDR3, DDR4, LP-DDR3 y LP-DDR4. Con un precio de alrededor de $200,000 USD, ofrece pruebas de alta velocidad, versatilidad, funciones avanzadas y bajo consumo de energ\xeda. Perfecto para empresas que buscan soluciones de pruebas de memoria rentables y confiables.","date":"2024-06-01T00:00:00.000Z","categories":["Semiconductores"],"author":"Tan Shuai","tags":["DDR3","DDR4","LP-DDR3","LP-DDR4","Sistema de Pruebas de Memoria"],"draft":false},"content":"\\nSi eres como yo, siempre en busca de soluciones rentables sin comprometer la calidad, te encantar\xe1 lo que tengo para compartir hoy. En nuestro mundo tecnol\xf3gico de ritmo acelerado, asegurar que la memoria de nuestros dispositivos est\xe9 a la altura es crucial. Las opciones de gama alta como el T5503/T5503HS2 son fant\xe1sticas, pero vienen con un precio elevado. Afortunadamente, Zeeis ha dado un paso adelante con un sistema de prueba de memoria ultra econ\xf3mico que no sacrifica el rendimiento.\\n\\n## Por Qu\xe9 Esto Importa\\n\\nCuando supe por primera vez del sistema de prueba de memoria de Zeeis, me intrig\xf3. Este sistema est\xe1 dise\xf1ado para manejar tecnolog\xedas de memoria DDR3, DDR4, LP-DDR3 y LP-DDR4. Ya sea que trabajes con sistemas antiguos o con la tecnolog\xeda m\xe1s reciente, este sistema te cubre.\\n\\n### Pruebas de Alta Velocidad\\n\\nUna de las caracter\xedsticas destacadas es su capacidad para soportar velocidades de transferencia de datos que van desde 800 hasta 3200 MT/s para DDR3 y DDR4. Puede evaluar m\xf3dulos de memoria a velocidades de reloj de hasta 1600 MHz. Eso significa pruebas exhaustivas y confiables, asegurando que tus dispositivos funcionen de la mejor manera.\\n\\n### Versatilidad\\n\\nLa versatilidad de este sistema es un cambio de juego. Soporta m\xfaltiples est\xe1ndares de memoria, lo que lo hace adecuado para una amplia gama de aplicaciones, desde la electr\xf3nica de consumo hasta la computaci\xf3n de alto rendimiento. Adem\xe1s, est\xe1 preparado para el futuro. A medida que surgen nuevas tecnolog\xedas de memoria, este sistema puede ser f\xe1cilmente actualizado para soportarlas.\\n\\n### Rentabilidad\\n\\nAhora, hablemos del precio. Con alrededor de 200,000 USD, este sistema ofrece un excelente retorno de inversi\xf3n. Es lo suficientemente asequible para peque\xf1as y medianas empresas, asegurando capacidades de prueba de primer nivel sin arruinarse.\\n\\n### Caracter\xedsticas Avanzadas\\n\\nEl sistema viene con algoritmos de prueba avanzados, incluyendo un generador de patrones algor\xedtmicos integrado (ALPG). Esto asegura una evaluaci\xf3n de memoria precisa y confiable, de modo que cada m\xf3dulo cumpla con los estrictos est\xe1ndares de rendimiento.\\n\\n### Bajo Consumo de Energ\xeda\\n\\nLo que tambi\xe9n es impresionante es su bajo consumo de energ\xeda. Se alinea con las tendencias observadas en las tecnolog\xedas de memoria LP-DDR3 y LP-DDR4. Al operar a voltajes m\xe1s bajos, no solo reduce los costos de energ\xeda, sino que tambi\xe9n minimiza la salida t\xe9rmica, convirti\xe9ndolo en una opci\xf3n ecol\xf3gica.\\n\\n## \xbfPor Qu\xe9 Elegir Zeeis?\\n\\n### Escalabilidad\\n\\nEl sistema de Zeeis est\xe1 dise\xf1ado pensando en la escalabilidad. A medida que surgen nuevas tecnolog\xedas de memoria, el sistema puede ser f\xe1cilmente actualizado, asegurando una usabilidad a largo plazo y reduciendo la necesidad de reemplazos frecuentes.\\n\\n### Soporte y Documentaci\xf3n\\n\\nOtra gran ventaja es el extenso soporte y documentaci\xf3n de Zeeis. Ya seas un profesional experimentado o nuevo en las pruebas de memoria, sus gu\xedas detalladas y su servicio al cliente receptivo aseguran una experiencia fluida.\\n\\n### Satisfaciendo las Demandas del Mercado\\n\\nCon la creciente demanda de memoria de alta velocidad en todo, desde smartphones hasta centros de datos, contar con una soluci\xf3n de prueba de memoria confiable y rentable es esencial. El sistema de Zeeis cumple con estas demandas, asegurando que tus productos est\xe9n listos para el mercado y funcionen perfectamente en aplicaciones del mundo real.\\n\\n## Conclusi\xf3n\\n\\nEn resumen, el Sistema de Pruebas de Memoria DDR3, DDR4, LP-DDR3 y LP-DDR4 de Ultra Bajo Costo de Zeeis es una opci\xf3n fant\xe1stica para aquellos de nosotros que necesitamos soluciones de pruebas de memoria confiables, vers\xe1tiles y asequibles. Ofrece un alto rendimiento a una fracci\xf3n del costo de otros sistemas de alta gama, permitiendo a las empresas mantener altos est\xe1ndares sin arruinarse.\\n\\nSi est\xe1s interesado en mejorar tus capacidades de prueba con un sistema dise\xf1ado para el futuro de la tecnolog\xeda de memoria, no dudes en contactarme para m\xe1s informaci\xf3n en [i@tanshuai.com](mailto:i@tanshuai.com).\\n\\n\xa1Felices pruebas!\\n"},{"lang":"es","group":"blog","slug":"blog/usr-bin-sudo-must-be-owned-by-uid-0-and-have-the-setuid-bit-set-on-ubuntu-20-04","frontmatter":{"title":"/usr/bin/sudo debe ser propiedad del uid 0 y tener el bit setuid activado en Ubuntu 20.04","date":"2021-10-08T13:07:25.406Z","draft":false,"author":"Tan Shuai","tags":["Ubuntu","Linux","Sudo"],"categories":["Linux"]},"content":"\\nSi encuentras el mensaje de error \\"/usr/bin/sudo debe ser propiedad del uid 0 y tener el bit setuid activado\\" en Ubuntu 20.04, sigue estos pasos para resolver el problema.\\n\\n1. Durante el proceso de arranque, presiona la tecla ‘ESC’ para acceder al men\xfa de GRUB.\\n\\n![Pantalla de GRUB](/images/content/wx20211008-210752.png \\"Pantalla de GRUB\\")\\n\\n2. Selecciona la primera opci\xf3n, “Ubuntu”, y presiona la tecla ‘e’ para editar los par\xe1metros de arranque.\\n\\n![Editar Par\xe1metros de Arranque](/images/content/wx20211008-210841.png \\"Editar Par\xe1metros de Arranque\\")\\n\\n3. Agrega la siguiente cadena a la l\xednea que comienza con ‘linux’ para iniciar en modo de rescate:\\n\\n```bash\\nsystemd.unit=rescue.target\\n```\\n\\n4. Una vez en modo de rescate, ejecuta el siguiente comando para restaurar los permisos y la propiedad correctos de `/usr/bin/sudo`:\\n\\n```bash\\npkexec chmod a=rx,u+ws /usr/bin/sudo\\n```\\n\\nEste comando establece los permisos necesarios y asegura que `sudo` sea propiedad del usuario root con el bit setuid activado.\\n\\nSiguiendo estos pasos, deber\xedas poder resolver el problema y restaurar el funcionamiento adecuado del comando `sudo` en tu sistema Ubuntu.\\n\\n---\\n"}]'),o=t(2265),s=t(4410),r=t(803),l=e=>{let{searchResult:n,searchString:t,lang:a}=e,o=n.reduce((e,n)=>{let t=e.findIndex(e=>e.group===n.group);return -1===t?e.push({group:n.group,groupItems:[{frontmatter:{...n.frontmatter},slug:n.slug,content:n.content}]}):e[t].groupItems.push({frontmatter:{...n.frontmatter},slug:n.slug,content:n.content}),e},[]),l=(e,n)=>e.split(RegExp("(".concat(n,")"),"gi")).map((e,t)=>e.toLowerCase()===n.toLowerCase()?(0,i.jsx)("mark",{children:e},t):e),c=(e,n)=>{let t=null==e?void 0:e.split(RegExp("(".concat(n,")"),"gi"));return null==t?void 0:t.map((e,t)=>e.toLowerCase()===n.toLowerCase()?(0,i.jsx)("span",{className:"underline",children:e},t):e)},d=(e,n)=>{let t=(0,r.ab)(e),a=t.toLowerCase().indexOf(n.toLowerCase()),o=a;for(;o>0&&" "!==t[o-1];)o--;let s=t.substring(o,n.length+a),c=t.substring(n.length+a,n.length+a+80);return(0,i.jsxs)(i.Fragment,{children:[l(s,n),c]})};return(0,i.jsx)("div",{className:"search-wrapper-body",children:t?(0,i.jsx)("div",{className:"search-result",children:o.length>0?o.map(e=>(0,i.jsxs)("div",{className:"search-result-group",children:[(0,i.jsx)("p",{className:"search-result-group-title",children:(0,r.nR)(e.group)}),e.groupItems.map(e=>(0,i.jsxs)("div",{id:"searchItem",className:"search-result-item",children:[e.frontmatter.image&&(0,i.jsx)("div",{className:"search-result-item-image",children:(0,i.jsx)("img",{src:e.frontmatter.image,alt:e.frontmatter.title,width:100,height:100})}),(0,i.jsxs)("div",{className:"search-result-item-body",children:[(0,i.jsx)("a",{href:"".concat((0,s.b)(a,e.slug)),className:"search-result-item-title search-result-item-link",children:c(e.frontmatter.title,t)}),e.frontmatter.description&&(0,i.jsx)("p",{className:"search-result-item-description",children:c(e.frontmatter.description,t)}),e.content&&(0,i.jsx)("p",{className:"search-result-item-content",children:d(e.content,t)}),(0,i.jsxs)("div",{className:"search-result-item-taxonomies",children:[e.frontmatter.categories&&(0,i.jsxs)("div",{className:"mr-2",children:[(0,i.jsx)("svg",{width:"14",height:"14",fill:"currentColor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{d:"M11 0H3a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2 2 2 0 0 0 2-2V4a2 2 0 0 0-2-2 2 2 0 0 0-2-2zm2 3a1 1 0 0 1 1 1v8a1 1 0 0 1-1 1V3zM2 2a1 1 0 0 1 1-1h8a1 1 0 0 1 1 1v12a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V2z"})}),e.frontmatter.categories.map((n,a)=>(0,i.jsxs)("span",{children:[c(n,t),e.frontmatter.categories&&a!==e.frontmatter.categories.length-1&&(0,i.jsx)(i.Fragment,{children:", "})]},n))]}),e.frontmatter.tags&&(0,i.jsxs)("div",{className:"mr-2",children:[(0,i.jsxs)("svg",{width:"14",height:"14",fill:"currentColor",viewBox:"0 0 16 16",children:[(0,i.jsx)("path",{d:"M3 2v4.586l7 7L14.586 9l-7-7H3zM2 2a1 1 0 0 1 1-1h4.586a1 1 0 0 1 .707.293l7 7a1 1 0 0 1 0 1.414l-4.586 4.586a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 2 6.586V2z"}),(0,i.jsx)("path",{d:"M5.5 5a.5.5 0 1 1 0-1 .5.5 0 0 1 0 1zm0 1a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM1 7.086a1 1 0 0 0 .293.707L8.75 15.25l-.043.043a1 1 0 0 1-1.414 0l-7-7A1 1 0 0 1 0 7.586V3a1 1 0 0 1 1-1v5.086z"})]}),e.frontmatter.tags.map((n,a)=>(0,i.jsxs)("span",{children:[c(n,t),e.frontmatter.tags&&a!==e.frontmatter.tags.length-1&&(0,i.jsx)(i.Fragment,{children:", "})]},n))]})]})]})]},e.slug))]},e.group)):(0,i.jsxs)("div",{className:"search-result-empty",children:[(0,i.jsxs)("svg",{className:"mx-auto",width:"42",height:"42",viewBox:"0 0 47 47",fill:"none",children:[(0,i.jsx)("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M7.10368 33.9625C9.90104 36.2184 13.2988 37.6547 16.9158 38.0692C21.6958 38.617 26.5063 37.3401 30.3853 34.4939C30.4731 34.6109 30.5668 34.7221 30.6721 34.8304L41.9815 46.1397C42.5323 46.6909 43.2795 47.0007 44.0587 47.001C44.838 47.0013 45.5854 46.692 46.1366 46.1412C46.6878 45.5904 46.9976 44.8432 46.9979 44.064C46.9981 43.2847 46.6888 42.5373 46.138 41.9861L34.8287 30.6767C34.7236 30.5704 34.6107 30.4752 34.4909 30.3859C37.3352 26.5046 38.6092 21.6924 38.0579 16.912C37.6355 13.2498 36.1657 9.81322 33.8586 6.9977L31.7805 9.09214C34.0157 11.9274 35.2487 15.4472 35.2487 19.0942C35.2487 21.2158 34.8308 23.3167 34.0189 25.2769C33.207 27.2371 32.0169 29.0181 30.5167 30.5184C29.0164 32.0186 27.2354 33.2087 25.2752 34.0206C23.315 34.8325 21.2141 35.2504 19.0925 35.2504C16.9708 35.2504 14.8699 34.8325 12.9098 34.0206C11.5762 33.4682 10.3256 32.7409 9.18992 31.8599L7.10368 33.9625ZM28.9344 6.28152C26.1272 4.12516 22.671 2.93792 19.0925 2.93792C14.8076 2.93792 10.6982 4.64009 7.66829 7.66997C4.6384 10.6999 2.93623 14.8093 2.93623 19.0942C2.93623 21.2158 3.35413 23.3167 4.16605 25.2769C4.72475 26.6257 5.4625 27.8897 6.35716 29.0358L4.2702 31.1391C1.35261 27.548 -0.165546 23.0135 0.00974294 18.3781C0.19158 13.5695 2.18233 9.00695 5.58371 5.60313C8.98509 2.19932 13.5463 0.205307 18.3547 0.0200301C22.9447 -0.156832 27.4369 1.32691 31.0132 4.18636L28.9344 6.28152Z",fill:"currentColor"}),(0,i.jsx)("path",{d:"M3.13672 39.1367L38.3537 3.64355",stroke:"black",strokeWidth:"3",strokeLinecap:"round"})]}),(0,i.jsxs)("p",{className:"mt-4",children:['No results for "',(0,i.jsx)("strong",{children:t}),'"']})]})}):(0,i.jsx)("div",{className:"py-8 text-center",children:"Type something to search..."})})},c=e=>{let{lang:n}=e,[t,s]=(0,o.useState)(""),r=a.filter(e=>e.lang===n),c=performance.now(),d=(e=>{let n=RegExp("".concat(t),"gi");return""===t?[]:e.filter(e=>{var t,i,a;let o=e.frontmatter.title.toLowerCase().match(n),s=null===(t=e.frontmatter.description)||void 0===t?void 0:t.toLowerCase().match(n),r=null===(i=e.frontmatter.categories)||void 0===i?void 0:i.join(" ").toLowerCase().match(n),l=null===(a=e.frontmatter.tags)||void 0===a?void 0:a.join(" ").toLowerCase().match(n),c=e.content.toLowerCase().match(n);if(o||c||s||r||l)return e})})(r),u=((performance.now()-c)/1e3).toFixed(3);return(0,o.useEffect)(()=>{let e=document.getElementById("searchModal"),n=document.getElementById("searchInput"),t=document.getElementById("searchModalOverlay"),i=document.querySelectorAll("#searchItem");document.querySelectorAll("[data-search-trigger]").forEach(e=>{e.addEventListener("click",function(){document.getElementById("searchModal").classList.add("show"),n.focus()})}),t.addEventListener("click",function(){e.classList.remove("show")});let a=-1,o=()=>{var e;i.forEach((e,n)=>{n===a?e.classList.add("search-result-item-active"):e.classList.remove("search-result-item-active")}),null===(e=i[a])||void 0===e||e.scrollIntoView({behavior:"smooth",block:"nearest"})};document.addEventListener("keydown",function(t){if((t.metaKey||t.ctrlKey)&&"k"===t.key&&(e.classList.add("show"),n.focus(),o()),("ArrowUp"===t.key||"ArrowDown"===t.key)&&t.preventDefault(),"Escape"===t.key&&e.classList.remove("show"),"ArrowUp"===t.key&&a>0)a--;else if("ArrowDown"===t.key&&a<i.length-1)a++;else if("Enter"===t.key){let n=document.querySelector(".search-result-item-active a");n&&(null==n||n.click(),e.classList.remove("show"))}o()})},[t]),(0,i.jsxs)("div",{id:"searchModal",className:"search-modal",children:[(0,i.jsx)("div",{id:"searchModalOverlay",className:"search-modal-overlay"}),(0,i.jsxs)("div",{className:"search-wrapper",children:[(0,i.jsxs)("div",{className:"search-wrapper-header",children:[(0,i.jsxs)("label",{htmlFor:"searchInput",className:"absolute left-7 top-[calc(50%-7px)]",children:[(0,i.jsx)("span",{className:"sr-only",children:"search icon"}),t?(0,i.jsx)("svg",{onClick:()=>s(""),viewBox:"0 0 512 512",height:"18",width:"18",className:"hover:text-red-500 cursor-pointer -mt-0.5",children:(0,i.jsx)("path",{fill:"currentcolor",d:"M256 512A256 256 0 10256 0a256 256 0 100 512zM175 175c9.4-9.4 24.6-9.4 33.9.0l47 47 47-47c9.4-9.4 24.6-9.4 33.9.0s9.4 24.6.0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6.0 33.9s-24.6 9.4-33.9.0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9.0s-9.4-24.6.0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6.0-33.9z"})}):(0,i.jsx)("svg",{viewBox:"0 0 512 512",height:"18",width:"18",className:"-mt-0.5",children:(0,i.jsx)("path",{fill:"currentcolor",d:"M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8.0 45.3s-32.8 12.5-45.3.0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9.0 208S93.1.0 208 0 416 93.1 416 208zM208 352a144 144 0 100-288 144 144 0 100 288z"})})]}),(0,i.jsx)("input",{id:"searchInput",placeholder:"Search...",className:"search-wrapper-header-input",type:"input",name:"search",value:t,onChange:e=>{s(e.currentTarget.value.replace("\\","").toLowerCase())},autoFocus:!0,autoComplete:"off"})]}),(0,i.jsx)(l,{searchResult:d,searchString:t,lang:n}),(0,i.jsxs)("div",{className:"search-wrapper-footer",children:[(0,i.jsxs)("span",{className:"flex items-center",children:[(0,i.jsx)("kbd",{children:(0,i.jsx)("svg",{width:"14",height:"14",fill:"currentcolor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{d:"M3.204 11h9.592L8 5.519 3.204 11zm-.753-.659 4.796-5.48a1 1 0 011.506.0l4.796 5.48c.566.647.106 1.659-.753 1.659H3.204a1 1 0 01-.753-1.659z"})})}),(0,i.jsx)("kbd",{children:(0,i.jsx)("svg",{width:"14",height:"14",fill:"currentcolor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{d:"M3.204 5h9.592L8 10.481 3.204 5zm-.753.659 4.796 5.48a1 1 0 001.506.0l4.796-5.48c.566-.647.106-1.659-.753-1.659H3.204a1 1 0 00-.753 1.659z"})})}),"to navigate"]}),(0,i.jsxs)("span",{className:"flex items-center",children:[(0,i.jsx)("kbd",{children:(0,i.jsx)("svg",{width:"12",height:"12",fill:"currentcolor",viewBox:"0 0 16 16",children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M14.5 1.5a.5.5.0 01.5.5v4.8a2.5 2.5.0 01-2.5 2.5H2.707l3.347 3.346a.5.5.0 01-.708.708l-4.2-4.2a.5.5.0 010-.708l4-4a.5.5.0 11.708.708L2.707 8.3H12.5A1.5 1.5.0 0014 6.8V2a.5.5.0 01.5-.5z"})})}),"to select"]}),t&&(0,i.jsxs)("span",{children:[(0,i.jsxs)("strong",{children:[d.length," "]})," results - in"," ",(0,i.jsxs)("strong",{children:[u," "]})," seconds"]}),(0,i.jsxs)("span",{children:[(0,i.jsx)("kbd",{children:"ESC"})," to close"]})]})]})]})}},5045:function(e,n,t){"use strict";t.d(n,{default:function(){return g}});var i=t(7437),a=t(5159);let o={fa:t(3872)},s=e=>o[[...e].reduce((n,t,i)=>t===t.toUpperCase()&&""===n&&i>0?e.slice(0,i).toLowerCase():n,"")];var r=e=>{let{icon:n,...t}=e,a=s(n),o=a?a[n]:void 0;return o?(0,i.jsx)(o,{...t}):(0,i.jsx)("span",{className:"text-sm",children:"Icon not found"})},l=e=>{let{source:n,className:t}=e;return(0,i.jsx)("ul",{className:t,children:n.map(e=>(0,i.jsx)("li",{children:(0,i.jsxs)("a",{"aria-label":e.name,href:e.link,target:"_blank",rel:"noopener noreferrer nofollow",children:[(0,i.jsx)("span",{className:"sr-only",children:e.name}),(0,i.jsx)(r,{className:"inline-block",icon:e.icon})]})},e.name))})},c=t(145),d=JSON.parse('{"D":[{"name":"github","icon":"FaGithub","link":"https://www.github.com/tanshuai"},{"name":"linkedin","icon":"FaLinkedin","link":"https://www.linkedin.com/in/tanshuai"}]}'),u=t(4410),m=t(803),p=t(8755),g=e=>{let{lang:n,menu:t}=e,o="&copy;"+c.f.ly+"-"+new Date().getFullYear().toString()+" "+c.f.iF;return(0,i.jsxs)("footer",{className:"bg-theme-light dark:bg-darkmode-theme-light",children:[(0,i.jsx)("div",{className:"container",children:(0,i.jsxs)("div",{className:"row items-center py-10",children:[(0,i.jsx)("div",{className:"mb-8 text-center lg:col-3 lg:mb-0 lg:text-left",children:(0,i.jsx)(a.Z,{lang:n})}),(0,i.jsx)("div",{className:"mb-8 text-center lg:col-6 lg:mb-0",children:(0,i.jsx)("ul",{children:t.footer.map(e=>(0,i.jsx)("li",{className:"m-3 inline-block",children:(0,i.jsx)(p.Z,{href:(0,u.b)(n,e.url),children:e.name})},e.name))})}),(0,i.jsx)("div",{className:"mb-8 text-center lg:col-3 lg:mb-0 lg:mt-0 lg:text-right",children:(0,i.jsx)(l,{source:d.D,className:"social-icons"})})]})}),(0,i.jsx)("div",{className:"border-t border-border py-7 dark:border-darkmode-border",children:(0,i.jsxs)("div",{className:"container text-center text-light dark:text-darkmode-light",children:[(0,i.jsx)("p",{dangerouslySetInnerHTML:(0,m.gI)(o)}),c.f.k1&&(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:"http://beian.miit.gov.cn",target:"_blank",rel:"noopener noreferrer",children:c.f.k1})})]})})]})}},7743:function(e,n,t){"use strict";t.d(n,{default:function(){return y}});var i=t(7437),a=t(145),o=t(7812),s=t(943),r=t(4410),l=t(6463),c=t(2265),d=t(8755);function u(e){var n;let{className:t,lang:u}=e;(0,c.useMemo)(s.Mb,[]);let[m,p]=(0,c.useState)(u);(0,l.useRouter)();let g=(0,l.usePathname)(),[h,f]=(0,c.useState)(!1),[b,S]=(0,c.useState)(u),y=e=>{S(e),p(e),f(!1)},v=(e,n)=>{if(!a.settings.default_language_in_subdir)return(0,r.b)(e,n);{let t=n.split("/");return t[1]=e,t.join("/")}};return(0,i.jsxs)("div",{className:"".concat(t),children:[(0,i.jsx)("div",{className:"dropdown-selection cursor-pointer px-2 py-2 text-md text-center w-20 select-none whitespace-nowrap",onClick:()=>f(!h),onMouseEnter:()=>f(!0),onMouseLeave:()=>f(!1),children:null===(n=o.find(e=>e.languageCode.toLowerCase()===b))||void 0===n?void 0:n.languageName}),(0,i.jsx)("ul",{onMouseEnter:()=>f(!0),onMouseLeave:()=>f(!1),style:{maxHeight:"calc(100vh - 120px)"},className:"".concat(h?"visible":"invisible"," dropdown-menu absolute z-100 bg-theme-light whitespace-nowrap text-dark dark:bg-darkmode-theme-light dark:text-darkmode-dark overflow-y-auto"),children:o.filter(e=>!/\/(tags|categories|authors)\/.+/g.test(g)||e.languageCode===u).map(e=>(0,i.jsx)("li",{className:"dropdown-item",children:(0,i.jsx)(d.Z,{hrefLang:e.languageCode.toLowerCase(),href:v(e.languageCode.toLowerCase(),g),className:"block rounded px-2 py-2 text-center w-20 text-sm",onClick:()=>y(e.languageCode.toLowerCase()),children:e.languageName})},e.languageCode))})]})}var m=t(5159),p=t(9512);let g=e=>{let{fill:n}=e;return(0,i.jsx)("svg",{className:"",viewBox:"0 0 56 56",fill:n||"#000",height:"20",width:"20",children:(0,i.jsx)("path",{d:"M30 4.6c0-1-.9-2-2-2a2 2 0 0 0-2 2v5c0 1 .9 2 2 2s2-1 2-2Zm9.6 9a2 2 0 0 0 0 2.8c.8.8 2 .8 2.9 0L46 13a2 2 0 0 0 0-2.9 2 2 0 0 0-3 0Zm-26 2.8c.7.8 2 .8 2.8 0 .8-.7.8-2 0-2.9L13 10c-.7-.7-2-.8-2.9 0-.7.8-.7 2.1 0 3ZM28 16a12 12 0 0 0-12 12 12 12 0 0 0 12 12 12 12 0 0 0 12-12 12 12 0 0 0-12-12Zm23.3 14c1.1 0 2-.9 2-2s-.9-2-2-2h-4.9a2 2 0 0 0-2 2c0 1.1 1 2 2 2ZM4.7 26a2 2 0 0 0-2 2c0 1.1.9 2 2 2h4.9c1 0 2-.9 2-2s-1-2-2-2Zm37.8 13.6a2 2 0 0 0-3 0 2 2 0 0 0 0 2.9l3.6 3.5a2 2 0 0 0 2.9 0c.8-.8.8-2.1 0-3ZM10 43.1a2 2 0 0 0 0 2.9c.8.7 2.1.8 3 0l3.4-3.5c.8-.8.8-2.1 0-2.9-.8-.8-2-.8-2.9 0Zm20 3.4c0-1.1-.9-2-2-2a2 2 0 0 0-2 2v4.9c0 1 .9 2 2 2s2-1 2-2Z"})})},h=e=>{let{fill:n}=e;return(0,i.jsx)("svg",{className:"",viewBox:"0 0 24 24",fill:"none",height:"20",width:"20",children:(0,i.jsx)("path",{fill:n||"#000",fillRule:"evenodd",clipRule:"evenodd",d:"M8.2 2.2c1-.4 2 .6 1.6 1.5-1 3-.4 6.4 1.8 8.7a8.4 8.4 0 0 0 8.7 1.8c1-.3 2 .5 1.5 1.5v.1a10.3 10.3 0 0 1-9.4 6.2A10.3 10.3 0 0 1 3.2 6.7c1-2 2.9-3.5 4.9-4.4Z"})})},f=e=>{let{fill:n}=e;return(0,i.jsxs)("svg",{className:"".concat("#000"===n?"text-white":"text-black"),viewBox:"0 0 19 17",fill:n||"#fff",height:"19",width:"19",stroke:"currentColor",strokeWidth:"2",strokeLinecap:"round",strokeLinejoin:"round",children:[(0,i.jsx)("rect",{x:"3",y:"3",width:"14",height:"10",rx:"2",ry:"2"}),(0,i.jsx)("line",{x1:"7",y1:"17",x2:"13",y2:"17"}),(0,i.jsx)("line",{x1:"10",y1:"13",x2:"10",y2:"17"})]})};var b=e=>{let{className:n,lang:t}=e,{theme_switcher:o}=a.settings,[s,r]=(0,c.useState)(!1),[l,d]=(0,c.useState)(!1),{theme:u,setTheme:m,resolvedTheme:b}=(0,p.F)();(0,c.useEffect)(()=>r(!0),[]);let S=e=>{m(e),d(!1)};return(0,i.jsx)(i.Fragment,{children:o&&s&&(0,i.jsxs)("div",{className:"theme-label ".concat(n," w-5 h-5 flex-row relative justify-center items-center"),onClick:()=>d(!l),onMouseEnter:()=>d(!0),onMouseLeave:()=>d(!1),children:["light"===u?(0,i.jsx)(g,{}):"dark"===u?(0,i.jsx)(h,{fill:"light"!==b?"#fff":""}):(0,i.jsx)(f,{fill:"light"!==b?"#000":""}),(0,i.jsx)("ul",{onMouseEnter:()=>d(!0),onMouseLeave:()=>d(!1),className:"".concat(l?"visible":"invisible"," dropdown-menu absolute right-0 translate-x-2 top-full z-100 bg-theme-light whitespace-nowrap text-dark dark:bg-darkmode-theme-light dark:text-darkmode-dark"),children:[{label:"light",label_zh:"浅色"},{label:"dark",label_zh:"深色"},{label:"system",label_zh:"系统"}].map((e,n)=>(0,i.jsx)("li",{className:"dropdown-item",children:(0,i.jsxs)("div",{className:"block rounded px-2 py-2 text-center text-md inline-flex flex-row justify-center items-center",onClick:()=>S(e.label),children:["light"===e.label?(0,i.jsx)(g,{fill:"light"!==b?"#fff":""}):"dark"===e.label?(0,i.jsx)(h,{fill:"light"!==b?"#fff":""}):(0,i.jsx)(f,{fill:"light"!==b?"#000":""}),(0,i.jsx)("div",{className:"ml-3",children:t.includes("zh")?e.label_zh:e.label})]})},n))})]})})},S=t(5097),y=e=>{let{lang:n,menu:t}=e,o=(0,s.qz)(),{main:p}=t,{navigation_button:g,settings:h}=a,f=(0,l.usePathname)();return(0,c.useEffect)(()=>{window.scroll(0,0)},[f]),(0,i.jsx)("header",{className:"header z-30 ".concat(h.sticky_header&&"sticky top-0"),children:(0,i.jsxs)("nav",{className:"navbar container",children:[(0,i.jsx)("div",{className:"order-0",children:(0,i.jsx)(m.Z,{lang:n})}),(0,i.jsx)("input",{id:"nav-toggle",type:"checkbox",className:"hidden"}),(0,i.jsxs)("label",{htmlFor:"nav-toggle",className:"order-3 cursor-pointer flex items-center lg:hidden text-dark dark:text-white lg:order-1",children:[(0,i.jsxs)("svg",{id:"show-button",className:"h-6 fill-current block",viewBox:"0 0 20 20",children:[(0,i.jsx)("title",{children:"Menu Open"}),(0,i.jsx)("path",{d:"M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"})]}),(0,i.jsxs)("svg",{id:"hide-button",className:"h-6 fill-current hidden",viewBox:"0 0 20 20",children:[(0,i.jsx)("title",{children:"Menu Close"}),(0,i.jsx)("polygon",{points:"11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2",transform:"rotate(45 10 10)"})]})]}),(0,i.jsxs)("ul",{id:"nav-menu",className:"navbar-nav order-3 hidden w-full pb-6 lg:order-1 lg:flex lg:w-auto lg:space-x-2 lg:pb-0 xl:space-x-8",children:[p.map((e,t)=>{var a,o,s;return(0,i.jsx)(c.Fragment,{children:e.hasChildren?(0,i.jsxs)("li",{className:"nav-item nav-dropdown group relative",children:[(0,i.jsxs)("span",{className:"nav-link inline-flex items-center ".concat((null===(a=e.children)||void 0===a?void 0:a.map(e=>{let{url:n}=e;return n}).includes(f))||(null===(o=e.children)||void 0===o?void 0:o.map(e=>{let{url:n}=e;return"".concat(n,"/")}).includes(f))?"active":""),children:[e.name,(0,i.jsx)("svg",{className:"h-4 w-4 fill-current",viewBox:"0 0 20 20",children:(0,i.jsx)("path",{d:"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"})})]}),(0,i.jsx)("ul",{className:"nav-dropdown-list hidden group-hover:block lg:invisible lg:absolute lg:block lg:opacity-0 lg:group-hover:visible lg:group-hover:opacity-100",children:null===(s=e.children)||void 0===s?void 0:s.map((e,t)=>(0,i.jsx)("li",{className:"nav-dropdown-item",children:(0,i.jsx)(d.Z,{href:(0,r.b)(n,e.url),className:"nav-dropdown-link block ".concat((f==="".concat(e.url,"/")||f===e.url)&&"active"),children:e.name})},"children-".concat(t)))})]}):(0,i.jsx)("li",{className:"nav-item",children:(0,i.jsx)(d.Z,{href:(0,r.b)(n,e.url),className:"nav-link block ".concat((f==="".concat(e.url,"/")||f===e.url)&&"active"),children:e.name})})},"menu-".concat(t))}),g.enable&&(0,i.jsx)("li",{className:"mt-4 inline-block lg:hidden",children:(0,i.jsx)(d.Z,{className:"btn btn-outline-primary btn-sm",href:g.link,children:g.label})})]}),(0,i.jsxs)("div",{className:"order-1 ml-auto flex items-center md:order-2 lg:ml-0",children:[h.search&&(0,i.jsx)("button",{className:"border-border text-dark hover:text-primary dark:border-darkmode-border mr-5 inline-block border-r pr-5 text-xl dark:text-white dark:hover:text-darkmode-primary","aria-label":"search","data-search-trigger":!0,children:(0,i.jsx)(S.eaK,{})}),(0,i.jsx)(b,{className:"mr-5",lang:n}),o.length>1&&(0,i.jsx)(u,{lang:n,className:"mr-3 bg-theme-light dark:bg-darkmode-theme-light dark:text-darkmode-dark rounded"}),g.enable&&(0,i.jsx)(d.Z,{className:"btn btn-outline-primary btn-sm hidden lg:inline-block",href:g.link,children:g.label})]})]})})}},8958:function(e,n,t){"use strict";var i=t(7437),a=t(145),o=t(9512);n.default=e=>{let{children:n}=e,{default_theme:t}=a.settings;return(0,i.jsx)(o.f,{attribute:"class",defaultTheme:t,enableColorScheme:!1,children:n})}},943:function(e,n,t){"use strict";t.d(n,{FC:function(){return s},Mb:function(){return l},qz:function(){return r}});var i=t(145),a=t(7812);let o=i.settings.disable_languages,s=async e=>{let n=await t(3759)("./menu.".concat(e,".json")),i=await t(8621)("./".concat(e,".json"));return{...n,...i}},r=()=>a.filter(e=>!o.includes(e.languageCode)),l=()=>i.settings.default_language},4410:function(e,n,t){"use strict";t.d(n,{b:function(){return o}});var i=t(145),a=t(943);function o(e,n){let t=(0,a.Mb)(),o=(0,a.qz)();e=e!==t||i.settings.default_language_in_subdir?e.replace(/^\/|\/$/g,""):"";let s=RegExp("(".concat(o.map(e=>"^/".concat(e.languageCode)).join("|"),")"),"g");return n=n.replace(s,"").replace(/^\/|\/$/g,""),i.site.Yw&&(n=encodeURI(encodeURI(n)))&&!/\/$/.test(n)&&(n+="/"),""!==e&&(e="/".concat(e)),"".concat(i.site.Yw&&i.site.Km?i.site.Km:"").concat(e,"/").concat(n)}},803:function(e,n,t){"use strict";t.d(n,{OI:function(){return o},ab:function(){return r},gI:function(){return a},nR:function(){return s}}),t(7727);var i=t(2266);let a=(e,n)=>({__html:n?i.TU.parse(e):i.TU.parseInline(e)}),o=e=>{let n;try{n=decodeURI(decodeURI(e))}catch(t){console.error("Failed to decode URI component",t),n=e}return n.replace(/^[\s_]+|[\s_]+$/g,"").replace(/[_\s]+/g," ").replace(/^[a-z]/,function(e){return e.toUpperCase()})},s=e=>o(e).split(" ").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" "),r=e=>l(i.TU.parse(e).replace(/<\/?[^>]+(>|$)/gm,"").replace(/[\r\n]\s*[\r\n]/gm,"")),l=e=>{let n={"&nbsp;":" ","&lt;":"<","&gt;":">","&amp;":"&","&quot;":'"',"&#39;":"'"};return e.replace(/(&amp;|&lt;|&gt;|&quot;|&#39;)/g,e=>n[e])}},9512:function(e,n,t){"use strict";t.d(n,{F:function(){return c},f:function(){return d}});var i=t(2265),a=["light","dark"],o="(prefers-color-scheme: dark)",s="undefined"==typeof window,r=i.createContext(void 0),l={setTheme:e=>{},themes:[]},c=()=>{var e;return null!=(e=i.useContext(r))?e:l},d=e=>i.useContext(r)?e.children:i.createElement(m,{...e}),u=["light","dark"],m=e=>{let{forcedTheme:n,disableTransitionOnChange:t=!1,enableSystem:s=!0,enableColorScheme:l=!0,storageKey:c="theme",themes:d=u,defaultTheme:m=s?"system":"light",attribute:b="data-theme",value:S,children:y,nonce:v}=e,[C,w]=i.useState(()=>g(c,m)),[D,A]=i.useState(()=>g(c)),k=S?Object.values(S):d,L=i.useCallback(e=>{let n=e;if(!n)return;"system"===e&&s&&(n=f());let i=S?S[n]:n,o=t?h():null,r=document.documentElement;if("class"===b?(r.classList.remove(...k),i&&r.classList.add(i)):i?r.setAttribute(b,i):r.removeAttribute(b),l){let e=a.includes(m)?m:null,t=a.includes(n)?n:e;r.style.colorScheme=t}null==o||o()},[]),T=i.useCallback(e=>{let n="function"==typeof e?e(e):e;w(n);try{localStorage.setItem(c,n)}catch(e){}},[n]),P=i.useCallback(e=>{A(f(e)),"system"===C&&s&&!n&&L("system")},[C,n]);i.useEffect(()=>{let e=window.matchMedia(o);return e.addListener(P),P(e),()=>e.removeListener(P)},[P]),i.useEffect(()=>{let e=e=>{e.key===c&&T(e.newValue||m)};return window.addEventListener("storage",e),()=>window.removeEventListener("storage",e)},[T]),i.useEffect(()=>{L(null!=n?n:C)},[n,C]);let z=i.useMemo(()=>({theme:C,setTheme:T,forcedTheme:n,resolvedTheme:"system"===C?D:C,themes:s?[...d,"system"]:d,systemTheme:s?D:void 0}),[C,T,n,D,s,d]);return i.createElement(r.Provider,{value:z},i.createElement(p,{forcedTheme:n,disableTransitionOnChange:t,enableSystem:s,enableColorScheme:l,storageKey:c,themes:d,defaultTheme:m,attribute:b,value:S,children:y,attrs:k,nonce:v}),y)},p=i.memo(e=>{let{forcedTheme:n,storageKey:t,attribute:s,enableSystem:r,enableColorScheme:l,defaultTheme:c,value:d,attrs:u,nonce:m}=e,p="system"===c,g="class"===s?"var d=document.documentElement,c=d.classList;".concat("c.remove(".concat(u.map(e=>"'".concat(e,"'")).join(","),")"),";"):"var d=document.documentElement,n='".concat(s,"',s='setAttribute';"),h=l?(a.includes(c)?c:null)?"if(e==='light'||e==='dark'||!e)d.style.colorScheme=e||'".concat(c,"'"):"if(e==='light'||e==='dark')d.style.colorScheme=e":"",f=function(e){let n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],t=!(arguments.length>2)||void 0===arguments[2]||arguments[2],i=d?d[e]:e,o=n?e+"|| ''":"'".concat(i,"'"),r="";return l&&t&&!n&&a.includes(e)&&(r+="d.style.colorScheme = '".concat(e,"';")),"class"===s?n||i?r+="c.add(".concat(o,")"):r+="null":i&&(r+="d[s](n,".concat(o,")")),r},b=n?"!function(){".concat(g).concat(f(n),"}()"):r?"!function(){try{".concat(g,"var e=localStorage.getItem('").concat(t,"');if('system'===e||(!e&&").concat(p,")){var t='").concat(o,"',m=window.matchMedia(t);if(m.media!==t||m.matches){").concat(f("dark"),"}else{").concat(f("light"),"}}else if(e){").concat(d?"var x=".concat(JSON.stringify(d),";"):"").concat(f(d?"x[e]":"e",!0),"}").concat(p?"":"else{"+f(c,!1,!1)+"}").concat(h,"}catch(e){}}()"):"!function(){try{".concat(g,"var e=localStorage.getItem('").concat(t,"');if(e){").concat(d?"var x=".concat(JSON.stringify(d),";"):"").concat(f(d?"x[e]":"e",!0),"}else{").concat(f(c,!1,!1),";}").concat(h,"}catch(t){}}();");return i.createElement("script",{nonce:m,dangerouslySetInnerHTML:{__html:b}})}),g=(e,n)=>{let t;if(!s){try{t=localStorage.getItem(e)||void 0}catch(e){}return t||n}},h=()=>{let e=document.createElement("style");return e.appendChild(document.createTextNode("*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}")),document.head.appendChild(e),()=>{window.getComputedStyle(document.body),setTimeout(()=>{document.head.removeChild(e)},1)}},f=e=>(e||(e=window.matchMedia(o)),e.matches?"dark":"light")},1810:function(e,n,t){"use strict";t.d(n,{w_:function(){return d}});var i=t(2265),a={color:void 0,size:void 0,className:void 0,style:void 0,attr:void 0},o=i.createContext&&i.createContext(a),s=["attr","size","title"];function r(){return(r=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter(function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable})),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach(function(n){var i,a;i=n,a=t[n],(i=function(e){var n=function(e,n){if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var i=t.call(e,n||"default");if("object"!=typeof i)return i;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===n?String:Number)(e)}(e,"string");return"symbol"==typeof n?n:n+""}(i))in e?Object.defineProperty(e,i,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[i]=a}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach(function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))})}return e}function d(e){return n=>i.createElement(u,r({attr:c({},e.attr)},n),function e(n){return n&&n.map((n,t)=>i.createElement(n.tag,c({key:t},n.attr),e(n.child)))}(e.child))}function u(e){var n=n=>{var t,{attr:a,size:o,title:l}=e,d=function(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t={};for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){if(n.indexOf(i)>=0)continue;t[i]=e[i]}return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],!(n.indexOf(t)>=0)&&Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}(e,s),u=o||n.size||"1em";return n.className&&(t=n.className),e.className&&(t=(t?t+" ":"")+e.className),i.createElement("svg",r({stroke:"currentColor",fill:"currentColor",strokeWidth:"0"},n.attr,a,d,{className:t,style:c(c({color:e.color||n.color},n.style),e.style),height:u,width:u,xmlns:"http://www.w3.org/2000/svg"}),l&&i.createElement("title",null,l),e.children)};return void 0!==o?i.createElement(o.Consumer,null,e=>n(e)):n(a)}},145:function(e){"use strict";e.exports=JSON.parse('{"site":{"title":"Tan Shuai","base_url":"https://tanshuai.com","Km":"","Yw":true,"logo":"","logo_darkmode":"","logo_width":"150","logo_height":"27","logo_text":"Tan Shuai"},"settings":{"search":true,"sticky_header":true,"theme_switcher":true,"default_theme":"light","pagination":2,"summary_length":200,"blog_folder":"blog","default_language":"en","disable_languages":[],"default_language_in_subdir":false},"f":{"ly":"2001","iF":"tanshuai.com","k1":""},"navigation_button":{"enable":false,"label":"Get Started","link":"https://tanshuai.com"},"disqus":{"enable":false,"shortname":"themefisher-template","settings":{}},"metadata":{"meta_author":"Tan Shuai","meta_image":"/images/og-image.png","meta_description":"Tan Shuai (tanshuai)"}}')},7812:function(e){"use strict";e.exports=JSON.parse('[{"languageName":"English","languageCode":"en","contentDir":"english","title":"Tan Shuai","weight":1},{"languageName":"繁體中文","languageCode":"zh-hant","contentDir":"traditional_chinese","title":"譚帥 - Tan Shuai","weight":1},{"languageName":"简体中文","languageCode":"zh","contentDir":"chinese","title":"谭帅 - Tan Shuai","weight":1},{"languageName":"日本語","languageCode":"ja","contentDir":"japanese","title":"タン・シュアイ - Tan Shuai","weight":1},{"languageName":"Deutsch","languageCode":"de","contentDir":"german","title":"Tan Shuai","weight":1},{"languageName":"Fran\xe7ais","languageCode":"fr","contentDir":"french","title":"Tan Shuai","weight":1},{"languageName":"Русский","languageCode":"ru","contentDir":"russian","title":"Тан Шуай - Tan Shuai","weight":1},{"languageName":"Espa\xf1ol","languageCode":"es","contentDir":"spanish","title":"Tan Shuai","weight":1}]')}},function(e){e.O(0,[5706,7240,8056,4673,2971,7023,1744],function(){return e(e.s=352)}),_N_E=e.O()}]);